{"ast":null,"code":"// Placeholder for API service calls\n\n// Example structure for skillsAPI\nexport const skillsAPI = {\n  getSkills: async () => {\n    console.log('Fetching skills...');\n    // In a real app, this would fetch data from Supabase or another backend\n    return Promise.resolve([{\n      id: '1',\n      name: 'Understanding Variables',\n      category: 'Programming Basics',\n      subcategory: 'Fundamentals',\n      description: 'Learn about variables.',\n      masteryLevel: 0,\n      mastered: false,\n      videoId: 'vid1'\n    }, {\n      id: '2',\n      name: 'Loops and Iteration',\n      category: 'Programming Basics',\n      subcategory: 'Control Flow',\n      description: 'Learn about loops.',\n      masteryLevel: 0,\n      mastered: false,\n      videoId: 'vid2'\n    }, {\n      id: '3',\n      name: 'Functions and Modularity',\n      category: 'Programming Basics',\n      subcategory: 'Modularity',\n      description: 'Learn about functions.',\n      masteryLevel: 0,\n      mastered: false,\n      videoId: 'vid3'\n    }]);\n  },\n  updateSkillProgress: async (skillId, masteryLevel, mastered) => {\n    console.log(`Updating skill ${skillId} masteryLevel to ${masteryLevel}, mastered: ${mastered}`);\n    return Promise.resolve({\n      id: skillId,\n      masteryLevel,\n      mastered\n    });\n  }\n  // Add other skill-related API functions here\n};\n\n// Example structure for videosAPI\nexport const videosAPI = {\n  getVideoDetails: async videoId => {\n    console.log(`Fetching details for video ${videoId}...`);\n    // Fetch video details from backend\n    return Promise.resolve({\n      id: videoId,\n      title: `Sample Video ${videoId}`,\n      url: 'https://www.example.com/sample.mp4',\n      // Placeholder URL\n      description: 'This is a sample video description.'\n    });\n  },\n  markVideoCompleted: async (videoId, userId) => {\n    console.log(`Marking video ${videoId} completed for user ${userId}`);\n    return Promise.resolve({\n      success: true\n    });\n  }\n  // Add other video-related API functions here\n};","map":{"version":3,"names":["skillsAPI","getSkills","console","log","Promise","resolve","id","name","category","subcategory","description","masteryLevel","mastered","videoId","updateSkillProgress","skillId","videosAPI","getVideoDetails","title","url","markVideoCompleted","userId","success"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/services/api.ts"],"sourcesContent":["// Placeholder for API service calls\n\n// Example structure for skillsAPI\nexport const skillsAPI = {\n  getSkills: async () => {\n    console.log('Fetching skills...');\n    // In a real app, this would fetch data from Supabase or another backend\n    return Promise.resolve([\n      { id: '1', name: 'Understanding Variables', category: 'Programming Basics', subcategory: 'Fundamentals', description: 'Learn about variables.', masteryLevel: 0, mastered: false, videoId: 'vid1' },\n      { id: '2', name: 'Loops and Iteration', category: 'Programming Basics', subcategory: 'Control Flow', description: 'Learn about loops.', masteryLevel: 0, mastered: false, videoId: 'vid2' },\n      { id: '3', name: 'Functions and Modularity', category: 'Programming Basics', subcategory: 'Modularity', description: 'Learn about functions.', masteryLevel: 0, mastered: false, videoId: 'vid3' },\n    ]);\n  },\n  updateSkillProgress: async (skillId: string, masteryLevel: number, mastered: boolean) => {\n    console.log(`Updating skill ${skillId} masteryLevel to ${masteryLevel}, mastered: ${mastered}`);\n    return Promise.resolve({ id: skillId, masteryLevel, mastered });\n  },\n  // Add other skill-related API functions here\n};\n\n// Example structure for videosAPI\nexport const videosAPI = {\n  getVideoDetails: async (videoId: string) => {\n    console.log(`Fetching details for video ${videoId}...`);\n    // Fetch video details from backend\n    return Promise.resolve(\n      { \n        id: videoId, \n        title: `Sample Video ${videoId}`,\n        url: 'https://www.example.com/sample.mp4', // Placeholder URL\n        description: 'This is a sample video description.'\n      }\n    );\n  },\n  markVideoCompleted: async (videoId: string, userId: string) => {\n    console.log(`Marking video ${videoId} completed for user ${userId}`);\n    return Promise.resolve({ success: true });\n  }\n  // Add other video-related API functions here\n}; "],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,SAAS,GAAG;EACvBC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC;IACA,OAAOC,OAAO,CAACC,OAAO,CAAC,CACrB;MAAEC,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,yBAAyB;MAAEC,QAAQ,EAAE,oBAAoB;MAAEC,WAAW,EAAE,cAAc;MAAEC,WAAW,EAAE,wBAAwB;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAO,CAAC,EACnM;MAAEP,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,qBAAqB;MAAEC,QAAQ,EAAE,oBAAoB;MAAEC,WAAW,EAAE,cAAc;MAAEC,WAAW,EAAE,oBAAoB;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAO,CAAC,EAC3L;MAAEP,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,0BAA0B;MAAEC,QAAQ,EAAE,oBAAoB;MAAEC,WAAW,EAAE,YAAY;MAAEC,WAAW,EAAE,wBAAwB;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAO,CAAC,CACnM,CAAC;EACJ,CAAC;EACDC,mBAAmB,EAAE,MAAAA,CAAOC,OAAe,EAAEJ,YAAoB,EAAEC,QAAiB,KAAK;IACvFV,OAAO,CAACC,GAAG,CAAC,kBAAkBY,OAAO,oBAAoBJ,YAAY,eAAeC,QAAQ,EAAE,CAAC;IAC/F,OAAOR,OAAO,CAACC,OAAO,CAAC;MAAEC,EAAE,EAAES,OAAO;MAAEJ,YAAY;MAAEC;IAAS,CAAC,CAAC;EACjE;EACA;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,SAAS,GAAG;EACvBC,eAAe,EAAE,MAAOJ,OAAe,IAAK;IAC1CX,OAAO,CAACC,GAAG,CAAC,8BAA8BU,OAAO,KAAK,CAAC;IACvD;IACA,OAAOT,OAAO,CAACC,OAAO,CACpB;MACEC,EAAE,EAAEO,OAAO;MACXK,KAAK,EAAE,gBAAgBL,OAAO,EAAE;MAChCM,GAAG,EAAE,oCAAoC;MAAE;MAC3CT,WAAW,EAAE;IACf,CACF,CAAC;EACH,CAAC;EACDU,kBAAkB,EAAE,MAAAA,CAAOP,OAAe,EAAEQ,MAAc,KAAK;IAC7DnB,OAAO,CAACC,GAAG,CAAC,iBAAiBU,OAAO,uBAAuBQ,MAAM,EAAE,CAAC;IACpE,OAAOjB,OAAO,CAACC,OAAO,CAAC;MAAEiB,OAAO,EAAE;IAAK,CAAC,CAAC;EAC3C;EACA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}