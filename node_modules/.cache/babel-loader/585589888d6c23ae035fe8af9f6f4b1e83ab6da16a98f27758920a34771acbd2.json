{"ast":null,"code":"var _jsxFileName = \"/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { useSpring, animated, config } from 'react-spring';\n\n// Helper functions (re-introducing some from the original complex version)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lerp = (a, b, t) => a * (1 - t) + b * t;\nconst clamp = (num, min, max) => Math.min(Math.max(num, min), max);\nconst randRange = (min, max) => Math.random() * (max - min) + min;\nconst TRUNK_BASE_COLOR = '#8B5A2B'; // From your current simplified version\nconst TRUNK_HIGHLIGHT_COLOR = '#A07855';\nconst BRANCH_COLOR = '#8B5A2B';\nconst LEAF_MASTERED_COLOR = '#2E7D32'; // Darker green from image\nconst LEAF_IN_PROGRESS_COLOR = '#66BB6A'; // Lighter green from image\nconst POT_COLOR_MAIN = '#A08C7D'; // From your current simplified version\nconst POT_COLOR_RIM = '#B5A090'; // From your current simplified version\n\nconst BonsaiTree = ({\n  skills,\n  totalSkills\n}) => {\n  _s();\n  const theme = useTheme(); // Keep MUI theme if needed for other parts\n\n  const masteredSkillsCount = useMemo(() => {\n    return skills.filter(skill => skill.mastered).length;\n  }, [skills]);\n  const overallMasteryRatio = useMemo(() => {\n    return totalSkills > 0 ? masteredSkillsCount / totalSkills : 0;\n  }, [masteredSkillsCount, totalSkills]);\n  const skillsByCategory = useMemo(() => {\n    return skills.reduce((acc, skill) => {\n      if (!acc[skill.category]) {\n        acc[skill.category] = [];\n      }\n      acc[skill.category].push(skill);\n      return acc;\n    }, {});\n  }, [skills]);\n\n  // Tree generation logic\n  const treeElements = useMemo(() => {\n    const categories = Object.keys(skillsByCategory);\n    const numCategories = categories.length;\n    if (numCategories === 0) return {\n      trunkPath: '',\n      branches: [],\n      pot: {\n        path1: '',\n        path2: ''\n      }\n    };\n    const svgWidth = 300;\n    const svgHeight = 400;\n    const potHeight = 50;\n    const potWidth = 120;\n    const potBaseY = svgHeight - 20;\n\n    // Pot paths (similar to your image's pot)\n    const pot = {\n      path1: `M${svgWidth / 2 - potWidth / 2},${potBaseY} Q${svgWidth / 2},${potBaseY + 25} ${svgWidth / 2 + potWidth / 2},${potBaseY} L${svgWidth / 2 + potWidth / 2 - 15},${potBaseY - potHeight + 15} Q${svgWidth / 2},${potBaseY - potHeight + 5} ${svgWidth / 2 - potWidth / 2 + 15},${potBaseY - potHeight + 15} Z`,\n      path2: `M${svgWidth / 2 - potWidth / 2 + 10},${potBaseY - potHeight + 15} h${potWidth - 20} v${-10} h${-(potWidth - 20)} Z`\n    };\n\n    // Trunk\n    const trunkBaseWidth = clamp(20 + overallMasteryRatio * 20, 15, 40);\n    const trunkHeight = clamp(100 + overallMasteryRatio * 80, 80, 180);\n    const trunkTopY = potBaseY - potHeight;\n    const trunkStartX = svgWidth / 2;\n\n    // A more organic trunk path using Bezier curve\n    const trunkPath = `\n      M ${trunkStartX - trunkBaseWidth / 2}, ${trunkTopY}\n      C ${trunkStartX - trunkBaseWidth * 0.8}, ${trunkTopY - trunkHeight * 0.3}\n        ${trunkStartX + trunkBaseWidth * 0.3}, ${trunkTopY - trunkHeight * 0.7}\n        ${trunkStartX}, ${trunkTopY - trunkHeight}\n      L ${trunkStartX + 5}, ${trunkTopY - trunkHeight + 5} \n      C ${trunkStartX + trunkBaseWidth * 0.2}, ${trunkTopY - trunkHeight * 0.65}\n        ${trunkStartX + trunkBaseWidth * 0.7}, ${trunkTopY - trunkHeight * 0.25}\n        ${trunkStartX + trunkBaseWidth / 2}, ${trunkTopY}\n      Z\n    `;\n    const trunkTopCenter = {\n      x: trunkStartX,\n      y: trunkTopY - trunkHeight\n    };\n\n    // Branch Generation\n    const generatedBranches = [];\n    const baseAngles = [-Math.PI / 2 - 0.7, -Math.PI / 2 + 0.7, -Math.PI / 2 + 0.1, -Math.PI / 2 - 0.2]; // Example for up to 4\n\n    categories.forEach((category, index) => {\n      if (index >= 4) return; // Limit main branches for now to match image style\n\n      const categorySkills = skillsByCategory[category];\n      const masteredInCategory = categorySkills.filter(s => s.mastered).length;\n      const categoryMasteryRatio = categorySkills.length > 0 ? masteredInCategory / categorySkills.length : 0;\n      const branchAngle = baseAngles[index % baseAngles.length] + randRange(-0.1, 0.1);\n      const branchLength = clamp(60 + categorySkills.length * 8, 50, 100) * (0.8 + categoryMasteryRatio * 0.4);\n      const branchThickness = clamp(8 + categoryMasteryRatio * 10, 6, 18);\n      const startPoint = {\n        ...trunkTopCenter\n      };\n      // Offset start point slightly along the trunk's curve for more natural branching\n      if (index > 0) {\n        // Main top branch starts from trunk tip\n        startPoint.y += (index % 2 === 0 ? 10 : 20) * (index + 1);\n        startPoint.x += (index % 2 === 0 ? -5 : 5) * (index * 0.5);\n      }\n      const endPoint = {\n        x: startPoint.x + Math.cos(branchAngle) * branchLength,\n        y: startPoint.y + Math.sin(branchAngle) * branchLength\n      };\n\n      // Control points for Bezier curve branches\n      const cp1 = {\n        x: startPoint.x + Math.cos(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3,\n        y: startPoint.y + Math.sin(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3\n      };\n      const cp2 = {\n        x: endPoint.x - Math.cos(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3,\n        y: endPoint.y - Math.sin(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3\n      };\n\n      // Foliage Pad Generation\n      const foliagePads = [];\n      const numPadsPerBranch = 1; // For simplicity, one main pad per branch like the image\n      for (let i = 0; i < numPadsPerBranch; i++) {\n        // Position pad towards the end of the branch\n        const padBaseX = lerp(cp2.x, endPoint.x, 0.7);\n        const padBaseY = lerp(cp2.y, endPoint.y, 0.7);\n        const padRx = clamp(20 + categorySkills.length * 2 + categoryMasteryRatio * 15, 15, 40);\n        const padRy = clamp(15 + categorySkills.length * 1.5 + categoryMasteryRatio * 10, 10, 30);\n\n        // Create multiple overlapping ellipses for a fuller pad\n        for (let j = 0; j < 3; j++) {\n          // 3 ellipses per pad\n          const offsetX = randRange(-padRx * 0.3, padRx * 0.3);\n          const offsetY = randRange(-padRy * 0.3, padRy * 0.3);\n          foliagePads.push({\n            id: `pad-${category}-${index}-${i}-${j}`,\n            cx: padBaseX + offsetX,\n            cy: padBaseY + offsetY,\n            rx: padRx * randRange(0.8, 1.1),\n            ry: padRy * randRange(0.8, 1.1),\n            rotation: randRange(-15, 15),\n            color: categoryMasteryRatio > 0.7 ? LEAF_MASTERED_COLOR : categoryMasteryRatio > 0.3 ? LEAF_IN_PROGRESS_COLOR : theme.palette.grey[600],\n            // Mix of green and grey for less progress\n            skillIds: categorySkills.map(s => s.id)\n          });\n        }\n      }\n      generatedBranches.push({\n        id: `branch-${category}-${index}`,\n        start: startPoint,\n        end: endPoint,\n        control1: cp1,\n        control2: cp2,\n        thickness: branchThickness,\n        angle: branchAngle,\n        level: 0,\n        skillsInCategory: categorySkills,\n        masteryRatio: categoryMasteryRatio,\n        subBranches: [],\n        // Simplified: no deep sub-branches for this style\n        foliagePads: foliagePads\n      });\n    });\n    return {\n      trunkPath,\n      branches: generatedBranches,\n      pot\n    };\n  }, [skillsByCategory, overallMasteryRatio, theme.palette.grey]);\n\n  // Animations using react-spring\n  const {\n    opacity\n  } = useSpring({\n    from: {\n      opacity: 0\n    },\n    to: {\n      opacity: 1\n    },\n    config: config.molasses\n  });\n  const trunkAnimProps = useSpring({\n    from: {\n      strokeDashoffset: 1000\n    },\n    to: {\n      strokeDashoffset: 0\n    },\n    config: {\n      duration: 1500,\n      ...config.slow\n    }\n  });\n  const branchAnimProps = useSpring({\n    from: {\n      strokeDashoffset: 1000\n    },\n    to: {\n      strokeDashoffset: 0\n    },\n    config: {\n      duration: 1200,\n      delay: 800,\n      ...config.slow\n    }\n  });\n  const foliageAnimProps = useSpring({\n    from: {\n      transform: 'scale(0.5)',\n      opacity: 0\n    },\n    to: {\n      transform: 'scale(1)',\n      opacity: 1\n    },\n    config: {\n      delay: 1500,\n      ...config.wobbly\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: {\n      opacity\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 0,\n      sx: {\n        p: 3,\n        mb: 4,\n        borderRadius: '20px',\n        backgroundColor: '#f7f7f7'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        align: \"center\",\n        sx: {\n          fontWeight: 'bold',\n          color: '#555'\n        },\n        children: \"Your Growth Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          height: 350,\n          position: 'relative',\n          mt: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: \"0 0 300 400\",\n          style: {\n            overflow: 'visible'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n            children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n              id: \"trunkGradient\",\n              x1: \"0%\",\n              y1: \"0%\",\n              x2: \"100%\",\n              y2: \"0%\",\n              children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"0%\",\n                stopColor: TRUNK_HIGHLIGHT_COLOR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"50%\",\n                stopColor: TRUNK_BASE_COLOR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"100%\",\n                stopColor: TRUNK_HIGHLIGHT_COLOR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: treeElements.pot.path1,\n            fill: POT_COLOR_MAIN\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: treeElements.pot.path2,\n            fill: POT_COLOR_RIM\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(animated.path, {\n            d: treeElements.trunkPath,\n            fill: \"url(#trunkGradient)\",\n            stroke: TRUNK_BASE_COLOR,\n            strokeWidth: \"1\",\n            style: trunkAnimProps,\n            strokeDasharray: \"1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), treeElements.branches.map(branch => /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(animated.path, {\n              d: `M ${branch.start.x} ${branch.start.y} C ${branch.control1.x} ${branch.control1.y}, ${branch.control2.x} ${branch.control2.y}, ${branch.end.x} ${branch.end.y}`,\n              stroke: BRANCH_COLOR,\n              strokeWidth: branch.thickness,\n              fill: \"none\",\n              strokeLinecap: \"round\",\n              style: branchAnimProps,\n              strokeDasharray: \"1000\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this), branch.foliagePads.map(pad => /*#__PURE__*/_jsxDEV(animated.ellipse, {\n              cx: pad.cx,\n              cy: pad.cy,\n              rx: pad.rx,\n              ry: pad.ry,\n              fill: pad.color,\n              opacity: 0.85 // Slight transparency for overlapping effect\n              ,\n              transform: `rotate(${pad.rotation}, ${pad.cx}, ${pad.cy})`,\n              style: foliageAnimProps,\n              children: /*#__PURE__*/_jsxDEV(\"title\", {\n                children: branch.skillsInCategory.map(s => s.name).join(', ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 21\n              }, this)\n            }, pad.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 19\n            }, this))]\n          }, branch.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        align: \"center\",\n        sx: {\n          mt: 3,\n          color: '#666'\n        },\n        children: [\"You've mastered \", masteredSkillsCount, \" skills so far! Keep growing!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(BonsaiTree, \"JR0RupXEJF6/zvAjVUoVBB6wh90=\", false, function () {\n  return [useTheme, useSpring, useSpring, useSpring, useSpring];\n});\n_c = BonsaiTree;\nexport default BonsaiTree;\nvar _c;\n$RefreshReg$(_c, \"BonsaiTree\");","map":{"version":3,"names":["React","useMemo","Box","Typography","Paper","useTheme","useSpring","animated","config","jsxDEV","_jsxDEV","lerp","a","b","t","clamp","num","min","max","Math","randRange","random","TRUNK_BASE_COLOR","TRUNK_HIGHLIGHT_COLOR","BRANCH_COLOR","LEAF_MASTERED_COLOR","LEAF_IN_PROGRESS_COLOR","POT_COLOR_MAIN","POT_COLOR_RIM","BonsaiTree","skills","totalSkills","_s","theme","masteredSkillsCount","filter","skill","mastered","length","overallMasteryRatio","skillsByCategory","reduce","acc","category","push","treeElements","categories","Object","keys","numCategories","trunkPath","branches","pot","path1","path2","svgWidth","svgHeight","potHeight","potWidth","potBaseY","trunkBaseWidth","trunkHeight","trunkTopY","trunkStartX","trunkTopCenter","x","y","generatedBranches","baseAngles","PI","forEach","index","categorySkills","masteredInCategory","s","categoryMasteryRatio","branchAngle","branchLength","branchThickness","startPoint","endPoint","cos","sin","cp1","cp2","foliagePads","numPadsPerBranch","i","padBaseX","padBaseY","padRx","padRy","j","offsetX","offsetY","id","cx","cy","rx","ry","rotation","color","palette","grey","skillIds","map","start","end","control1","control2","thickness","angle","level","skillsInCategory","masteryRatio","subBranches","opacity","from","to","molasses","trunkAnimProps","strokeDashoffset","duration","slow","branchAnimProps","delay","foliageAnimProps","transform","wobbly","div","style","children","elevation","sx","p","mb","borderRadius","backgroundColor","variant","gutterBottom","align","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","width","height","position","mt","viewBox","overflow","x1","y1","x2","y2","offset","stopColor","d","fill","path","stroke","strokeWidth","strokeDasharray","branch","strokeLinecap","pad","ellipse","name","join","_c","$RefreshReg$"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx"],"sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { useSpring, animated, config } from 'react-spring';\n\n// Helper functions (re-introducing some from the original complex version)\nconst lerp = (a: number, b: number, t: number): number => a * (1 - t) + b * t;\nconst clamp = (num: number, min: number, max: number): number => Math.min(Math.max(num, min), max);\nconst randRange = (min: number, max: number): number => Math.random() * (max - min) + min;\n\ninterface Skill {\n  id: string;\n  name: string;\n  category: string;\n  mastered: boolean;\n  masteryLevel: number; // Assuming 0-100\n}\n\ninterface BonsaiTreeProps {\n  skills: Skill[];\n  totalSkills: number; // Total skills possible, for overall growth context\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\ninterface Branch {\n  id: string;\n  start: Point;\n  end: Point;\n  control1: Point;\n  control2: Point;\n  thickness: number;\n  angle: number; // Overall angle, can be used for foliage orientation\n  level: number; // 0 for main branches from trunk, 1 for sub-branches, etc.\n  skillsInCategory: Skill[];\n  masteryRatio: number; // 0-1, for this branch/category\n  subBranches: Branch[];\n  foliagePads: FoliagePad[];\n}\n\ninterface FoliagePad {\n  id: string;\n  cx: number; // center x\n  cy: number; // center y\n  rx: number; // radius x (for oval shape)\n  ry: number; // radius y\n  rotation: number;\n  color: string; // based on mastery\n  skillIds: string[]; // skills contributing to this pad\n}\n\nconst TRUNK_BASE_COLOR = '#8B5A2B'; // From your current simplified version\nconst TRUNK_HIGHLIGHT_COLOR = '#A07855';\nconst BRANCH_COLOR = '#8B5A2B';\nconst LEAF_MASTERED_COLOR = '#2E7D32'; // Darker green from image\nconst LEAF_IN_PROGRESS_COLOR = '#66BB6A'; // Lighter green from image\nconst POT_COLOR_MAIN = '#A08C7D'; // From your current simplified version\nconst POT_COLOR_RIM = '#B5A090'; // From your current simplified version\n\nconst BonsaiTree: React.FC<BonsaiTreeProps> = ({ skills, totalSkills }) => {\n  const theme = useTheme(); // Keep MUI theme if needed for other parts\n\n  const masteredSkillsCount = useMemo(() => {\n    return skills.filter(skill => skill.mastered).length;\n  }, [skills]);\n\n  const overallMasteryRatio = useMemo(() => {\n    return totalSkills > 0 ? masteredSkillsCount / totalSkills : 0;\n  }, [masteredSkillsCount, totalSkills]);\n\n  const skillsByCategory = useMemo(() => {\n    return skills.reduce((acc, skill) => {\n      if (!acc[skill.category]) {\n        acc[skill.category] = [];\n      }\n      acc[skill.category].push(skill);\n      return acc;\n    }, {} as Record<string, Skill[]>);\n  }, [skills]);\n\n  // Tree generation logic\n  const treeElements = useMemo(() => {\n    const categories = Object.keys(skillsByCategory);\n    const numCategories = categories.length;\n    if (numCategories === 0) return { trunkPath: '', branches: [], pot: { path1: '', path2: ''} };\n\n    const svgWidth = 300;\n    const svgHeight = 400;\n    const potHeight = 50;\n    const potWidth = 120;\n    const potBaseY = svgHeight - 20;\n\n    // Pot paths (similar to your image's pot)\n    const pot = {\n        path1: `M${svgWidth/2 - potWidth/2},${potBaseY} Q${svgWidth/2},${potBaseY + 25} ${svgWidth/2 + potWidth/2},${potBaseY} L${svgWidth/2 + potWidth/2 - 15},${potBaseY - potHeight + 15} Q${svgWidth/2},${potBaseY - potHeight + 5} ${svgWidth/2 - potWidth/2 + 15},${potBaseY - potHeight + 15} Z`,\n        path2: `M${svgWidth/2 - potWidth/2 + 10},${potBaseY - potHeight + 15} h${potWidth - 20} v${-10} h${-(potWidth-20)} Z`\n    };\n    \n    // Trunk\n    const trunkBaseWidth = clamp(20 + overallMasteryRatio * 20, 15, 40);\n    const trunkHeight = clamp(100 + overallMasteryRatio * 80, 80, 180);\n    const trunkTopY = potBaseY - potHeight;\n    const trunkStartX = svgWidth / 2;\n    \n    // A more organic trunk path using Bezier curve\n    const trunkPath = `\n      M ${trunkStartX - trunkBaseWidth / 2}, ${trunkTopY}\n      C ${trunkStartX - trunkBaseWidth * 0.8}, ${trunkTopY - trunkHeight * 0.3}\n        ${trunkStartX + trunkBaseWidth * 0.3}, ${trunkTopY - trunkHeight * 0.7}\n        ${trunkStartX}, ${trunkTopY - trunkHeight}\n      L ${trunkStartX + 5}, ${trunkTopY - trunkHeight + 5} \n      C ${trunkStartX + trunkBaseWidth * 0.2}, ${trunkTopY - trunkHeight * 0.65}\n        ${trunkStartX + trunkBaseWidth * 0.7}, ${trunkTopY - trunkHeight * 0.25}\n        ${trunkStartX + trunkBaseWidth / 2}, ${trunkTopY}\n      Z\n    `;\n    const trunkTopCenter: Point = { x: trunkStartX, y: trunkTopY - trunkHeight };\n\n    // Branch Generation\n    const generatedBranches: Branch[] = [];\n    const baseAngles = [-Math.PI / 2 - 0.7, -Math.PI / 2 + 0.7, -Math.PI / 2 + 0.1, -Math.PI / 2 - 0.2]; // Example for up to 4\n\n    categories.forEach((category, index) => {\n      if (index >= 4) return; // Limit main branches for now to match image style\n\n      const categorySkills = skillsByCategory[category];\n      const masteredInCategory = categorySkills.filter(s => s.mastered).length;\n      const categoryMasteryRatio = categorySkills.length > 0 ? masteredInCategory / categorySkills.length : 0;\n\n      const branchAngle = baseAngles[index % baseAngles.length] + randRange(-0.1, 0.1);\n      const branchLength = clamp(60 + categorySkills.length * 8, 50, 100) * (0.8 + categoryMasteryRatio * 0.4);\n      const branchThickness = clamp(8 + categoryMasteryRatio * 10, 6, 18);\n\n      const startPoint = { ...trunkTopCenter };\n      // Offset start point slightly along the trunk's curve for more natural branching\n      if (index > 0) { // Main top branch starts from trunk tip\n          startPoint.y += (index % 2 === 0 ? 10 : 20) * (index + 1);\n          startPoint.x += (index % 2 === 0 ? -5 : 5) * (index * 0.5);\n      }\n\n\n      const endPoint: Point = {\n        x: startPoint.x + Math.cos(branchAngle) * branchLength,\n        y: startPoint.y + Math.sin(branchAngle) * branchLength,\n      };\n\n      // Control points for Bezier curve branches\n      const cp1: Point = {\n        x: startPoint.x + Math.cos(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3,\n        y: startPoint.y + Math.sin(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3,\n      };\n      const cp2: Point = {\n        x: endPoint.x - Math.cos(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3,\n        y: endPoint.y - Math.sin(branchAngle + randRange(-0.3, 0.3)) * branchLength * 0.3,\n      };\n      \n      // Foliage Pad Generation\n      const foliagePads: FoliagePad[] = [];\n      const numPadsPerBranch = 1; // For simplicity, one main pad per branch like the image\n      for (let i = 0; i < numPadsPerBranch; i++) {\n          // Position pad towards the end of the branch\n          const padBaseX = lerp(cp2.x, endPoint.x, 0.7);\n          const padBaseY = lerp(cp2.y, endPoint.y, 0.7);\n          \n          const padRx = clamp(20 + categorySkills.length * 2 + categoryMasteryRatio * 15, 15, 40);\n          const padRy = clamp(15 + categorySkills.length * 1.5 + categoryMasteryRatio * 10, 10, 30);\n          \n          // Create multiple overlapping ellipses for a fuller pad\n          for (let j = 0; j < 3; j++) { // 3 ellipses per pad\n            const offsetX = randRange(-padRx * 0.3, padRx * 0.3);\n            const offsetY = randRange(-padRy * 0.3, padRy * 0.3);\n            foliagePads.push({\n                id: `pad-${category}-${index}-${i}-${j}`,\n                cx: padBaseX + offsetX,\n                cy: padBaseY + offsetY,\n                rx: padRx * randRange(0.8, 1.1),\n                ry: padRy * randRange(0.8, 1.1),\n                rotation: randRange(-15, 15),\n                color: categoryMasteryRatio > 0.7 ? LEAF_MASTERED_COLOR : \n                       (categoryMasteryRatio > 0.3 ? LEAF_IN_PROGRESS_COLOR : theme.palette.grey[600]), // Mix of green and grey for less progress\n                skillIds: categorySkills.map(s => s.id)\n            });\n          }\n      }\n\n      generatedBranches.push({\n        id: `branch-${category}-${index}`,\n        start: startPoint,\n        end: endPoint,\n        control1: cp1,\n        control2: cp2,\n        thickness: branchThickness,\n        angle: branchAngle,\n        level: 0,\n        skillsInCategory: categorySkills,\n        masteryRatio: categoryMasteryRatio,\n        subBranches: [], // Simplified: no deep sub-branches for this style\n        foliagePads: foliagePads,\n      });\n    });\n\n    return { trunkPath, branches: generatedBranches, pot };\n  }, [skillsByCategory, overallMasteryRatio, theme.palette.grey]);\n\n  // Animations using react-spring\n  const { opacity } = useSpring({ from: { opacity: 0 }, to: { opacity: 1 }, config: config.molasses });\n  const trunkAnimProps = useSpring({\n    from: { strokeDashoffset: 1000 },\n    to: { strokeDashoffset: 0 },\n    config: { duration: 1500, ...config.slow },\n  });\n   const branchAnimProps = useSpring({\n    from: { strokeDashoffset: 1000 },\n    to: { strokeDashoffset: 0 },\n    config: { duration: 1200, delay: 800, ...config.slow },\n  });\n  const foliageAnimProps = useSpring({\n    from: { transform: 'scale(0.5)', opacity: 0 },\n    to: { transform: 'scale(1)', opacity: 1 },\n    config: { delay: 1500, ...config.wobbly },\n  });\n\n\n  return (\n    <animated.div style={{ opacity }}>\n      <Paper elevation={0} sx={{ p: 3, mb: 4, borderRadius: '20px', backgroundColor: '#f7f7f7' }}>\n        <Typography variant=\"h5\" gutterBottom align=\"center\" sx={{ fontWeight: 'bold', color: '#555' }}>\n          Your Growth Tree\n        </Typography>\n        \n        <Box sx={{ width: '100%', height: 350, position: 'relative', mt: 2 }}>\n          <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 300 400\" style={{ overflow: 'visible' }}>\n            <defs>\n                <linearGradient id=\"trunkGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"0%\" stopColor={TRUNK_HIGHLIGHT_COLOR} />\n                    <stop offset=\"50%\" stopColor={TRUNK_BASE_COLOR} />\n                    <stop offset=\"100%\" stopColor={TRUNK_HIGHLIGHT_COLOR} />\n                </linearGradient>\n            </defs>\n\n            {/* Pot */}\n            <path d={treeElements.pot.path1} fill={POT_COLOR_MAIN} />\n            <path d={treeElements.pot.path2} fill={POT_COLOR_RIM} />\n\n            {/* Trunk */}\n            <animated.path\n              d={treeElements.trunkPath}\n              fill=\"url(#trunkGradient)\"\n              stroke={TRUNK_BASE_COLOR}\n              strokeWidth=\"1\"\n              style={trunkAnimProps}\n              strokeDasharray=\"1000\"\n            />\n            \n            {/* Branches and Foliage */}\n            {treeElements.branches.map((branch) => (\n              <g key={branch.id}>\n                <animated.path\n                  d={`M ${branch.start.x} ${branch.start.y} C ${branch.control1.x} ${branch.control1.y}, ${branch.control2.x} ${branch.control2.y}, ${branch.end.x} ${branch.end.y}`}\n                  stroke={BRANCH_COLOR}\n                  strokeWidth={branch.thickness}\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  style={branchAnimProps}\n                  strokeDasharray=\"1000\"\n                />\n                {branch.foliagePads.map((pad) => (\n                  <animated.ellipse\n                    key={pad.id}\n                    cx={pad.cx}\n                    cy={pad.cy}\n                    rx={pad.rx}\n                    ry={pad.ry}\n                    fill={pad.color}\n                    opacity={0.85} // Slight transparency for overlapping effect\n                    transform={`rotate(${pad.rotation}, ${pad.cx}, ${pad.cy})`}\n                    style={foliageAnimProps}\n                  >\n                    <title>{branch.skillsInCategory.map(s => s.name).join(', ')}</title>\n                  </animated.ellipse>\n                ))}\n              </g>\n            ))}\n          </svg>\n        </Box>\n        <Typography variant=\"body1\" align=\"center\" sx={{ mt: 3, color: '#666' }}>\n          You've mastered {masteredSkillsCount} skills so far! Keep growing!\n        </Typography>\n      </Paper>\n    </animated.div>\n  );\n};\n\nexport default BonsaiTree;\n\n "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAgB,OAAO;AAC9C,SAASC,GAAG,EAAEC,UAAU,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAChE,SAASC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,cAAc;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAGA,CAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS,KAAaF,CAAC,IAAI,CAAC,GAAGE,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC;AAC7E,MAAMC,KAAK,GAAGA,CAACC,GAAW,EAAEC,GAAW,EAAEC,GAAW,KAAaC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACF,GAAG,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC;AAClG,MAAME,SAAS,GAAGA,CAACH,GAAW,EAAEC,GAAW,KAAaC,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG;AA8CzF,MAAMK,gBAAgB,GAAG,SAAS,CAAC,CAAC;AACpC,MAAMC,qBAAqB,GAAG,SAAS;AACvC,MAAMC,YAAY,GAAG,SAAS;AAC9B,MAAMC,mBAAmB,GAAG,SAAS,CAAC,CAAC;AACvC,MAAMC,sBAAsB,GAAG,SAAS,CAAC,CAAC;AAC1C,MAAMC,cAAc,GAAG,SAAS,CAAC,CAAC;AAClC,MAAMC,aAAa,GAAG,SAAS,CAAC,CAAC;;AAEjC,MAAMC,UAAqC,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAMC,KAAK,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1B,MAAM6B,mBAAmB,GAAGjC,OAAO,CAAC,MAAM;IACxC,OAAO6B,MAAM,CAACK,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC,CAACC,MAAM;EACtD,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,MAAMS,mBAAmB,GAAGtC,OAAO,CAAC,MAAM;IACxC,OAAO8B,WAAW,GAAG,CAAC,GAAGG,mBAAmB,GAAGH,WAAW,GAAG,CAAC;EAChE,CAAC,EAAE,CAACG,mBAAmB,EAAEH,WAAW,CAAC,CAAC;EAEtC,MAAMS,gBAAgB,GAAGvC,OAAO,CAAC,MAAM;IACrC,OAAO6B,MAAM,CAACW,MAAM,CAAC,CAACC,GAAG,EAAEN,KAAK,KAAK;MACnC,IAAI,CAACM,GAAG,CAACN,KAAK,CAACO,QAAQ,CAAC,EAAE;QACxBD,GAAG,CAACN,KAAK,CAACO,QAAQ,CAAC,GAAG,EAAE;MAC1B;MACAD,GAAG,CAACN,KAAK,CAACO,QAAQ,CAAC,CAACC,IAAI,CAACR,KAAK,CAAC;MAC/B,OAAOM,GAAG;IACZ,CAAC,EAAE,CAAC,CAA4B,CAAC;EACnC,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMe,YAAY,GAAG5C,OAAO,CAAC,MAAM;IACjC,MAAM6C,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACR,gBAAgB,CAAC;IAChD,MAAMS,aAAa,GAAGH,UAAU,CAACR,MAAM;IACvC,IAAIW,aAAa,KAAK,CAAC,EAAE,OAAO;MAAEC,SAAS,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,GAAG,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAE;IAAE,CAAC;IAE7F,MAAMC,QAAQ,GAAG,GAAG;IACpB,MAAMC,SAAS,GAAG,GAAG;IACrB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,QAAQ,GAAG,GAAG;IACpB,MAAMC,QAAQ,GAAGH,SAAS,GAAG,EAAE;;IAE/B;IACA,MAAMJ,GAAG,GAAG;MACRC,KAAK,EAAE,IAAIE,QAAQ,GAAC,CAAC,GAAGG,QAAQ,GAAC,CAAC,IAAIC,QAAQ,KAAKJ,QAAQ,GAAC,CAAC,IAAII,QAAQ,GAAG,EAAE,IAAIJ,QAAQ,GAAC,CAAC,GAAGG,QAAQ,GAAC,CAAC,IAAIC,QAAQ,KAAKJ,QAAQ,GAAC,CAAC,GAAGG,QAAQ,GAAC,CAAC,GAAG,EAAE,IAAIC,QAAQ,GAAGF,SAAS,GAAG,EAAE,KAAKF,QAAQ,GAAC,CAAC,IAAII,QAAQ,GAAGF,SAAS,GAAG,CAAC,IAAIF,QAAQ,GAAC,CAAC,GAAGG,QAAQ,GAAC,CAAC,GAAG,EAAE,IAAIC,QAAQ,GAAGF,SAAS,GAAG,EAAE,IAAI;MAC/RH,KAAK,EAAE,IAAIC,QAAQ,GAAC,CAAC,GAAGG,QAAQ,GAAC,CAAC,GAAG,EAAE,IAAIC,QAAQ,GAAGF,SAAS,GAAG,EAAE,KAAKC,QAAQ,GAAG,EAAE,KAAK,CAAC,EAAE,KAAK,EAAEA,QAAQ,GAAC,EAAE,CAAC;IACrH,CAAC;;IAED;IACA,MAAME,cAAc,GAAG7C,KAAK,CAAC,EAAE,GAAGwB,mBAAmB,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACnE,MAAMsB,WAAW,GAAG9C,KAAK,CAAC,GAAG,GAAGwB,mBAAmB,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAClE,MAAMuB,SAAS,GAAGH,QAAQ,GAAGF,SAAS;IACtC,MAAMM,WAAW,GAAGR,QAAQ,GAAG,CAAC;;IAEhC;IACA,MAAML,SAAS,GAAG;AACtB,UAAUa,WAAW,GAAGH,cAAc,GAAG,CAAC,KAAKE,SAAS;AACxD,UAAUC,WAAW,GAAGH,cAAc,GAAG,GAAG,KAAKE,SAAS,GAAGD,WAAW,GAAG,GAAG;AAC9E,UAAUE,WAAW,GAAGH,cAAc,GAAG,GAAG,KAAKE,SAAS,GAAGD,WAAW,GAAG,GAAG;AAC9E,UAAUE,WAAW,KAAKD,SAAS,GAAGD,WAAW;AACjD,UAAUE,WAAW,GAAG,CAAC,KAAKD,SAAS,GAAGD,WAAW,GAAG,CAAC;AACzD,UAAUE,WAAW,GAAGH,cAAc,GAAG,GAAG,KAAKE,SAAS,GAAGD,WAAW,GAAG,IAAI;AAC/E,UAAUE,WAAW,GAAGH,cAAc,GAAG,GAAG,KAAKE,SAAS,GAAGD,WAAW,GAAG,IAAI;AAC/E,UAAUE,WAAW,GAAGH,cAAc,GAAG,CAAC,KAAKE,SAAS;AACxD;AACA,KAAK;IACD,MAAME,cAAqB,GAAG;MAAEC,CAAC,EAAEF,WAAW;MAAEG,CAAC,EAAEJ,SAAS,GAAGD;IAAY,CAAC;;IAE5E;IACA,MAAMM,iBAA2B,GAAG,EAAE;IACtC,MAAMC,UAAU,GAAG,CAAC,CAACjD,IAAI,CAACkD,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAClD,IAAI,CAACkD,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAClD,IAAI,CAACkD,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAClD,IAAI,CAACkD,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;;IAErGvB,UAAU,CAACwB,OAAO,CAAC,CAAC3B,QAAQ,EAAE4B,KAAK,KAAK;MACtC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,CAAC;;MAExB,MAAMC,cAAc,GAAGhC,gBAAgB,CAACG,QAAQ,CAAC;MACjD,MAAM8B,kBAAkB,GAAGD,cAAc,CAACrC,MAAM,CAACuC,CAAC,IAAIA,CAAC,CAACrC,QAAQ,CAAC,CAACC,MAAM;MACxE,MAAMqC,oBAAoB,GAAGH,cAAc,CAAClC,MAAM,GAAG,CAAC,GAAGmC,kBAAkB,GAAGD,cAAc,CAAClC,MAAM,GAAG,CAAC;MAEvG,MAAMsC,WAAW,GAAGR,UAAU,CAACG,KAAK,GAAGH,UAAU,CAAC9B,MAAM,CAAC,GAAGlB,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;MAChF,MAAMyD,YAAY,GAAG9D,KAAK,CAAC,EAAE,GAAGyD,cAAc,CAAClC,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,IAAI,GAAG,GAAGqC,oBAAoB,GAAG,GAAG,CAAC;MACxG,MAAMG,eAAe,GAAG/D,KAAK,CAAC,CAAC,GAAG4D,oBAAoB,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;MAEnE,MAAMI,UAAU,GAAG;QAAE,GAAGf;MAAe,CAAC;MACxC;MACA,IAAIO,KAAK,GAAG,CAAC,EAAE;QAAE;QACbQ,UAAU,CAACb,CAAC,IAAI,CAACK,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,KAAKA,KAAK,GAAG,CAAC,CAAC;QACzDQ,UAAU,CAACd,CAAC,IAAI,CAACM,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAKA,KAAK,GAAG,GAAG,CAAC;MAC9D;MAGA,MAAMS,QAAe,GAAG;QACtBf,CAAC,EAAEc,UAAU,CAACd,CAAC,GAAG9C,IAAI,CAAC8D,GAAG,CAACL,WAAW,CAAC,GAAGC,YAAY;QACtDX,CAAC,EAAEa,UAAU,CAACb,CAAC,GAAG/C,IAAI,CAAC+D,GAAG,CAACN,WAAW,CAAC,GAAGC;MAC5C,CAAC;;MAED;MACA,MAAMM,GAAU,GAAG;QACjBlB,CAAC,EAAEc,UAAU,CAACd,CAAC,GAAG9C,IAAI,CAAC8D,GAAG,CAACL,WAAW,GAAGxD,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAGyD,YAAY,GAAG,GAAG;QACnFX,CAAC,EAAEa,UAAU,CAACb,CAAC,GAAG/C,IAAI,CAAC+D,GAAG,CAACN,WAAW,GAAGxD,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAGyD,YAAY,GAAG;MAClF,CAAC;MACD,MAAMO,GAAU,GAAG;QACjBnB,CAAC,EAAEe,QAAQ,CAACf,CAAC,GAAG9C,IAAI,CAAC8D,GAAG,CAACL,WAAW,GAAGxD,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAGyD,YAAY,GAAG,GAAG;QACjFX,CAAC,EAAEc,QAAQ,CAACd,CAAC,GAAG/C,IAAI,CAAC+D,GAAG,CAACN,WAAW,GAAGxD,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAGyD,YAAY,GAAG;MAChF,CAAC;;MAED;MACA,MAAMQ,WAAyB,GAAG,EAAE;MACpC,MAAMC,gBAAgB,GAAG,CAAC,CAAC,CAAC;MAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,gBAAgB,EAAEC,CAAC,EAAE,EAAE;QACvC;QACA,MAAMC,QAAQ,GAAG7E,IAAI,CAACyE,GAAG,CAACnB,CAAC,EAAEe,QAAQ,CAACf,CAAC,EAAE,GAAG,CAAC;QAC7C,MAAMwB,QAAQ,GAAG9E,IAAI,CAACyE,GAAG,CAAClB,CAAC,EAAEc,QAAQ,CAACd,CAAC,EAAE,GAAG,CAAC;QAE7C,MAAMwB,KAAK,GAAG3E,KAAK,CAAC,EAAE,GAAGyD,cAAc,CAAClC,MAAM,GAAG,CAAC,GAAGqC,oBAAoB,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QACvF,MAAMgB,KAAK,GAAG5E,KAAK,CAAC,EAAE,GAAGyD,cAAc,CAAClC,MAAM,GAAG,GAAG,GAAGqC,oBAAoB,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;QAEzF;QACA,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAAE;UAC5B,MAAMC,OAAO,GAAGzE,SAAS,CAAC,CAACsE,KAAK,GAAG,GAAG,EAAEA,KAAK,GAAG,GAAG,CAAC;UACpD,MAAMI,OAAO,GAAG1E,SAAS,CAAC,CAACuE,KAAK,GAAG,GAAG,EAAEA,KAAK,GAAG,GAAG,CAAC;UACpDN,WAAW,CAACzC,IAAI,CAAC;YACbmD,EAAE,EAAE,OAAOpD,QAAQ,IAAI4B,KAAK,IAAIgB,CAAC,IAAIK,CAAC,EAAE;YACxCI,EAAE,EAAER,QAAQ,GAAGK,OAAO;YACtBI,EAAE,EAAER,QAAQ,GAAGK,OAAO;YACtBI,EAAE,EAAER,KAAK,GAAGtE,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC;YAC/B+E,EAAE,EAAER,KAAK,GAAGvE,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC;YAC/BgF,QAAQ,EAAEhF,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;YAC5BiF,KAAK,EAAE1B,oBAAoB,GAAG,GAAG,GAAGlD,mBAAmB,GAC/CkD,oBAAoB,GAAG,GAAG,GAAGjD,sBAAsB,GAAGO,KAAK,CAACqE,OAAO,CAACC,IAAI,CAAC,GAAG,CAAE;YAAE;YACxFC,QAAQ,EAAEhC,cAAc,CAACiC,GAAG,CAAC/B,CAAC,IAAIA,CAAC,CAACqB,EAAE;UAC1C,CAAC,CAAC;QACJ;MACJ;MAEA5B,iBAAiB,CAACvB,IAAI,CAAC;QACrBmD,EAAE,EAAE,UAAUpD,QAAQ,IAAI4B,KAAK,EAAE;QACjCmC,KAAK,EAAE3B,UAAU;QACjB4B,GAAG,EAAE3B,QAAQ;QACb4B,QAAQ,EAAEzB,GAAG;QACb0B,QAAQ,EAAEzB,GAAG;QACb0B,SAAS,EAAEhC,eAAe;QAC1BiC,KAAK,EAAEnC,WAAW;QAClBoC,KAAK,EAAE,CAAC;QACRC,gBAAgB,EAAEzC,cAAc;QAChC0C,YAAY,EAAEvC,oBAAoB;QAClCwC,WAAW,EAAE,EAAE;QAAE;QACjB9B,WAAW,EAAEA;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO;MAAEnC,SAAS;MAAEC,QAAQ,EAAEgB,iBAAiB;MAAEf;IAAI,CAAC;EACxD,CAAC,EAAE,CAACZ,gBAAgB,EAAED,mBAAmB,EAAEN,KAAK,CAACqE,OAAO,CAACC,IAAI,CAAC,CAAC;;EAE/D;EACA,MAAM;IAAEa;EAAQ,CAAC,GAAG9G,SAAS,CAAC;IAAE+G,IAAI,EAAE;MAAED,OAAO,EAAE;IAAE,CAAC;IAAEE,EAAE,EAAE;MAAEF,OAAO,EAAE;IAAE,CAAC;IAAE5G,MAAM,EAAEA,MAAM,CAAC+G;EAAS,CAAC,CAAC;EACpG,MAAMC,cAAc,GAAGlH,SAAS,CAAC;IAC/B+G,IAAI,EAAE;MAAEI,gBAAgB,EAAE;IAAK,CAAC;IAChCH,EAAE,EAAE;MAAEG,gBAAgB,EAAE;IAAE,CAAC;IAC3BjH,MAAM,EAAE;MAAEkH,QAAQ,EAAE,IAAI;MAAE,GAAGlH,MAAM,CAACmH;IAAK;EAC3C,CAAC,CAAC;EACD,MAAMC,eAAe,GAAGtH,SAAS,CAAC;IACjC+G,IAAI,EAAE;MAAEI,gBAAgB,EAAE;IAAK,CAAC;IAChCH,EAAE,EAAE;MAAEG,gBAAgB,EAAE;IAAE,CAAC;IAC3BjH,MAAM,EAAE;MAAEkH,QAAQ,EAAE,IAAI;MAAEG,KAAK,EAAE,GAAG;MAAE,GAAGrH,MAAM,CAACmH;IAAK;EACvD,CAAC,CAAC;EACF,MAAMG,gBAAgB,GAAGxH,SAAS,CAAC;IACjC+G,IAAI,EAAE;MAAEU,SAAS,EAAE,YAAY;MAAEX,OAAO,EAAE;IAAE,CAAC;IAC7CE,EAAE,EAAE;MAAES,SAAS,EAAE,UAAU;MAAEX,OAAO,EAAE;IAAE,CAAC;IACzC5G,MAAM,EAAE;MAAEqH,KAAK,EAAE,IAAI;MAAE,GAAGrH,MAAM,CAACwH;IAAO;EAC1C,CAAC,CAAC;EAGF,oBACEtH,OAAA,CAACH,QAAQ,CAAC0H,GAAG;IAACC,KAAK,EAAE;MAAEd;IAAQ,CAAE;IAAAe,QAAA,eAC/BzH,OAAA,CAACN,KAAK;MAACgI,SAAS,EAAE,CAAE;MAACC,EAAE,EAAE;QAAEC,CAAC,EAAE,CAAC;QAAEC,EAAE,EAAE,CAAC;QAAEC,YAAY,EAAE,MAAM;QAAEC,eAAe,EAAE;MAAU,CAAE;MAAAN,QAAA,gBACzFzH,OAAA,CAACP,UAAU;QAACuI,OAAO,EAAC,IAAI;QAACC,YAAY;QAACC,KAAK,EAAC,QAAQ;QAACP,EAAE,EAAE;UAAEQ,UAAU,EAAE,MAAM;UAAExC,KAAK,EAAE;QAAO,CAAE;QAAA8B,QAAA,EAAC;MAEhG;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAEbvI,OAAA,CAACR,GAAG;QAACmI,EAAE,EAAE;UAAEa,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE,GAAG;UAAEC,QAAQ,EAAE,UAAU;UAAEC,EAAE,EAAE;QAAE,CAAE;QAAAlB,QAAA,eACnEzH,OAAA;UAAKwI,KAAK,EAAC,MAAM;UAACC,MAAM,EAAC,MAAM;UAACG,OAAO,EAAC,aAAa;UAACpB,KAAK,EAAE;YAAEqB,QAAQ,EAAE;UAAU,CAAE;UAAApB,QAAA,gBACnFzH,OAAA;YAAAyH,QAAA,eACIzH,OAAA;cAAgBqF,EAAE,EAAC,eAAe;cAACyD,EAAE,EAAC,IAAI;cAACC,EAAE,EAAC,IAAI;cAACC,EAAE,EAAC,MAAM;cAACC,EAAE,EAAC,IAAI;cAAAxB,QAAA,gBAChEzH,OAAA;gBAAMkJ,MAAM,EAAC,IAAI;gBAACC,SAAS,EAAEtI;cAAsB;gBAAAuH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eACtDvI,OAAA;gBAAMkJ,MAAM,EAAC,KAAK;gBAACC,SAAS,EAAEvI;cAAiB;gBAAAwH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAClDvI,OAAA;gBAAMkJ,MAAM,EAAC,MAAM;gBAACC,SAAS,EAAEtI;cAAsB;gBAAAuH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC,eAGPvI,OAAA;YAAMoJ,CAAC,EAAEjH,YAAY,CAACO,GAAG,CAACC,KAAM;YAAC0G,IAAI,EAAEpI;UAAe;YAAAmH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACzDvI,OAAA;YAAMoJ,CAAC,EAAEjH,YAAY,CAACO,GAAG,CAACE,KAAM;YAACyG,IAAI,EAAEnI;UAAc;YAAAkH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAGxDvI,OAAA,CAACH,QAAQ,CAACyJ,IAAI;YACZF,CAAC,EAAEjH,YAAY,CAACK,SAAU;YAC1B6G,IAAI,EAAC,qBAAqB;YAC1BE,MAAM,EAAE3I,gBAAiB;YACzB4I,WAAW,EAAC,GAAG;YACfhC,KAAK,EAAEV,cAAe;YACtB2C,eAAe,EAAC;UAAM;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC,EAGDpG,YAAY,CAACM,QAAQ,CAACsD,GAAG,CAAE2D,MAAM,iBAChC1J,OAAA;YAAAyH,QAAA,gBACEzH,OAAA,CAACH,QAAQ,CAACyJ,IAAI;cACZF,CAAC,EAAE,KAAKM,MAAM,CAAC1D,KAAK,CAACzC,CAAC,IAAImG,MAAM,CAAC1D,KAAK,CAACxC,CAAC,MAAMkG,MAAM,CAACxD,QAAQ,CAAC3C,CAAC,IAAImG,MAAM,CAACxD,QAAQ,CAAC1C,CAAC,KAAKkG,MAAM,CAACvD,QAAQ,CAAC5C,CAAC,IAAImG,MAAM,CAACvD,QAAQ,CAAC3C,CAAC,KAAKkG,MAAM,CAACzD,GAAG,CAAC1C,CAAC,IAAImG,MAAM,CAACzD,GAAG,CAACzC,CAAC,EAAG;cACnK+F,MAAM,EAAEzI,YAAa;cACrB0I,WAAW,EAAEE,MAAM,CAACtD,SAAU;cAC9BiD,IAAI,EAAC,MAAM;cACXM,aAAa,EAAC,OAAO;cACrBnC,KAAK,EAAEN,eAAgB;cACvBuC,eAAe,EAAC;YAAM;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvB,CAAC,EACDmB,MAAM,CAAC/E,WAAW,CAACoB,GAAG,CAAE6D,GAAG,iBAC1B5J,OAAA,CAACH,QAAQ,CAACgK,OAAO;cAEfvE,EAAE,EAAEsE,GAAG,CAACtE,EAAG;cACXC,EAAE,EAAEqE,GAAG,CAACrE,EAAG;cACXC,EAAE,EAAEoE,GAAG,CAACpE,EAAG;cACXC,EAAE,EAAEmE,GAAG,CAACnE,EAAG;cACX4D,IAAI,EAAEO,GAAG,CAACjE,KAAM;cAChBe,OAAO,EAAE,IAAK,CAAC;cAAA;cACfW,SAAS,EAAE,UAAUuC,GAAG,CAAClE,QAAQ,KAAKkE,GAAG,CAACtE,EAAE,KAAKsE,GAAG,CAACrE,EAAE,GAAI;cAC3DiC,KAAK,EAAEJ,gBAAiB;cAAAK,QAAA,eAExBzH,OAAA;gBAAAyH,QAAA,EAAQiC,MAAM,CAACnD,gBAAgB,CAACR,GAAG,CAAC/B,CAAC,IAAIA,CAAC,CAAC8F,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI;cAAC;gBAAA3B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC,GAV/DqB,GAAG,CAACvE,EAAE;cAAA+C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAWK,CACnB,CAAC;UAAA,GAxBImB,MAAM,CAACrE,EAAE;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAyBd,CACJ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNvI,OAAA,CAACP,UAAU;QAACuI,OAAO,EAAC,OAAO;QAACE,KAAK,EAAC,QAAQ;QAACP,EAAE,EAAE;UAAEgB,EAAE,EAAE,CAAC;UAAEhD,KAAK,EAAE;QAAO,CAAE;QAAA8B,QAAA,GAAC,kBACvD,EAACjG,mBAAmB,EAAC,+BACvC;MAAA;QAAA4G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEnB,CAAC;AAACjH,EAAA,CAxOIH,UAAqC;EAAA,QAC3BxB,QAAQ,EAiJFC,SAAS,EACNA,SAAS,EAKPA,SAAS,EAKTA,SAAS;AAAA;AAAAoK,EAAA,GA7J9B7I,UAAqC;AA0O3C,eAAeA,UAAU;AAAC,IAAA6I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}