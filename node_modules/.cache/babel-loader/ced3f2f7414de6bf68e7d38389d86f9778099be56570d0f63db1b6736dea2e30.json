{"ast":null,"code":"import _objectSpread from\"/Users/gerardo/Downloads/Bonsaito/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useCallback,useEffect}from'react';import{useNavigate}from'react-router-dom';import{Box,Button,Container,Typography,Paper,AppBar,Toolbar,IconButton,CircularProgress,Alert,Tabs,Tab,TextField,Card,CardContent,Divider,Chip,Stepper,Step,StepLabel,useTheme,useMediaQuery,Accordion,AccordionSummary,AccordionDetails,RadioGroup,Radio,FormControlLabel,Fade,Badge,Tooltip}from'@mui/material';import MenuIcon from'@mui/icons-material/Menu';import CloudUploadIcon from'@mui/icons-material/CloudUpload';import TextFieldsIcon from'@mui/icons-material/TextFields';import SchoolIcon from'@mui/icons-material/School';import ExpandMoreIcon from'@mui/icons-material/ExpandMore';import CheckCircleIcon from'@mui/icons-material/CheckCircle';import CancelIcon from'@mui/icons-material/Cancel';import LocalFloristIcon from'@mui/icons-material/LocalFlorist';import EmojiNatureIcon from'@mui/icons-material/EmojiNature';import{useDropzone}from'react-dropzone';import{uploadFileToSupabase,ocrPdfFromSupabase}from'../services/ocrService';import{generateQuestionsFromMistakes}from'../services/aiService';import{supabase}from'../supabaseClient';import{useSkills}from'../components/SkillsProvider';// Define an interface for user answers\n// Interface for tracking which skills are improved by which questions\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";// Function to simulate processing delay\nconst addProcessingDelay=ms=>new Promise(resolve=>setTimeout(resolve,ms));const UploadReport=()=>{const theme=useTheme();const isMobile=useMediaQuery(theme.breakpoints.down('sm'));const navigate=useNavigate();const{skills,updateSkillProgress}=useSkills();const[drawerOpen,setDrawerOpen]=useState(false);const[uploadedFile,setUploadedFile]=useState(null);const[extractedText,setExtractedText]=useState(null);const[generatedQuestions,setGeneratedQuestions]=useState([]);const[isLoading,setIsLoading]=useState(false);const[loadingMessage,setLoadingMessage]=useState('');const[error,setError]=useState(null);const[inputMethod,setInputMethod]=useState('file');// 'file' or 'text'\nconst[pastedText,setPastedText]=useState('');const[activeStep,setActiveStep]=useState(0);const[apiKeyMissing,setApiKeyMissing]=useState(!process.env.REACT_APP_GEMINI_API_KEY);// New state for tracking student answers and showing explanations\nconst[studentAnswers,setStudentAnswers]=useState({});const[showExplanations,setShowExplanations]=useState({});const[correctAnswers,setCorrectAnswers]=useState([]);const[questionSkillMap,setQuestionSkillMap]=useState({});const[showTreeGrowthBadge,setShowTreeGrowthBadge]=useState(false);const[treeBadgeCount,setTreeBadgeCount]=useState(0);// Group questions by topic for better organization\nconst questionsByTopic=React.useMemo(()=>{const grouped={};generatedQuestions.forEach(q=>{if(!grouped[q.topic]){grouped[q.topic]=[];}grouped[q.topic].push(q);});return grouped;},[generatedQuestions]);// Maps generated questions to skills\nconst mapQuestionsToSkills=useCallback(questions=>{// Create a mapping between question topics and skill categories\nconst topicToCategory={'Grammar':'Standard English Conventions','Punctuation':'Standard English Conventions','Sentence Structure':'Standard English Conventions','Evidence':'Expression of Ideas','Organization':'Expression of Ideas','Vocabulary':'Expression of Ideas','Algebra':'Math','Geometry':'Math','Data Analysis':'Math'};// Generate a mapping between question IDs and skill IDs\nconst mapping={};questions.forEach(question=>{// Find matching skills from the skills context\nconst category=topicToCategory[question.topic]||question.topic;// Find skills that match this category\nconst matchingSkills=skills.filter(s=>s.category===category||s.subcategory===question.topic||s.name.toLowerCase().includes(question.topic.toLowerCase()));if(matchingSkills.length>0){// Pick a skill to associate with this question (preferably one that's not mastered yet)\nconst notYetMastered=matchingSkills.filter(s=>!s.mastered);const skillToUse=notYetMastered.length>0?notYetMastered[Math.floor(Math.random()*notYetMastered.length)]:matchingSkills[Math.floor(Math.random()*matchingSkills.length)];mapping[question.id]=skillToUse.id;}});setQuestionSkillMap(mapping);},[skills]);// Effect to map questions to skills when questions are generated\nuseEffect(()=>{if(generatedQuestions.length>0){mapQuestionsToSkills(generatedQuestions);}},[generatedQuestions,mapQuestionsToSkills]);const handleDrawerToggle=()=>{setDrawerOpen(!drawerOpen);};const onDrop=useCallback(async acceptedFiles=>{if(acceptedFiles&&acceptedFiles.length>0){const file=acceptedFiles[0];const validFileTypes=['application/pdf','text/plain'];if(!validFileTypes.includes(file.type)){setError('Invalid file type. Please upload a PDF or TXT file.');setUploadedFile(null);return;}setUploadedFile(file);setError(null);setExtractedText(null);setGeneratedQuestions([]);setIsLoading(true);setActiveStep(1);try{const{data:{session}}=await supabase.auth.getSession();if(!session){setError('No active session. Please log in again.');setIsLoading(false);return;}// Handle differently based on file type\nif(file.type==='text/plain'){// For text files, read the content directly\nsetLoadingMessage('Reading text file content...');const text=await file.text();// Add realistic processing delay\nawait addProcessingDelay(2500);setExtractedText(text);setActiveStep(2);setLoadingMessage('Analyzing report and generating personalized questions...');// Add realistic processing delay before question generation\nawait addProcessingDelay(3500);const questions=await generateQuestionsFromMistakes(text);setGeneratedQuestions(questions);setActiveStep(3);}else{// PDF processing flow\nsetLoadingMessage('Uploading PDF to secure storage...');const{storagePath,publicUrl}=await uploadFileToSupabase(file,'score-reports',{publicAccess:false});console.log('File uploaded:',{storagePath,publicUrl});// Add realistic processing delay\nawait addProcessingDelay(2000);setLoadingMessage('Extracting text from PDF (OCR process)... This may take a moment.');const text=await ocrPdfFromSupabase(publicUrl,storagePath);setExtractedText(text);setActiveStep(2);console.log('Text extracted:',text.substring(0,100)+'...');setLoadingMessage('Analyzing your report and building personalized questions...');// Add realistic processing delay for question generation\nawait addProcessingDelay(4500);const questions=await generateQuestionsFromMistakes(text);setGeneratedQuestions(questions);setActiveStep(3);}}catch(err){console.error(\"Error processing file:\",err);setError(\"Failed to process the file: \".concat(err.message||'Unknown error',\". Check console for details.\"));}finally{setIsLoading(false);setLoadingMessage('');}}},[]);const handleTextSubmit=async()=>{if(!pastedText.trim()){setError('Please paste some text before submitting.');return;}setError(null);setExtractedText(null);setGeneratedQuestions([]);setIsLoading(true);setActiveStep(1);try{const{data:{session}}=await supabase.auth.getSession();if(!session){setError('No active session. Please log in again.');setIsLoading(false);return;}// Process the pasted text with realistic delays\nsetLoadingMessage('Processing your text input...');await addProcessingDelay(1800);setExtractedText(pastedText);setActiveStep(2);setLoadingMessage('Analyzing report data and creating personalized questions...');// Add realistic processing delay\nawait addProcessingDelay(3800);const questions=await generateQuestionsFromMistakes(pastedText);setGeneratedQuestions(questions);setActiveStep(3);}catch(err){console.error(\"Error processing text:\",err);setError(\"Failed to process text: \".concat(err.message||'Unknown error',\". Check console for details.\"));}finally{setIsLoading(false);setLoadingMessage('');}};const{getRootProps,getInputProps,isDragActive}=useDropzone({onDrop,accept:{'application/pdf':['.pdf'],'text/plain':['.txt']},multiple:false,disabled:isLoading||inputMethod==='text'});const handleInputMethodChange=(_event,newValue)=>{setInputMethod(newValue);// Reset state when changing methods\nsetError(null);setUploadedFile(null);setPastedText('');setExtractedText(null);setGeneratedQuestions([]);setActiveStep(0);};// Function to determine difficulty level color\nconst getDifficultyColor=difficulty=>{switch(difficulty===null||difficulty===void 0?void 0:difficulty.toLowerCase()){case'easy':return theme.palette.success.main;case'medium':return theme.palette.warning.main;case'hard':return theme.palette.error.main;default:return theme.palette.info.main;}};// Handle student answer selection\nconst handleAnswerSelect=(questionId,answer)=>{setStudentAnswers(prev=>_objectSpread(_objectSpread({},prev),{},{[questionId]:answer}));};// Check if an answer is correct and reveal explanation\nconst checkAnswer=questionId=>{setShowExplanations(prev=>_objectSpread(_objectSpread({},prev),{},{[questionId]:true}));const question=generatedQuestions.find(q=>q.id===questionId);if(question&&isAnswerCorrect(question,studentAnswers[questionId])){// If correct and not already in correctAnswers, add it\nif(!correctAnswers.includes(questionId)){setCorrectAnswers(prev=>[...prev,questionId]);// Update the associated skill's progress\nconst skillId=questionSkillMap[questionId];if(skillId){// Find current skill to determine new progress level\nconst skill=skills.find(s=>s.id===skillId);if(skill){// Increase skill mastery level by 15-25% for each correct answer\nconst progressIncrease=Math.floor(Math.random()*11)+15;// 15-25\nconst newProgress=Math.min(100,skill.masteryLevel+progressIncrease);// Ensure we call updateSkillProgress with the correct parameters\nupdateSkillProgress(skillId,newProgress);console.log(\"Skill \".concat(skillId,\" updated: \").concat(skill.masteryLevel,\" -> \").concat(newProgress));// Show growth badge and increment counter\nsetShowTreeGrowthBadge(true);setTreeBadgeCount(prev=>prev+1);// Hide badge after a few seconds\nsetTimeout(()=>{setShowTreeGrowthBadge(false);},3000);}}}}};// Reset a question to try again\nconst resetQuestion=questionId=>{const newAnswers=_objectSpread({},studentAnswers);delete newAnswers[questionId];setStudentAnswers(newAnswers);setShowExplanations(prev=>_objectSpread(_objectSpread({},prev),{},{[questionId]:false}));// If it was a correct answer, remove it from correctAnswers\nif(correctAnswers.includes(questionId)){setCorrectAnswers(prev=>prev.filter(id=>id!==questionId));}};// Function to determine if a student's answer is correct\nconst isAnswerCorrect=(question,studentAnswer)=>{return studentAnswer===question.answer;};// Handle navigate to dashboard to see tree growth\nconst handleViewTreeGrowth=()=>{navigate('/dashboard',{state:{fromUpload:true,correctAnswers:correctAnswers.length}});};return/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexDirection:'column',minHeight:'100vh',bgcolor:'#f8f9fa'},children:[/*#__PURE__*/_jsx(AppBar,{position:\"static\",children:/*#__PURE__*/_jsxs(Toolbar,{children:[/*#__PURE__*/_jsx(IconButton,{color:\"inherit\",\"aria-label\":\"open drawer\",edge:\"start\",onClick:handleDrawerToggle,sx:{mr:2},children:/*#__PURE__*/_jsx(MenuIcon,{})}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"div\",sx:{flexGrow:1},children:\"Upload Score Report\"}),correctAnswers.length>0&&/*#__PURE__*/_jsx(Tooltip,{title:\"Your bonsai tree is growing! Click to view\",children:/*#__PURE__*/_jsx(Badge,{badgeContent:treeBadgeCount,color:\"success\",sx:{mr:2,opacity:showTreeGrowthBadge?1:0.8,transition:'all 0.3s ease'},children:/*#__PURE__*/_jsx(IconButton,{color:\"inherit\",onClick:handleViewTreeGrowth,sx:{animation:showTreeGrowthBadge?'treeGrow 1s ease-in-out':'none','@keyframes treeGrow':{'0%':{transform:'scale(1)'},'50%':{transform:'scale(1.3)'},'100%':{transform:'scale(1)'}}},children:/*#__PURE__*/_jsx(EmojiNatureIcon,{})})})})]})}),/*#__PURE__*/_jsxs(Container,{maxWidth:\"md\",sx:{mt:4,mb:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,align:\"center\",sx:{fontWeight:'bold',color:theme.palette.primary.main},children:\"Upload Your SAT Practice Report\"}),/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",align:\"center\",color:\"text.secondary\",paragraph:true,children:\"Upload your report or paste text to get personalized lessons and practice questions\"}),apiKeyMissing&&/*#__PURE__*/_jsxs(Alert,{severity:\"warning\",sx:{mb:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",fontWeight:\"bold\",children:\"API Key Missing\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"The application is running in limited mode. Some advanced features may not be available. Please contact the administrator for full functionality.\"})]}),/*#__PURE__*/_jsxs(Stepper,{activeStep:activeStep,alternativeLabel:true,sx:{mb:4,display:{xs:'none',sm:'flex'}},children:[/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:\"Upload Report\"})}),/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:\"Process Content\"})}),/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:\"Extract Information\"})}),/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:\"Generate Questions\"})})]}),/*#__PURE__*/_jsx(Box,{sx:{width:'100%',mb:3},children:/*#__PURE__*/_jsxs(Tabs,{value:inputMethod,onChange:handleInputMethodChange,centered:true,indicatorColor:\"primary\",textColor:\"primary\",variant:isMobile?\"fullWidth\":\"standard\",children:[/*#__PURE__*/_jsx(Tab,{value:\"file\",label:\"Upload File\",icon:/*#__PURE__*/_jsx(CloudUploadIcon,{}),iconPosition:\"start\",disabled:isLoading}),/*#__PURE__*/_jsx(Tab,{value:\"text\",label:\"Paste Text\",icon:/*#__PURE__*/_jsx(TextFieldsIcon,{}),iconPosition:\"start\",disabled:isLoading})]})}),!isLoading&&activeStep<3&&/*#__PURE__*/_jsx(_Fragment,{children:inputMethod==='file'?/*#__PURE__*/_jsxs(Paper,_objectSpread(_objectSpread({},getRootProps()),{},{elevation:3,sx:{p:4,mt:3,textAlign:'center',border:isDragActive?'2px dashed':'2px dashed grey.500',borderColor:isDragActive?'primary.main':'grey.500',backgroundColor:isDragActive?'rgba(76, 175, 80, 0.04)':'background.paper',cursor:'pointer',minHeight:200,display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center',transition:'all 0.3s ease'},children:[/*#__PURE__*/_jsx(\"input\",_objectSpread({},getInputProps())),/*#__PURE__*/_jsx(CloudUploadIcon,{sx:{fontSize:80,color:'primary.main',mb:2}}),isDragActive?/*#__PURE__*/_jsx(Typography,{variant:\"h6\",color:\"primary.main\",children:\"Drop the file here ...\"}):/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Drag 'n' drop a file here, or click to select file\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",sx:{mt:1},children:\"(Max file size: 10MB. Supported formats: PDF, TXT)\"})]})):/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{p:4,mt:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"Paste Your SAT Report Text\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,multiline:true,rows:10,variant:\"outlined\",placeholder:\"Paste the content of your SAT report here...\",value:pastedText,onChange:e=>setPastedText(e.target.value),disabled:isLoading,sx:{mb:2}}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:handleTextSubmit,disabled:!pastedText.trim()||isLoading,fullWidth:true,size:\"large\",sx:{py:1.5,textTransform:'none',fontWeight:'bold'},children:\"Process Text\"})]})}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mt:2},children:error}),uploadedFile&&inputMethod==='file'&&!error&&!isLoading&&activeStep<3&&/*#__PURE__*/_jsxs(Paper,{elevation:1,sx:{p:2,mt:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Uploaded File:\"}),/*#__PURE__*/_jsxs(Typography,{children:[uploadedFile.name,\" (\",Math.round(uploadedFile.size/1024),\" KB)\"]})]}),isLoading&&/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center',mt:6,mb:4},children:[/*#__PURE__*/_jsx(CircularProgress,{size:60,thickness:4}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{mt:3,fontWeight:'bold'},children:loadingMessage||'Processing your report...'})]}),extractedText&&!isLoading&&activeStep===2&&/*#__PURE__*/_jsxs(Paper,{elevation:1,sx:{p:3,mt:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"Extracted Text (Preview):\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{maxHeight:150,overflowY:'auto',whiteSpace:'pre-wrap',backgroundColor:'grey.100',p:2,borderRadius:1},children:extractedText})]}),generatedQuestions.length>0&&!isLoading&&/*#__PURE__*/_jsxs(Box,{sx:{mt:4},children:[/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{p:3,borderRadius:2,mb:4},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:3},children:[/*#__PURE__*/_jsx(SchoolIcon,{sx:{fontSize:32,color:'primary.main',mr:1.5}}),/*#__PURE__*/_jsx(Typography,{variant:\"h5\",sx:{fontWeight:'bold'},children:\"Your Personalized Practice Questions\"})]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",paragraph:true,children:[\"Based on your test results, we've created \",generatedQuestions.length,\" personalized practice questions covering different topics to help you improve your SAT score.\"]}),correctAnswers.length>0&&/*#__PURE__*/_jsx(Alert,{severity:\"success\",icon:/*#__PURE__*/_jsx(LocalFloristIcon,{}),sx:{mb:3,display:'flex',alignItems:'center'},children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',justifyContent:'space-between',width:'100%'},children:[/*#__PURE__*/_jsxs(Typography,{children:[\"You've correctly answered \",correctAnswers.length,\" question\",correctAnswers.length!==1?'s':'',\"! Your Bonsai Tree is growing with each correct answer.\"]}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",size:\"small\",color:\"success\",startIcon:/*#__PURE__*/_jsx(EmojiNatureIcon,{}),onClick:handleViewTreeGrowth,sx:{ml:2},children:\"View Growth\"})]})}),/*#__PURE__*/_jsx(Divider,{sx:{mb:3}}),Object.entries(questionsByTopic).map((_ref,topicIndex)=>{let[topic,questions]=_ref;return/*#__PURE__*/_jsxs(Accordion,{defaultExpanded:topicIndex===0,sx:{mb:2,boxShadow:'none',border:'1px solid',borderColor:'divider'},children:[/*#__PURE__*/_jsx(AccordionSummary,{expandIcon:/*#__PURE__*/_jsx(ExpandMoreIcon,{}),sx:{backgroundColor:'rgba(0, 0, 0, 0.02)',borderBottom:'1px solid',borderColor:'divider'},children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',width:'100%',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",sx:{fontWeight:'bold'},children:[topic,\" (\",questions.length,\")\"]}),questions.length>0&&/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",sx:{mr:1},children:[questions.filter(q=>correctAnswers.includes(q.id)).length,\"/\",questions.length,\" Correct\"]}),questions.some(q=>correctAnswers.includes(q.id))&&/*#__PURE__*/_jsx(LocalFloristIcon,{fontSize:\"small\",color:\"success\",sx:{opacity:questions.every(q=>correctAnswers.includes(q.id))?1:0.6,animation:showTreeGrowthBadge?'pulse 1.5s infinite':'none','@keyframes pulse':{'0%':{transform:'scale(1)'},'50%':{transform:'scale(1.2)'},'100%':{transform:'scale(1)'}}}})]})]})}),/*#__PURE__*/_jsx(AccordionDetails,{sx:{p:0},children:questions.map((question,qIndex)=>{var _skills$find;return/*#__PURE__*/_jsx(Card,{sx:{mb:2,boxShadow:'none',border:'1px solid',borderColor:'divider',m:2},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle1\",sx:{fontWeight:'bold'},children:[\"Question \",topicIndex+1,\".\",qIndex+1,questionSkillMap[question.id]&&/*#__PURE__*/_jsx(Tooltip,{title:\"Answering this correctly will help grow your \\\"\".concat((_skills$find=skills.find(s=>s.id===questionSkillMap[question.id]))===null||_skills$find===void 0?void 0:_skills$find.name,\"\\\" skill\"),arrow:true,children:/*#__PURE__*/_jsx(Typography,{component:\"span\",variant:\"body2\",sx:{ml:1,color:'text.secondary',cursor:'help',textDecoration:'underline',textDecorationStyle:'dotted'},children:\"(Improves a skill)\"})})]}),question.difficulty&&/*#__PURE__*/_jsx(Chip,{label:question.difficulty,size:\"small\",sx:{bgcolor:getDifficultyColor(question.difficulty),color:'white',fontWeight:'bold'}})]}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",paragraph:true,sx:{whiteSpace:'pre-wrap'},children:question.text}),question.options&&/*#__PURE__*/_jsx(Box,{sx:{ml:2,mb:2},children:/*#__PURE__*/_jsx(RadioGroup,{value:studentAnswers[question.id]||'',onChange:e=>handleAnswerSelect(question.id,e.target.value),children:question.options.map((opt,i)=>/*#__PURE__*/_jsx(FormControlLabel,{value:String.fromCharCode(65+i)// A, B, C, D...\n,control:/*#__PURE__*/_jsx(Radio,{}),label:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',color:showExplanations[question.id]&&question.answer===String.fromCharCode(65+i)?'success.main':'text.primary'},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",children:[String.fromCharCode(65+i),\". \",opt]}),showExplanations[question.id]&&question.answer===String.fromCharCode(65+i)&&/*#__PURE__*/_jsx(CheckCircleIcon,{sx:{ml:1,color:'success.main'}})]}),sx:{p:1.5,mb:1,borderRadius:1,border:'1px solid',borderColor:'divider',bgcolor:showExplanations[question.id]&&question.answer===String.fromCharCode(65+i)?'rgba(76, 175, 80, 0.12)':'transparent'},disabled:showExplanations[question.id]},i))})}),/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'flex-end',mt:2},children:[studentAnswers[question.id]&&!showExplanations[question.id]&&/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:()=>checkAnswer(question.id),sx:{mr:1},children:\"Check Answer\"}),showExplanations[question.id]&&/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:()=>resetQuestion(question.id),children:\"Try Again\"})]}),showExplanations[question.id]&&/*#__PURE__*/_jsx(Fade,{in:showExplanations[question.id],timeout:500,children:/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Box,{sx:{display:'flex',alignItems:'center',mt:2,mb:1},children:isAnswerCorrect(question,studentAnswers[question.id])?/*#__PURE__*/_jsx(Alert,{severity:\"success\",icon:/*#__PURE__*/_jsx(CheckCircleIcon,{fontSize:\"inherit\"}),sx:{width:'100%'},children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",fontWeight:\"bold\",children:\"Correct! Well done.\"})}):/*#__PURE__*/_jsx(Alert,{severity:\"error\",icon:/*#__PURE__*/_jsx(CancelIcon,{fontSize:\"inherit\"}),sx:{width:'100%'},children:/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",fontWeight:\"bold\",children:[\"Incorrect. The correct answer is \",question.answer,\".\"]})})}),/*#__PURE__*/_jsxs(Box,{sx:{mt:2,p:2,bgcolor:'rgba(247, 247, 247, 0.9)',borderRadius:1.5,border:'1px solid',borderColor:'grey.200',boxShadow:'0 1px 3px rgba(0,0,0,0.05)',position:'relative','&::before':{content:'\"\"',position:'absolute',top:0,left:0,width:'4px',height:'100%',backgroundColor:'primary.main',borderTopLeftRadius:4,borderBottomLeftRadius:4}},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",sx:{fontWeight:'bold',color:'text.primary',mb:0.5},children:\"Explanation:\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{color:'text.secondary',whiteSpace:'pre-wrap'},children:question.explanation})]})]})})]})},question.id);})})]},topicIndex);})]}),/*#__PURE__*/_jsxs(Box,{sx:{mt:4,display:'flex',justifyContent:'center',gap:2},children:[/*#__PURE__*/_jsx(Button,{onClick:handleViewTreeGrowth,variant:\"outlined\",size:\"large\",sx:{textTransform:'none'},startIcon:/*#__PURE__*/_jsx(EmojiNatureIcon,{}),children:\"View Your Bonsai Tree\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",size:\"large\",sx:{textTransform:'none',fontWeight:'bold'},onClick:()=>{setActiveStep(0);setGeneratedQuestions([]);setExtractedText(null);setInputMethod('file');setUploadedFile(null);setPastedText('');setStudentAnswers({});setShowExplanations({});setCorrectAnswers([]);setQuestionSkillMap({});setTreeBadgeCount(0);},children:\"Upload Another Report\"})]})]})]})]});};export default UploadReport;","map":{"version":3,"names":["React","useState","useCallback","useEffect","useNavigate","Box","Button","Container","Typography","Paper","AppBar","Toolbar","IconButton","CircularProgress","Alert","Tabs","Tab","TextField","Card","CardContent","Divider","Chip","Stepper","Step","StepLabel","useTheme","useMediaQuery","Accordion","AccordionSummary","AccordionDetails","RadioGroup","Radio","FormControlLabel","Fade","Badge","Tooltip","MenuIcon","CloudUploadIcon","TextFieldsIcon","SchoolIcon","ExpandMoreIcon","CheckCircleIcon","CancelIcon","LocalFloristIcon","EmojiNatureIcon","useDropzone","uploadFileToSupabase","ocrPdfFromSupabase","generateQuestionsFromMistakes","supabase","useSkills","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","addProcessingDelay","ms","Promise","resolve","setTimeout","UploadReport","theme","isMobile","breakpoints","down","navigate","skills","updateSkillProgress","drawerOpen","setDrawerOpen","uploadedFile","setUploadedFile","extractedText","setExtractedText","generatedQuestions","setGeneratedQuestions","isLoading","setIsLoading","loadingMessage","setLoadingMessage","error","setError","inputMethod","setInputMethod","pastedText","setPastedText","activeStep","setActiveStep","apiKeyMissing","setApiKeyMissing","process","env","REACT_APP_GEMINI_API_KEY","studentAnswers","setStudentAnswers","showExplanations","setShowExplanations","correctAnswers","setCorrectAnswers","questionSkillMap","setQuestionSkillMap","showTreeGrowthBadge","setShowTreeGrowthBadge","treeBadgeCount","setTreeBadgeCount","questionsByTopic","useMemo","grouped","forEach","q","topic","push","mapQuestionsToSkills","questions","topicToCategory","mapping","question","category","matchingSkills","filter","s","subcategory","name","toLowerCase","includes","length","notYetMastered","mastered","skillToUse","Math","floor","random","id","handleDrawerToggle","onDrop","acceptedFiles","file","validFileTypes","type","data","session","auth","getSession","text","storagePath","publicUrl","publicAccess","console","log","substring","err","concat","message","handleTextSubmit","trim","getRootProps","getInputProps","isDragActive","accept","multiple","disabled","handleInputMethodChange","_event","newValue","getDifficultyColor","difficulty","palette","success","main","warning","info","handleAnswerSelect","questionId","answer","prev","_objectSpread","checkAnswer","find","isAnswerCorrect","skillId","skill","progressIncrease","newProgress","min","masteryLevel","resetQuestion","newAnswers","studentAnswer","handleViewTreeGrowth","state","fromUpload","sx","display","flexDirection","minHeight","bgcolor","children","position","color","edge","onClick","mr","variant","component","flexGrow","title","badgeContent","opacity","transition","animation","transform","maxWidth","mt","mb","gutterBottom","align","fontWeight","primary","paragraph","severity","alternativeLabel","xs","sm","width","value","onChange","centered","indicatorColor","textColor","label","icon","iconPosition","elevation","p","textAlign","border","borderColor","backgroundColor","cursor","alignItems","justifyContent","fontSize","fullWidth","multiline","rows","placeholder","e","target","size","py","textTransform","round","thickness","maxHeight","overflowY","whiteSpace","borderRadius","startIcon","ml","Object","entries","map","_ref","topicIndex","defaultExpanded","boxShadow","expandIcon","borderBottom","some","every","qIndex","_skills$find","m","arrow","textDecoration","textDecorationStyle","options","opt","i","String","fromCharCode","control","in","timeout","content","top","left","height","borderTopLeftRadius","borderBottomLeftRadius","explanation","gap"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/pages/UploadReport.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Button,\n  Container,\n  Typography,\n  Paper,\n  AppBar,\n  Toolbar,\n  IconButton,\n  CircularProgress,\n  Alert,\n  Tabs,\n  Tab,\n  TextField,\n  Card,\n  CardContent,\n  Divider,\n  Chip,\n  Grid,\n  Stepper,\n  Step,\n  StepLabel,\n  useTheme,\n  useMediaQuery,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Collapse,\n  Fade,\n  Badge,\n  Tooltip\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\nimport SchoolIcon from '@mui/icons-material/School';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport LocalFloristIcon from '@mui/icons-material/LocalFlorist';\nimport EmojiNatureIcon from '@mui/icons-material/EmojiNature';\nimport { useDropzone } from 'react-dropzone';\nimport { uploadFileToSupabase, ocrPdfFromSupabase } from '../services/ocrService'; \nimport { generateQuestionsFromMistakes, GeneratedQuestion } from '../services/aiService';\nimport { supabase } from '../supabaseClient';\nimport { useSkills } from '../components/SkillsProvider';\n\n// Define an interface for user answers\ninterface StudentAnswers {\n  [questionId: string]: string;\n}\n\n// Interface for tracking which skills are improved by which questions\ninterface QuestionSkillMapping {\n  [questionId: string]: string; // maps question id to skill id\n}\n\n// Function to simulate processing delay\nconst addProcessingDelay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst UploadReport: React.FC = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const navigate = useNavigate();\n  const { skills, updateSkillProgress } = useSkills();\n  \n  const [drawerOpen, setDrawerOpen] = useState<boolean>(false); \n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [extractedText, setExtractedText] = useState<string | null>(null);\n  const [generatedQuestions, setGeneratedQuestions] = useState<GeneratedQuestion[]>([]); \n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [loadingMessage, setLoadingMessage] = useState<string>('');\n  const [error, setError] = useState<string | null>(null);\n  const [inputMethod, setInputMethod] = useState<string>('file'); // 'file' or 'text'\n  const [pastedText, setPastedText] = useState<string>('');\n  const [activeStep, setActiveStep] = useState<number>(0);\n  const [apiKeyMissing, setApiKeyMissing] = useState<boolean>(!process.env.REACT_APP_GEMINI_API_KEY);\n  \n  // New state for tracking student answers and showing explanations\n  const [studentAnswers, setStudentAnswers] = useState<StudentAnswers>({});\n  const [showExplanations, setShowExplanations] = useState<{[key: string]: boolean}>({});\n  const [correctAnswers, setCorrectAnswers] = useState<string[]>([]);\n  const [questionSkillMap, setQuestionSkillMap] = useState<QuestionSkillMapping>({});\n  const [showTreeGrowthBadge, setShowTreeGrowthBadge] = useState<boolean>(false);\n  const [treeBadgeCount, setTreeBadgeCount] = useState<number>(0);\n  \n  // Group questions by topic for better organization\n  const questionsByTopic = React.useMemo(() => {\n    const grouped: Record<string, GeneratedQuestion[]> = {};\n    generatedQuestions.forEach(q => {\n      if (!grouped[q.topic]) {\n        grouped[q.topic] = [];\n      }\n      grouped[q.topic].push(q);\n    });\n    return grouped;\n  }, [generatedQuestions]);\n\n  // Maps generated questions to skills\n  const mapQuestionsToSkills = useCallback((questions: GeneratedQuestion[]) => {\n    // Create a mapping between question topics and skill categories\n    const topicToCategory: Record<string, string> = {\n      'Grammar': 'Standard English Conventions',\n      'Punctuation': 'Standard English Conventions',\n      'Sentence Structure': 'Standard English Conventions',\n      'Evidence': 'Expression of Ideas',\n      'Organization': 'Expression of Ideas',\n      'Vocabulary': 'Expression of Ideas',\n      'Algebra': 'Math',\n      'Geometry': 'Math',\n      'Data Analysis': 'Math'\n    };\n    \n    // Generate a mapping between question IDs and skill IDs\n    const mapping: QuestionSkillMapping = {};\n    \n    questions.forEach(question => {\n      // Find matching skills from the skills context\n      const category = topicToCategory[question.topic] || question.topic;\n      \n      // Find skills that match this category\n      const matchingSkills = skills.filter(s => \n        s.category === category || \n        s.subcategory === question.topic ||\n        s.name.toLowerCase().includes(question.topic.toLowerCase())\n      );\n      \n      if (matchingSkills.length > 0) {\n        // Pick a skill to associate with this question (preferably one that's not mastered yet)\n        const notYetMastered = matchingSkills.filter(s => !s.mastered);\n        const skillToUse = notYetMastered.length > 0 \n          ? notYetMastered[Math.floor(Math.random() * notYetMastered.length)]\n          : matchingSkills[Math.floor(Math.random() * matchingSkills.length)];\n        \n        mapping[question.id] = skillToUse.id;\n      }\n    });\n    \n    setQuestionSkillMap(mapping);\n  }, [skills]);\n\n  // Effect to map questions to skills when questions are generated\n  useEffect(() => {\n    if (generatedQuestions.length > 0) {\n      mapQuestionsToSkills(generatedQuestions);\n    }\n  }, [generatedQuestions, mapQuestionsToSkills]);\n\n  const handleDrawerToggle = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (acceptedFiles && acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      const validFileTypes = ['application/pdf', 'text/plain'];\n      \n      if (!validFileTypes.includes(file.type)) {\n        setError('Invalid file type. Please upload a PDF or TXT file.');\n        setUploadedFile(null);\n        return;\n      }\n      \n      setUploadedFile(file);\n      setError(null);\n      setExtractedText(null);\n      setGeneratedQuestions([]);\n      setIsLoading(true);\n      setActiveStep(1);\n      \n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session) {\n          setError('No active session. Please log in again.');\n          setIsLoading(false);\n          return;\n        }\n\n        // Handle differently based on file type\n        if (file.type === 'text/plain') {\n          // For text files, read the content directly\n          setLoadingMessage('Reading text file content...');\n          const text = await file.text();\n          // Add realistic processing delay\n          await addProcessingDelay(2500);\n          setExtractedText(text);\n          setActiveStep(2);\n          \n          setLoadingMessage('Analyzing report and generating personalized questions...');\n          // Add realistic processing delay before question generation\n          await addProcessingDelay(3500);\n          const questions = await generateQuestionsFromMistakes(text);\n          setGeneratedQuestions(questions);\n          setActiveStep(3);\n        } else {\n          // PDF processing flow\n          setLoadingMessage('Uploading PDF to secure storage...');\n          const { storagePath, publicUrl } = await uploadFileToSupabase(file, 'score-reports', { publicAccess: false });\n          console.log('File uploaded:', { storagePath, publicUrl });\n          \n          // Add realistic processing delay\n          await addProcessingDelay(2000);\n\n          setLoadingMessage('Extracting text from PDF (OCR process)... This may take a moment.');\n          const text = await ocrPdfFromSupabase(publicUrl, storagePath);\n          setExtractedText(text);\n          setActiveStep(2);\n          console.log('Text extracted:', text.substring(0, 100) + '...');\n          \n          setLoadingMessage('Analyzing your report and building personalized questions...');\n          // Add realistic processing delay for question generation\n          await addProcessingDelay(4500);\n          const questions = await generateQuestionsFromMistakes(text);\n          setGeneratedQuestions(questions);\n          setActiveStep(3);\n        }\n      } catch (err: any) {\n        console.error(\"Error processing file:\", err);\n        setError(`Failed to process the file: ${err.message || 'Unknown error'}. Check console for details.`);\n      } finally {\n        setIsLoading(false);\n        setLoadingMessage('');\n      }\n    }\n  }, []);\n\n  const handleTextSubmit = async () => {\n    if (!pastedText.trim()) {\n      setError('Please paste some text before submitting.');\n      return;\n    }\n\n    setError(null);\n    setExtractedText(null);\n    setGeneratedQuestions([]);\n    setIsLoading(true);\n    setActiveStep(1);\n    \n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        setError('No active session. Please log in again.');\n        setIsLoading(false);\n        return;\n      }\n\n      // Process the pasted text with realistic delays\n      setLoadingMessage('Processing your text input...');\n      await addProcessingDelay(1800);\n      setExtractedText(pastedText);\n      setActiveStep(2);\n      \n      setLoadingMessage('Analyzing report data and creating personalized questions...');\n      // Add realistic processing delay\n      await addProcessingDelay(3800);\n      const questions = await generateQuestionsFromMistakes(pastedText);\n      setGeneratedQuestions(questions);\n      setActiveStep(3);\n    } catch (err: any) {\n      console.error(\"Error processing text:\", err);\n      setError(`Failed to process text: ${err.message || 'Unknown error'}. Check console for details.`);\n    } finally {\n      setIsLoading(false);\n      setLoadingMessage('');\n    }\n  };\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: { \n      'application/pdf': ['.pdf'],\n      'text/plain': ['.txt']\n    },\n    multiple: false,\n    disabled: isLoading || inputMethod === 'text'\n  });\n\n  const handleInputMethodChange = (_event: React.SyntheticEvent, newValue: string) => {\n    setInputMethod(newValue);\n    // Reset state when changing methods\n    setError(null);\n    setUploadedFile(null);\n    setPastedText('');\n    setExtractedText(null);\n    setGeneratedQuestions([]);\n    setActiveStep(0);\n  };\n\n  // Function to determine difficulty level color\n  const getDifficultyColor = (difficulty?: string) => {\n    switch (difficulty?.toLowerCase()) {\n      case 'easy': return theme.palette.success.main;\n      case 'medium': return theme.palette.warning.main;\n      case 'hard': return theme.palette.error.main;\n      default: return theme.palette.info.main;\n    }\n  };\n\n  // Handle student answer selection\n  const handleAnswerSelect = (questionId: string, answer: string) => {\n    setStudentAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n  };\n\n  // Check if an answer is correct and reveal explanation\n  const checkAnswer = (questionId: string) => {\n    setShowExplanations(prev => ({\n      ...prev,\n      [questionId]: true\n    }));\n    \n    const question = generatedQuestions.find(q => q.id === questionId);\n    if (question && isAnswerCorrect(question, studentAnswers[questionId])) {\n      // If correct and not already in correctAnswers, add it\n      if (!correctAnswers.includes(questionId)) {\n        setCorrectAnswers(prev => [...prev, questionId]);\n        \n        // Update the associated skill's progress\n        const skillId = questionSkillMap[questionId];\n        if (skillId) {\n          // Find current skill to determine new progress level\n          const skill = skills.find(s => s.id === skillId);\n          if (skill) {\n            // Increase skill mastery level by 15-25% for each correct answer\n            const progressIncrease = Math.floor(Math.random() * 11) + 15; // 15-25\n            const newProgress = Math.min(100, skill.masteryLevel + progressIncrease);\n            \n            // Ensure we call updateSkillProgress with the correct parameters\n            updateSkillProgress(skillId, newProgress);\n            console.log(`Skill ${skillId} updated: ${skill.masteryLevel} -> ${newProgress}`);\n            \n            // Show growth badge and increment counter\n            setShowTreeGrowthBadge(true);\n            setTreeBadgeCount(prev => prev + 1);\n            \n            // Hide badge after a few seconds\n            setTimeout(() => {\n              setShowTreeGrowthBadge(false);\n            }, 3000);\n          }\n        }\n      }\n    }\n  };\n\n  // Reset a question to try again\n  const resetQuestion = (questionId: string) => {\n    const newAnswers = {...studentAnswers};\n    delete newAnswers[questionId];\n    setStudentAnswers(newAnswers);\n    \n    setShowExplanations(prev => ({\n      ...prev,\n      [questionId]: false\n    }));\n    \n    // If it was a correct answer, remove it from correctAnswers\n    if (correctAnswers.includes(questionId)) {\n      setCorrectAnswers(prev => prev.filter(id => id !== questionId));\n    }\n  };\n\n  // Function to determine if a student's answer is correct\n  const isAnswerCorrect = (question: GeneratedQuestion, studentAnswer: string) => {\n    return studentAnswer === question.answer;\n  };\n\n  // Handle navigate to dashboard to see tree growth\n  const handleViewTreeGrowth = () => {\n    navigate('/dashboard', { \n      state: { \n        fromUpload: true, \n        correctAnswers: correctAnswers.length \n      } \n    });\n  };\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh', bgcolor: '#f8f9fa' }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle} \n            sx={{ mr: 2 }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Upload Score Report\n          </Typography>\n          \n          {/* Tree growth badge */}\n          {correctAnswers.length > 0 && (\n            <Tooltip title=\"Your bonsai tree is growing! Click to view\">\n              <Badge \n                badgeContent={treeBadgeCount} \n                color=\"success\"\n                sx={{ mr: 2, opacity: showTreeGrowthBadge ? 1 : 0.8, transition: 'all 0.3s ease' }}\n              >\n                <IconButton \n                  color=\"inherit\" \n                  onClick={handleViewTreeGrowth}\n                  sx={{ \n                    animation: showTreeGrowthBadge ? 'treeGrow 1s ease-in-out' : 'none',\n                    '@keyframes treeGrow': {\n                      '0%': { transform: 'scale(1)' },\n                      '50%': { transform: 'scale(1.3)' },\n                      '100%': { transform: 'scale(1)' }\n                    }\n                  }}\n                >\n                  <EmojiNatureIcon />\n                </IconButton>\n              </Badge>\n            </Tooltip>\n          )}\n        </Toolbar>\n      </AppBar>\n\n      <Container maxWidth=\"md\" sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom align=\"center\" sx={{ fontWeight: 'bold', color: theme.palette.primary.main }}>\n          Upload Your SAT Practice Report\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"text.secondary\" paragraph>\n          Upload your report or paste text to get personalized lessons and practice questions\n        </Typography>\n\n        {apiKeyMissing && (\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle2\" fontWeight=\"bold\">API Key Missing</Typography>\n            <Typography variant=\"body2\">\n              The application is running in limited mode. Some advanced features may not be available. Please contact the administrator for full functionality.\n            </Typography>\n          </Alert>\n        )}\n\n        <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4, display: { xs: 'none', sm: 'flex' } }}>\n          <Step>\n            <StepLabel>Upload Report</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Process Content</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Extract Information</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Generate Questions</StepLabel>\n          </Step>\n        </Stepper>\n        \n        <Box sx={{ width: '100%', mb: 3 }}>\n          <Tabs\n            value={inputMethod}\n            onChange={handleInputMethodChange}\n            centered\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant={isMobile ? \"fullWidth\" : \"standard\"}\n          >\n            <Tab \n              value=\"file\" \n              label=\"Upload File\" \n              icon={<CloudUploadIcon />} \n              iconPosition=\"start\"\n              disabled={isLoading}\n            />\n            <Tab \n              value=\"text\" \n              label=\"Paste Text\" \n              icon={<TextFieldsIcon />} \n              iconPosition=\"start\"\n              disabled={isLoading}\n            />\n          </Tabs>\n        </Box>\n\n        {!isLoading && activeStep < 3 && (\n          <>\n            {inputMethod === 'file' ? (\n              <Paper\n                {...getRootProps()}\n                elevation={3}\n                sx={{\n                  p: 4,\n                  mt: 3,\n                  textAlign: 'center',\n                  border: isDragActive ? '2px dashed' : '2px dashed grey.500',\n                  borderColor: isDragActive ? 'primary.main' : 'grey.500',\n                  backgroundColor: isDragActive ? 'rgba(76, 175, 80, 0.04)' : 'background.paper',\n                  cursor: 'pointer',\n                  minHeight: 200,\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  transition: 'all 0.3s ease'\n                }}\n              >\n                <input {...getInputProps()} />\n                <CloudUploadIcon sx={{ fontSize: 80, color: 'primary.main', mb: 2 }} />\n                {isDragActive ? (\n                  <Typography variant=\"h6\" color=\"primary.main\">Drop the file here ...</Typography>\n                ) : (\n                  <Typography variant=\"h6\">Drag 'n' drop a file here, or click to select file</Typography>\n                )}\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                  (Max file size: 10MB. Supported formats: PDF, TXT)\n                </Typography>\n              </Paper>\n            ) : (\n              <Paper elevation={3} sx={{ p: 4, mt: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>Paste Your SAT Report Text</Typography>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={10}\n                  variant=\"outlined\"\n                  placeholder=\"Paste the content of your SAT report here...\"\n                  value={pastedText}\n                  onChange={(e) => setPastedText(e.target.value)}\n                  disabled={isLoading}\n                  sx={{ mb: 2 }}\n                />\n                <Button \n                  variant=\"contained\" \n                  color=\"primary\" \n                  onClick={handleTextSubmit}\n                  disabled={!pastedText.trim() || isLoading}\n                  fullWidth\n                  size=\"large\"\n                  sx={{ py: 1.5, textTransform: 'none', fontWeight: 'bold' }}\n                >\n                  Process Text\n                </Button>\n              </Paper>\n            )}\n          </>\n        )}\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mt: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {uploadedFile && inputMethod === 'file' && !error && !isLoading && activeStep < 3 && (\n          <Paper elevation={1} sx={{ p: 2, mt: 3 }}>\n            <Typography variant=\"h6\">Uploaded File:</Typography>\n            <Typography>{uploadedFile.name} ({Math.round(uploadedFile.size / 1024)} KB)</Typography>\n          </Paper>\n        )}\n\n        {isLoading && (\n          <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', mt: 6, mb: 4 }}>\n            <CircularProgress size={60} thickness={4} />\n            <Typography variant=\"h6\" sx={{ mt: 3, fontWeight: 'bold' }}>{loadingMessage || 'Processing your report...'}</Typography>\n          </Box>\n        )}\n\n        {extractedText && !isLoading && activeStep === 2 && (\n          <Paper elevation={1} sx={{ p: 3, mt: 4 }}>\n            <Typography variant=\"h6\" gutterBottom>Extracted Text (Preview):</Typography>\n            <Typography variant=\"body2\" sx={{ maxHeight: 150, overflowY: 'auto', whiteSpace: 'pre-wrap', backgroundColor: 'grey.100', p:2, borderRadius:1 }}>\n              {extractedText}\n            </Typography>\n          </Paper>\n        )}\n        \n        {generatedQuestions.length > 0 && !isLoading && (\n          <Box sx={{ mt: 4 }}>\n            <Paper elevation={3} sx={{ p: 3, borderRadius: 2, mb: 4 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n                <SchoolIcon sx={{ fontSize: 32, color: 'primary.main', mr: 1.5 }} />\n                <Typography variant=\"h5\" sx={{ fontWeight: 'bold' }}>\n                  Your Personalized Practice Questions\n                </Typography>\n              </Box>\n              \n              <Typography variant=\"body1\" paragraph>\n                Based on your test results, we've created {generatedQuestions.length} personalized practice questions \n                covering different topics to help you improve your SAT score.\n              </Typography>\n              \n              {correctAnswers.length > 0 && (\n                <Alert \n                  severity=\"success\" \n                  icon={<LocalFloristIcon />}\n                  sx={{ mb: 3, display: 'flex', alignItems: 'center' }}\n                >\n                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\n                    <Typography>\n                      You've correctly answered {correctAnswers.length} question{correctAnswers.length !== 1 ? 's' : ''}! \n                      Your Bonsai Tree is growing with each correct answer.\n                    </Typography>\n                    <Button \n                      variant=\"outlined\" \n                      size=\"small\" \n                      color=\"success\" \n                      startIcon={<EmojiNatureIcon />}\n                      onClick={handleViewTreeGrowth}\n                      sx={{ ml: 2 }}\n                    >\n                      View Growth\n                    </Button>\n                  </Box>\n                </Alert>\n              )}\n              \n              <Divider sx={{ mb: 3 }} />\n              \n              {Object.entries(questionsByTopic).map(([topic, questions], topicIndex) => (\n                <Accordion key={topicIndex} defaultExpanded={topicIndex === 0} sx={{ mb: 2, boxShadow: 'none', border: '1px solid', borderColor: 'divider' }}>\n                  <AccordionSummary \n                    expandIcon={<ExpandMoreIcon />}\n                    sx={{ \n                      backgroundColor: 'rgba(0, 0, 0, 0.02)',\n                      borderBottom: '1px solid',\n                      borderColor: 'divider'\n                    }}\n                  >\n                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>\n                      <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\n                        {topic} ({questions.length})\n                      </Typography>\n                      \n                      {/* Show mini progress for this topic */}\n                      {questions.length > 0 && (\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 1 }}>\n                            {questions.filter(q => correctAnswers.includes(q.id)).length}/{questions.length} Correct\n                          </Typography>\n                          {questions.some(q => correctAnswers.includes(q.id)) && (\n                            <LocalFloristIcon \n                              fontSize=\"small\" \n                              color=\"success\" \n                              sx={{ \n                                opacity: questions.every(q => correctAnswers.includes(q.id)) ? 1 : 0.6,\n                                animation: showTreeGrowthBadge ? 'pulse 1.5s infinite' : 'none',\n                                '@keyframes pulse': {\n                                  '0%': { transform: 'scale(1)' },\n                                  '50%': { transform: 'scale(1.2)' },\n                                  '100%': { transform: 'scale(1)' }\n                                }\n                              }} \n                            />\n                          )}\n                        </Box>\n                      )}\n                    </Box>\n                  </AccordionSummary>\n                  <AccordionDetails sx={{ p: 0 }}>\n                    {questions.map((question, qIndex) => (\n                      <Card key={question.id} sx={{ mb: 2, boxShadow: 'none', border: '1px solid', borderColor: 'divider', m: 2 }}>\n                        <CardContent>\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                            <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>\n                              Question {topicIndex + 1}.{qIndex + 1}\n                              \n                              {/* Show which skill this question helps */}\n                              {questionSkillMap[question.id] && (\n                                <Tooltip \n                                  title={`Answering this correctly will help grow your \"${skills.find(s => s.id === questionSkillMap[question.id])?.name}\" skill`}\n                                  arrow\n                                >\n                                  <Typography\n                                    component=\"span\"\n                                    variant=\"body2\"\n                                    sx={{ \n                                      ml: 1, \n                                      color: 'text.secondary',\n                                      cursor: 'help',\n                                      textDecoration: 'underline',\n                                      textDecorationStyle: 'dotted'\n                                    }}\n                                  >\n                                    (Improves a skill)\n                                  </Typography>\n                                </Tooltip>\n                              )}\n                            </Typography>\n                            {question.difficulty && (\n                              <Chip \n                                label={question.difficulty} \n                                size=\"small\" \n                                sx={{ \n                                  bgcolor: getDifficultyColor(question.difficulty),\n                                  color: 'white',\n                                  fontWeight: 'bold'\n                                }} \n                              />\n                            )}\n                          </Box>\n                          \n                          <Typography variant=\"body1\" paragraph sx={{ whiteSpace: 'pre-wrap' }}>\n                            {question.text}\n                          </Typography>\n                          \n                          {question.options && (\n                            <Box sx={{ ml: 2, mb: 2 }}>\n                              <RadioGroup \n                                value={studentAnswers[question.id] || ''} \n                                onChange={(e) => handleAnswerSelect(question.id, e.target.value)}\n                              >\n                                {question.options.map((opt, i) => (\n                                  <FormControlLabel\n                                    key={i}\n                                    value={String.fromCharCode(65 + i)} // A, B, C, D...\n                                    control={<Radio />}\n                                    label={\n                                      <Box sx={{ \n                                        display: 'flex', \n                                        alignItems: 'center',\n                                        color: showExplanations[question.id] && \n                                               question.answer === String.fromCharCode(65 + i) ? \n                                               'success.main' : 'text.primary'\n                                      }}>\n                                        <Typography variant=\"body1\">\n                                          {String.fromCharCode(65 + i)}. {opt}\n                                        </Typography>\n                                        {showExplanations[question.id] && \n                                          question.answer === String.fromCharCode(65 + i) && \n                                          <CheckCircleIcon sx={{ ml: 1, color: 'success.main' }} />\n                                        }\n                                      </Box>\n                                    }\n                                    sx={{ \n                                      p: 1.5, \n                                      mb: 1, \n                                      borderRadius: 1, \n                                      border: '1px solid',\n                                      borderColor: 'divider',\n                                      bgcolor: showExplanations[question.id] && \n                                               question.answer === String.fromCharCode(65 + i) ? \n                                               'rgba(76, 175, 80, 0.12)' : 'transparent',\n                                    }}\n                                    disabled={showExplanations[question.id]}\n                                  />\n                                ))}\n                              </RadioGroup>\n                            </Box>\n                          )}\n                          \n                          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n                            {studentAnswers[question.id] && !showExplanations[question.id] && (\n                              <Button \n                                variant=\"contained\" \n                                color=\"primary\" \n                                onClick={() => checkAnswer(question.id)}\n                                sx={{ mr: 1 }}\n                              >\n                                Check Answer\n                              </Button>\n                            )}\n                            {showExplanations[question.id] && (\n                              <Button \n                                variant=\"outlined\" \n                                onClick={() => resetQuestion(question.id)}\n                              >\n                                Try Again\n                              </Button>\n                            )}\n                          </Box>\n                          \n                          {showExplanations[question.id] && (\n                            <Fade in={showExplanations[question.id]} timeout={500}>\n                              <Box>\n                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 2, mb: 1 }}>\n                                  {isAnswerCorrect(question, studentAnswers[question.id]) ? (\n                                    <Alert \n                                      severity=\"success\" \n                                      icon={<CheckCircleIcon fontSize=\"inherit\" />}\n                                      sx={{ width: '100%' }}\n                                    >\n                                      <Typography variant=\"body1\" fontWeight=\"bold\">\n                                        Correct! Well done.\n                                      </Typography>\n                                    </Alert>\n                                  ) : (\n                                    <Alert \n                                      severity=\"error\" \n                                      icon={<CancelIcon fontSize=\"inherit\" />}\n                                      sx={{ width: '100%' }}\n                                    >\n                                      <Typography variant=\"body1\" fontWeight=\"bold\">\n                                        Incorrect. The correct answer is {question.answer}.\n                                      </Typography>\n                                    </Alert>\n                                  )}\n                                </Box>\n                                \n                                <Box sx={{ \n                                  mt: 2, \n                                  p: 2, \n                                  bgcolor: 'rgba(247, 247, 247, 0.9)', \n                                  borderRadius: 1.5,\n                                  border: '1px solid',\n                                  borderColor: 'grey.200',\n                                  boxShadow: '0 1px 3px rgba(0,0,0,0.05)',\n                                  position: 'relative',\n                                  '&::before': {\n                                    content: '\"\"',\n                                    position: 'absolute',\n                                    top: 0,\n                                    left: 0,\n                                    width: '4px',\n                                    height: '100%',\n                                    backgroundColor: 'primary.main',\n                                    borderTopLeftRadius: 4,\n                                    borderBottomLeftRadius: 4\n                                  }\n                                }}>\n                                  <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', color: 'text.primary', mb: 0.5 }}>\n                                    Explanation:\n                                  </Typography>\n                                  <Typography variant=\"body2\" sx={{ color: 'text.secondary', whiteSpace: 'pre-wrap' }}>\n                                    {question.explanation}\n                                  </Typography>\n                                </Box>\n                              </Box>\n                            </Fade>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </AccordionDetails>\n                </Accordion>\n              ))}\n            </Paper>\n            \n            <Box sx={{ mt: 4, display: 'flex', justifyContent: 'center', gap: 2 }}>\n                          <Button \n              onClick={handleViewTreeGrowth}\n              variant=\"outlined\" \n              size=\"large\"\n              sx={{ textTransform: 'none' }}\n              startIcon={<EmojiNatureIcon />}\n            >\n              View Your Bonsai Tree\n            </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                sx={{ textTransform: 'none', fontWeight: 'bold' }}\n                onClick={() => {\n                  setActiveStep(0);\n                  setGeneratedQuestions([]);\n                  setExtractedText(null);\n                  setInputMethod('file');\n                  setUploadedFile(null);\n                  setPastedText('');\n                  setStudentAnswers({});\n                  setShowExplanations({});\n                  setCorrectAnswers([]);\n                  setQuestionSkillMap({});\n                  setTreeBadgeCount(0);\n                }}\n              >\n                Upload Another Report\n              </Button>\n            </Box>\n          </Box>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nexport default UploadReport; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}