{"ast":null,"code":"var _jsxFileName = \"/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { useSpring, animated, config, useSpringRef, useChain } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper functions\nconst lerp = (a, b, t) => a * (1 - t) + b * t;\nconst clamp = (num, min, max) => Math.min(Math.max(num, min), max);\nconst randRange = (min, max) => Math.random() * (max - min) + min;\n\n// Helper function to get all branches (main and sub-branches) flattened into a single array\nconst getAllBranches = branches => {\n  let all_branches = [];\n  for (const branch of branches) {\n    all_branches.push(branch);\n    if (branch.subBranches && branch.subBranches.length > 0) {\n      all_branches = all_branches.concat(getAllBranches(branch.subBranches));\n    }\n  }\n  return all_branches;\n};\n\n// Define interfaces for branch and leaf objects\n\nconst BonsaiTree = ({\n  skills,\n  totalSkills,\n  showGrowthAnimation = false\n}) => {\n  _s();\n  const theme = useTheme();\n  const svgRef = useRef(null);\n  const [recentlyMastered, setRecentlyMastered] = useState([]);\n  const [showTooltip, setShowTooltip] = useState(null);\n  const [animation, setAnimation] = useState(false);\n  const [firstRender, setFirstRender] = useState(true);\n  const [hoveredBranch, setHoveredBranch] = useState(null);\n\n  // Reference to track previous skills for comparison\n  const prevSkillsRef = useRef([]);\n\n  // Group skills by category\n  const skillsByCategory = skills.reduce((acc, skill) => {\n    if (!acc[skill.category]) {\n      acc[skill.category] = [];\n    }\n    acc[skill.category].push(skill);\n    return acc;\n  }, {});\n\n  // Track skills that were recently mastered\n  useEffect(() => {\n    // Only run effect if not first render\n    if (!firstRender) {\n      const prevMasteredIds = prevSkillsRef.current.filter(skill => skill.mastered).map(skill => skill.id);\n      const currentMasteredIds = skills.filter(skill => skill.mastered).map(skill => skill.id);\n\n      // Find newly mastered skills\n      const newlyMastered = currentMasteredIds.filter(id => !prevMasteredIds.includes(id));\n      if (newlyMastered.length > 0) {\n        setRecentlyMastered(newlyMastered);\n        setAnimation(true);\n\n        // Reset animation state after animation completes\n        const timer = setTimeout(() => {\n          setAnimation(false);\n        }, 3000);\n        return () => clearTimeout(timer);\n      }\n    } else {\n      setFirstRender(false);\n    }\n    // Update reference\n    prevSkillsRef.current = [...skills];\n  }, [skills, firstRender]);\n\n  // Calculate mastery percentage\n  const masteredSkills = skills.filter(skill => skill.mastered);\n  const masteryPercentage = Math.round(masteredSkills.length / totalSkills * 100);\n\n  // Spring animation refs for chaining\n  const trunkSpringRef = useSpringRef();\n  const branchSpringRef = useSpringRef();\n  const leafSpringRef = useSpringRef();\n\n  // Spring animations\n  const percentageProps = useSpring({\n    number: masteryPercentage,\n    from: {\n      number: 0\n    },\n    config: {\n      tension: 120,\n      friction: 14\n    },\n    delay: 300\n  });\n  const trunkProps = useSpring({\n    ref: trunkSpringRef,\n    from: {\n      strokeDashoffset: 1000,\n      opacity: 0.7\n    },\n    to: {\n      strokeDashoffset: 0,\n      opacity: 1\n    },\n    config: {\n      tension: 80,\n      friction: 15,\n      duration: 1500\n    }\n  });\n  const branchProps = useSpring({\n    ref: branchSpringRef,\n    from: {\n      strokeDashoffset: 1000,\n      opacity: 0.5\n    },\n    to: {\n      strokeDashoffset: 0,\n      opacity: 1\n    },\n    config: {\n      tension: 70,\n      friction: 14,\n      duration: 1200\n    }\n  });\n  const leafProps = useSpring({\n    ref: leafSpringRef,\n    from: {\n      scale: 0,\n      opacity: 0\n    },\n    to: {\n      scale: 1,\n      opacity: 1\n    },\n    config: {\n      tension: 200,\n      friction: 20,\n      duration: 800\n    }\n  });\n\n  // Chain the animations\n  useChain(firstRender ? [trunkSpringRef, branchSpringRef, leafSpringRef] : [], firstRender ? [0, 0.5, 0.8] : []);\n  const treeContainerProps = useSpring({\n    from: {\n      opacity: 0,\n      transform: 'translateY(30px)'\n    },\n    to: {\n      opacity: 1,\n      transform: 'translateY(0px)'\n    },\n    config: config.gentle\n  });\n\n  // Calculate tree health/vitality based on mastery\n  const treeVitality = {\n    // Trunk color darkens as tree matures\n    trunkBaseColor: masteryPercentage < 30 ? '#6d4c41' // Lighter brown for younger tree\n    : masteryPercentage < 70 ? '#5d4037' // Medium brown\n    : '#4e342e',\n    // Dark rich brown for mature tree\n\n    // Set trunk dimensions based on growth\n    trunkWidth: clamp(30 + masteryPercentage / 4, 30, 45),\n    trunkHeight: clamp(160 + masteryPercentage, 160, 250),\n    // Pot style based on growth\n    potWidth: clamp(100 + masteryPercentage / 3, 100, 120),\n    potHeight: clamp(45 + masteryPercentage / 10, 45, 55),\n    // Leaf colors become more vibrant with mastery\n    leafBaseColor: masteryPercentage < 30 ? '#88d498' // Light green for low mastery\n    : masteryPercentage < 60 ? '#6bcca1' // Medium green\n    : '#4fc3a8',\n    // Vibrant green for high mastery\n\n    // Overall size scaling factor\n    scale: clamp(0.85 + masteryPercentage / 100, 0.85, 1.25)\n  };\n\n  // Generate branches with a more natural, realistic pattern\n  const generateBranches = () => {\n    const categories = Object.keys(skillsByCategory);\n    const mainBranches = [];\n\n    // If no categories, return empty array\n    if (categories.length === 0) return mainBranches;\n\n    // Determine the main trunk end point (where it starts to curve)\n    const trunkEndY = 300 - treeVitality.trunkHeight * 0.8;\n    const trunkTop = {\n      x: 150,\n      y: trunkEndY\n    };\n\n    // Main branch distribution angles based on number of categories\n    const totalCategories = categories.length;\n    const baseAngles = [];\n    if (totalCategories === 1) {\n      // Single category - branch goes mostly upward\n      baseAngles.push(-Math.PI / 2);\n    } else if (totalCategories === 2) {\n      // Two categories - split left and right with asymmetry\n      baseAngles.push(-Math.PI / 2 - 0.5);\n      baseAngles.push(-Math.PI / 2 + 0.3);\n    } else {\n      // Distribute branches in a natural, asymmetric pattern\n      // Traditional bonsai often has branches at Golden ratio points\n      // We'll create a more natural distribution with intentional gaps\n\n      // First create a basic distribution\n      for (let i = 0; i < totalCategories; i++) {\n        // Introduce some natural clustering rather than even distribution\n        const position = i / (totalCategories - 1);\n        // Apply non-linear transformation for more natural spacing\n        let angle;\n        if (position < 0.4) {\n          // Cluster more branches on the left side (traditional bonsai aesthetic)\n          angle = lerp(-Math.PI / 2 - 0.9, -Math.PI / 2 - 0.2, position / 0.4);\n        } else if (position > 0.6) {\n          // Some branches on the right\n          angle = lerp(-Math.PI / 2 + 0.1, -Math.PI / 2 + 0.7, (position - 0.6) / 0.4);\n        } else {\n          // Few branches directly upward\n          angle = lerp(-Math.PI / 2 - 0.2, -Math.PI / 2 + 0.1, (position - 0.4) / 0.2);\n        }\n        baseAngles.push(angle);\n      }\n    }\n\n    // Create main branches\n    for (let i = 0; i < categories.length; i++) {\n      const category = categories[i];\n      const skills = skillsByCategory[category];\n\n      // Skip empty categories\n      if (!skills || skills.length === 0) continue;\n\n      // Calculate angle with small random variation\n      const baseAngle = baseAngles[i];\n      const angle = baseAngle + randRange(-0.15, 0.15);\n\n      // Calculate mastery for this category\n      const categorySkills = skillsByCategory[category] || [];\n      const masteredInCategory = categorySkills.filter(s => s.mastered).length;\n      const categoryMasteryRatio = categorySkills.length > 0 ? masteredInCategory / categorySkills.length : 0;\n\n      // Set branch length based on category mastery and skill count\n      const minLength = 80 + skills.length * 3;\n      const maxLength = 120 + skills.length * 4;\n      const branchLength = lerp(minLength, maxLength, categoryMasteryRatio);\n\n      // Branch direction vector\n      const branchDirection = {\n        x: Math.cos(angle),\n        y: Math.sin(angle)\n      };\n\n      // Branch end point\n      const endPoint = {\n        x: trunkTop.x + branchDirection.x * branchLength,\n        y: trunkTop.y + branchDirection.y * branchLength\n      };\n\n      // Control points for natural curve - more variation for realistic bonsai shapes\n      // Bonsai branches often have more dramatic curves and character\n      const curveFactor = randRange(0.8, 1.2); // Variation in curve intensity\n      const verticalBias = randRange(-20, -5); // Varied vertical offset for natural curves\n\n      const controlPoint1 = {\n        x: trunkTop.x + branchDirection.x * branchLength * 0.3 * curveFactor,\n        y: trunkTop.y + branchDirection.y * branchLength * 0.2 + verticalBias\n      };\n      const controlPoint2 = {\n        x: trunkTop.x + branchDirection.x * branchLength * 0.7 * curveFactor,\n        y: trunkTop.y + branchDirection.y * branchLength * 0.6 + verticalBias * 0.7\n      };\n\n      // Thickness based on mastery and size with more taper\n      const thickness = 6 * (0.7 + categoryMasteryRatio * 0.5);\n      const mainBranch = {\n        id: `branch-${i}`,\n        category,\n        start: trunkTop,\n        end: endPoint,\n        control1: controlPoint1,\n        control2: controlPoint2,\n        thickness,\n        angle,\n        masteryRatio: categoryMasteryRatio,\n        level: 0,\n        skills: [],\n        subBranches: [],\n        gradientId: `branch-${i}-gradient`\n      };\n\n      // Generate sub-branches\n      const subBranches = generateSubBranches(mainBranch, skills, 3, 1);\n      mainBranch.subBranches = subBranches;\n      mainBranches.push(mainBranch);\n    }\n    return mainBranches;\n  };\n\n  // Generate sub-branches recursively\n  const generateSubBranches = (parentBranch, skills, maxBranches, level) => {\n    if (level > 3 || skills.length === 0) return []; // Limit the recursion depth\n\n    const branches = [];\n    const numBranches = Math.min(maxBranches, skills.length);\n    const skillsPerBranch = Math.ceil(skills.length / numBranches);\n    for (let i = 0; i < numBranches; i++) {\n      // Get skills for this branch\n      const startIdx = i * skillsPerBranch;\n      const endIdx = Math.min(startIdx + skillsPerBranch, skills.length);\n      const branchSkills = skills.slice(startIdx, endIdx);\n      if (branchSkills.length === 0) continue;\n\n      // Calculate mastery for this set of skills\n      const masteredInBranch = branchSkills.filter(s => s.mastered).length;\n      const branchMasteryRatio = masteredInBranch / branchSkills.length;\n\n      // Generate the sub-branch\n      const baseAngle = parentBranch.angle;\n\n      // More natural variation for bonsai-like growth patterns\n      // Traditional bonsai branches often have distinctive angles and arrangements\n\n      // For first-level branches, create more distinct side branches\n      // Deeper levels have more natural, subtle variations\n      let sideAngle;\n      if (level === 1) {\n        // First level branches have more dramatic angles\n        // Growing mostly upward and outward\n        sideAngle = i % 2 === 0 ? randRange(0.3, 0.7) :\n        // Right side\n        randRange(-0.7, -0.3); // Left side\n      } else if (level === 2) {\n        // Second level branches follow a more natural pattern\n        // Some continue the direction of parent, some create smaller offshoots\n        const continueParentDirection = Math.random() > 0.4;\n        if (continueParentDirection) {\n          // Continue in similar direction with small variation\n          sideAngle = randRange(-0.2, 0.2);\n        } else {\n          // Create a side branch\n          sideAngle = i % 2 === 0 ? randRange(0.3, 0.5) : randRange(-0.5, -0.3);\n        }\n      } else {\n        // Deepest branches are smaller and have more subtle variations\n        // These often support leaves at the tips\n        sideAngle = randRange(-0.3, 0.3);\n      }\n\n      // As we go deeper, branches extend more horizontally\n      const levelFactor = level * 0.2;\n      const newAngle = baseAngle + sideAngle * (1 + levelFactor);\n\n      // Calculate branch length (diminishing with level)\n      const scaleFactor = 1 - level * 0.2;\n      // Some length variety based on mastery\n      const lengthVariation = 0.8 + branchMasteryRatio * 0.4;\n      const branchLength = (40 + branchSkills.length * 5) * scaleFactor * lengthVariation;\n\n      // Branch direction\n      const branchDirection = {\n        x: Math.cos(newAngle),\n        y: Math.sin(newAngle)\n      };\n\n      // For sub-branches, start from a point along the parent branch\n      // Higher level branches start further toward the parent's tip\n      const baseT = 0.6 + level * 0.1;\n      const t = baseT + i / numBranches * (0.35 - level * 0.05); // More spread on first level\n\n      const p0 = parentBranch.start;\n      const p1 = parentBranch.control1;\n      const p2 = parentBranch.control2;\n      const p3 = parentBranch.end;\n\n      // Calculate position on the parent's bezier curve\n      const t1 = 1 - t;\n      const t1_2 = t1 * t1;\n      const t1_3 = t1_2 * t1;\n      const t_2 = t * t;\n      const t_3 = t_2 * t;\n      const startX = t1_3 * p0.x + 3 * t1_2 * t * p1.x + 3 * t1 * t_2 * p2.x + t_3 * p3.x;\n      const startY = t1_3 * p0.y + 3 * t1_2 * t * p1.y + 3 * t1 * t_2 * p2.y + t_3 * p3.y;\n      const start = {\n        x: startX,\n        y: startY\n      };\n\n      // End point\n      const end = {\n        x: start.x + branchDirection.x * branchLength,\n        y: start.y + branchDirection.y * branchLength\n      };\n\n      // Control points for natural curve\n      // Add more character to the curve based on level\n      const curveMagnitude = 1 - level * 0.2; // Deeper branches are straighter\n      const curveVariation = randRange(0.7, 1.3); // Add variety\n\n      const control1 = {\n        x: start.x + branchDirection.x * branchLength * 0.3 * curveVariation,\n        y: start.y + branchDirection.y * branchLength * 0.2 - 5 * curveMagnitude\n      };\n      const control2 = {\n        x: start.x + branchDirection.x * branchLength * 0.7 * curveVariation,\n        y: start.y + branchDirection.y * branchLength * 0.6 - 8 * curveMagnitude\n      };\n\n      // Thickness diminishes with level - more dramatic tapering for bonsai look\n      const thicknessScale = 1 - level * 0.28;\n      const thickness = parentBranch.thickness * 0.55 * thicknessScale;\n      const branch = {\n        id: `${parentBranch.id}-sub-${i}`,\n        category: parentBranch.category,\n        start,\n        end,\n        control1,\n        control2,\n        thickness,\n        angle: newAngle,\n        masteryRatio: branchMasteryRatio,\n        level,\n        skills: branchSkills,\n        subBranches: [],\n        gradientId: `${parentBranch.id}-sub-${i}-gradient`\n      };\n\n      // Generate further sub-branches if we haven't reached max level\n      if (level < 3 && branchSkills.length > 1) {\n        const furtherSubBranches = generateSubBranches(branch, branchSkills, Math.max(2, branchSkills.length - 1), level + 1);\n        branch.subBranches = furtherSubBranches;\n      }\n      branches.push(branch);\n    }\n    return branches;\n  };\n\n  // Generate main branches\n  const mainBranches = generateBranches();\n  const allDisplayBranches = getAllBranches(mainBranches);\n\n  // Function to render all branches recursively\n  const renderBranches = branches => {\n    return branches.flatMap((branch, index) => [/*#__PURE__*/_jsxDEV(\"g\", {\n      onMouseEnter: () => setHoveredBranch(branch.id),\n      onMouseLeave: () => setHoveredBranch(null),\n      children: [/*#__PURE__*/_jsxDEV(animated.path, {\n        id: branch.id,\n        d: `\n            M${branch.start.x}, ${branch.start.y}\n            C${branch.control1.x}, ${branch.control1.y}\n             ${branch.control2.x}, ${branch.control2.y}\n             ${branch.end.x}, ${branch.end.y}\n          `,\n        fill: \"none\",\n        stroke: `url(#${branch.gradientId})`,\n        strokeWidth: branch.thickness,\n        strokeLinecap: \"round\",\n        style: {\n          transform: hoveredBranch === branch.id ? 'scale(1.05)' : 'scale(1)',\n          transformOrigin: `${branch.start.x}px ${branch.start.y}px`,\n          transition: 'transform 0.3s ease',\n          ...branchProps\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), branch.skills.map((skill, skillIndex) => {\n        const leaf = generateLeafCoordinates(branch, skill, skillIndex);\n        return /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          id: `leaf-${skill.id}`,\n          x: leaf.x - 20,\n          y: leaf.y - 20,\n          width: 40,\n          height: 40,\n          style: {\n            overflow: 'visible',\n            transition: 'all 0.3s ease',\n            filter: leaf.isRecentlyMastered ? 'url(#leaf-glow)' : 'none',\n            transform: hoveredBranch === branch.id ? 'scale(1.1) rotate(5deg)' : 'scale(1) rotate(0deg)'\n          },\n          onMouseEnter: () => setShowTooltip(skill.id),\n          onMouseLeave: () => setShowTooltip(null),\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"40\",\n            height: \"40\",\n            viewBox: \"-20 -20 40 40\",\n            style: {\n              overflow: 'visible'\n            },\n            children: /*#__PURE__*/_jsxDEV(animated.g, {\n              transform: `rotate(${leaf.angle * 180 / Math.PI})`,\n              style: {\n                ...leafProps\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M0,-2 C3,-10 8,-15 12,-15 C18,-15 20,-8 15,0 C10,8 5,10 0,5 C-5,10 -10,8 -15,0 C-20,-8 -18,-15 -12,-15 C-8,-15 -3,-10 0,-2 Z\",\n                fill: skill.mastered ? `hsl(${leaf.hue}, 70%, 55%)` : `hsl(${leaf.hue}, ${50 + skill.masteryLevel / 2}%, ${70 - skill.masteryLevel / 3}%)`,\n                opacity: skill.mastered ? 1 : 0.6 + skill.masteryLevel / 250,\n                className: leaf.isRecentlyMastered ? 'leaf-pulse' : '',\n                transform: `scale(${leaf.size / 25})`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M0,-2 L0,5 M-8,-8 Q0,-2 8,-8\",\n                fill: \"none\",\n                stroke: skill.mastered ? `rgba(255,255,255,0.5)` : `rgba(255,255,255,0.3)`,\n                strokeWidth: \"0.8\",\n                transform: `scale(${leaf.size / 25})`,\n                opacity: 0.8\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this)\n        }, `leaf-${skill.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 13\n        }, this);\n      }), branch.subBranches && renderBranches(branch.subBranches)]\n    }, branch.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this)]);\n  };\n\n  // Generate leaf coordinates for a branch\n  const generateLeafCoordinates = (branch, skill, index) => {\n    const skills = branch.skills;\n    const totalSkills = skills.length;\n\n    // Get a t-value [0-1] along the curve based on the skill index\n    // For more natural clustering, we'll create small groups of leaves\n    const clusterSize = Math.min(3, totalSkills); // Max 3 leaves per cluster\n    const clusterIndex = Math.floor(index / clusterSize);\n    const clusterPosition = clusterIndex / Math.ceil(totalSkills / clusterSize);\n\n    // Create areas of the branch more likely to have leaves\n    const t = clamp(0.3 + clusterPosition * 0.65, 0.3, 0.95);\n\n    // Add small variation within each cluster\n    const tVariation = index % clusterSize * 0.05 * (Math.random() > 0.5 ? 1 : -1);\n    const finalT = clamp(t + tVariation, 0.3, 0.95);\n\n    // Calculate point on the cubic bezier curve\n    const p0 = branch.start;\n    const p1 = branch.control1;\n    const p2 = branch.control2;\n    const p3 = branch.end;\n\n    // Calculate position on the cubic bezier curve\n    // Formula: P = (1-t)^3 * P0 + 3(1-t)^2 * t * P1 + 3(1-t) * t^2 * P2 + t^3 * P3\n    const t1 = 1 - finalT;\n    const t1_2 = t1 * t1;\n    const t1_3 = t1_2 * t1;\n    const t_2 = finalT * finalT;\n    const t_3 = t_2 * finalT;\n    const x = t1_3 * p0.x + 3 * t1_2 * finalT * p1.x + 3 * t1 * t_2 * p2.x + t_3 * p3.x;\n    const y = t1_3 * p0.y + 3 * t1_2 * finalT * p1.y + 3 * t1 * t_2 * p2.y + t_3 * p3.y;\n\n    // Calculate the curve tangent to decide the leaf direction\n    const tangentX = -3 * t1_2 * p0.x + 3 * t1_2 * p1.x - 6 * t1 * finalT * p1.x + 6 * t1 * finalT * p2.x - 3 * t_2 * p2.x + 3 * t_2 * p3.x;\n    const tangentY = -3 * t1_2 * p0.y + 3 * t1_2 * p1.y - 6 * t1 * finalT * p1.y + 6 * t1 * finalT * p2.y - 3 * t_2 * p2.y + 3 * t_2 * p3.y;\n\n    // Normalize the tangent\n    const tangentLength = Math.sqrt(tangentX * tangentX + tangentY * tangentY);\n    const normalizedTangentX = tangentX / tangentLength;\n    const normalizedTangentY = tangentY / tangentLength;\n\n    // Calculate perpendicular vector\n    const perpX = -normalizedTangentY;\n    const perpY = normalizedTangentX;\n\n    // For clustering, vary the side distribution - leaves in the same cluster should be on similar sides\n    const clusterSide = clusterIndex % 2 === 0 ? 1 : -1;\n    // But still allow some variation within the cluster\n    const side = Math.random() > 0.25 ? clusterSide : -clusterSide;\n\n    // Vary the offset from the branch within the cluster\n    const baseOffset = skill.masteryLevel / 100 * 5 + 5;\n    // Leaves within a cluster should have small variations in offset\n    const offsetVariation = randRange(0.8, 1.2);\n    const offset = baseOffset * offsetVariation;\n\n    // Base position on the curve\n    let baseX = x + side * perpX * offset;\n    let baseY = y + side * perpY * offset;\n\n    // Add some random variation for a more natural look\n    baseX += randRange(-3, 3);\n    baseY += randRange(-3, 3);\n\n    // Calculate leaf size based on mastery level\n    const baseSize = 7;\n    const masteryBonus = skill.mastered ? 4 : skill.masteryLevel / 25;\n    // Add slight variation in leaf size\n    const sizeVariation = randRange(0.9, 1.1);\n    const size = (baseSize + masteryBonus) * sizeVariation;\n\n    // Leaf color hue varies slightly based on mastery and position\n    const hue = 120 + skill.masteryLevel / 5 + randRange(-5, 5);\n    return {\n      x: baseX,\n      y: baseY,\n      size,\n      // Add angle information for leaf orientation with more natural variation\n      angle: Math.atan2(perpY, perpX) + side * Math.PI / 8 + randRange(-Math.PI / 12, Math.PI / 12),\n      isRecentlyMastered: recentlyMastered.includes(skill.id) && skill.mastered,\n      hue\n    };\n  };\n\n  // Animation update\n  useEffect(() => {\n    if (!svgRef.current || mainBranches.length === 0) return;\n\n    // Skip animation if it's the first render\n    if (firstRender) return;\n    if (animation) {\n      // Add the SVG animation\n      const svg = svgRef.current;\n\n      // Animate trunk growing\n      const trunk = svg.querySelector('#tree-trunk');\n      if (trunk) {\n        trunk.classList.add('animate-grow');\n        trunk.addEventListener('animationend', () => {\n          trunk.classList.remove('animate-grow');\n        }, {\n          once: true\n        });\n      }\n\n      // Animate branches\n      mainBranches.forEach((branch, i) => {\n        const branchElement = svg.querySelector(`#${branch.id}`);\n        if (branchElement) {\n          branchElement.classList.add('animate-grow');\n          branchElement.setAttribute('style', `animation-delay: ${i * 0.2}s`);\n          branchElement.addEventListener('animationend', () => {\n            branchElement.classList.remove('animate-grow');\n            branchElement.removeAttribute('style');\n          }, {\n            once: true\n          });\n        }\n      });\n\n      // Animate leaves\n      recentlyMastered.forEach(skillId => {\n        const leafElement = svg.querySelector(`#leaf-${skillId}`);\n        if (leafElement) {\n          leafElement.classList.add('animate-leaf-grow');\n          leafElement.addEventListener('animationend', () => {\n            leafElement.classList.remove('animate-leaf-grow');\n          }, {\n            once: true\n          });\n        }\n      });\n    }\n  }, [animation, mainBranches, recentlyMastered, firstRender]);\n\n  // Render tooltip for skills\n  const renderTooltip = () => {\n    if (!showTooltip) return null;\n    const skill = skills.find(s => s.id === showTooltip);\n    if (!skill) return null;\n\n    // Find leaf position for this skill\n    let tooltipX = 0;\n    let tooltipY = 0;\n    let found = false;\n\n    // Recursive search function\n    const findSkillInBranches = branches => {\n      for (const branch of branches) {\n        const skillIndex = branch.skills.findIndex(s => s.id === skill.id);\n        if (skillIndex >= 0) {\n          const leaf = generateLeafCoordinates(branch, skill, skillIndex);\n          tooltipX = leaf.x;\n          tooltipY = leaf.y;\n          found = true;\n          return true;\n        }\n\n        // Check sub-branches\n        if (branch.subBranches && branch.subBranches.length > 0) {\n          if (findSkillInBranches(branch.subBranches)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    findSkillInBranches(mainBranches);\n    if (!found) return null;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        x: tooltipX - 60,\n        y: tooltipY - 50,\n        width: \"120\",\n        height: \"36\",\n        rx: \"6\",\n        ry: \"6\",\n        fill: \"rgba(255,255,255,0.95)\",\n        stroke: theme.palette.primary.main,\n        strokeWidth: \"1\",\n        filter: \"drop-shadow(0px 2px 3px rgba(0,0,0,0.2))\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: tooltipX,\n        y: tooltipY - 30,\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        fill: theme.palette.text.primary,\n        fontSize: \"10\",\n        fontFamily: \"DM Sans, sans-serif\",\n        children: skill.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 9\n      }, this), skill.mastered && /*#__PURE__*/_jsxDEV(\"text\", {\n        x: tooltipX,\n        y: tooltipY - 40,\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        fill: theme.palette.success.main,\n        fontSize: \"8\",\n        fontFamily: \"DM Sans, sans-serif\",\n        fontWeight: \"bold\",\n        children: \"MASTERED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 11\n      }, this)]\n    }, `tooltip-${skill.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: treeContainerProps,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      className: \"glass-morphism\",\n      sx: {\n        p: 4,\n        mb: 4,\n        position: 'relative',\n        overflow: 'hidden',\n        borderRadius: '8px',\n        background: 'linear-gradient(to bottom, rgba(255,255,255,0.9), rgba(245,250,245,0.9))',\n        boxShadow: '0 8px 32px rgba(31,38,135,0.15)',\n        backdropFilter: 'blur(10px)',\n        border: '1px solid rgba(255,255,255,0.18)',\n        transition: 'all 0.5s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        align: \"center\",\n        sx: {\n          fontFamily: 'DM Sans, sans-serif',\n          fontWeight: 'bold',\n          color: theme.palette.primary.main,\n          mb: 3\n        },\n        children: \"Your Bonsai Learning Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          mb: 3,\n          animation: animation ? 'pulse 2s ease-in-out' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(animated.div, {\n          style: {\n            display: 'inline-block',\n            fontSize: '2.5rem',\n            fontWeight: 'bold',\n            color: theme.palette.primary.main,\n            animation: animation ? 'colorShift 2s ease-in-out' : 'none'\n          },\n          children: percentageProps.number.to(n => `${Math.floor(n)}%`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            fontFamily: 'DM Sans, sans-serif'\n          },\n          children: \"Skills Mastered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          height: 500,\n          position: 'relative',\n          borderRadius: 2,\n          overflow: 'hidden',\n          transition: 'all 0.5s ease'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n            width: '100%',\n            height: '40%',\n            background: 'linear-gradient(to top, rgba(232, 245, 233, 0.7) 0%, rgba(232, 245, 233, 0) 100%)',\n            zIndex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            top: 20,\n            right: 25,\n            width: 100,\n            height: 100,\n            borderRadius: '50%',\n            background: 'radial-gradient(circle, rgba(255,236,179,0.3) 0%, rgba(255,236,179,0) 70%)',\n            zIndex: 1,\n            animation: 'pulse 8s infinite ease-in-out',\n            '@keyframes pulse': {\n              '0%': {\n                opacity: 0.5,\n                transform: 'scale(1)'\n              },\n              '50%': {\n                opacity: 0.8,\n                transform: 'scale(1.1)'\n              },\n              '100%': {\n                opacity: 0.5,\n                transform: 'scale(1)'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            zIndex: 2,\n            transform: `scale(${treeVitality.scale})`,\n            transition: 'transform 1s ease-in-out'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            ref: svgRef,\n            width: \"100%\",\n            height: \"100%\",\n            viewBox: \"0 0 300 500\",\n            overflow: \"visible\",\n            style: {\n              marginTop: '-40px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n              children: [/*#__PURE__*/_jsxDEV(\"radialGradient\", {\n                id: \"potGradient\",\n                cx: \"50%\",\n                cy: \"30%\",\n                r: \"70%\",\n                fx: \"50%\",\n                fy: \"30%\",\n                children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"0%\",\n                  stopColor: \"#8D6E63\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 913,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"90%\",\n                  stopColor: \"#5D4037\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 914,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n                id: \"trunkGradient\",\n                x1: \"0%\",\n                y1: \"0%\",\n                x2: \"100%\",\n                y2: \"0%\",\n                children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"0%\",\n                  stopColor: treeVitality.trunkBaseColor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 918,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"50%\",\n                  stopColor: \"#6D4C41\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 919,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"100%\",\n                  stopColor: treeVitality.trunkBaseColor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 920,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"radialGradient\", {\n                id: \"shadowGradient\",\n                cx: \"50%\",\n                cy: \"50%\",\n                r: \"50%\",\n                fx: \"50%\",\n                fy: \"50%\",\n                children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"0%\",\n                  stopColor: \"rgba(0,0,0,0.2)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 925,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"100%\",\n                  stopColor: \"rgba(0,0,0,0)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 926,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 17\n              }, this), allDisplayBranches.map(branch => /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n                id: branch.gradientId,\n                x1: \"0%\",\n                y1: \"0%\",\n                x2: \"100%\",\n                y2: \"0%\",\n                gradientUnits: \"userSpaceOnUse\",\n                gradientTransform: `rotate(${branch.angle * 180 / Math.PI})`,\n                children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"0%\",\n                  stopColor: \"#6D4C41\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 941,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"100%\",\n                  stopColor: \"#8D6E63\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 942,\n                  columnNumber: 21\n                }, this)]\n              }, branch.gradientId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 931,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"filter\", {\n                id: \"leaf-glow\",\n                x: \"-50%\",\n                y: \"-50%\",\n                width: \"200%\",\n                height: \"200%\",\n                children: [/*#__PURE__*/_jsxDEV(\"feGaussianBlur\", {\n                  stdDeviation: \"2\",\n                  result: \"blur\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 948,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"feComposite\", {\n                  in: \"SourceGraphic\",\n                  in2: \"blur\",\n                  operator: \"over\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 949,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 947,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n                type: \"text/css\",\n                children: `\n                    @keyframes leafGrow {\n                      0% { transform: scale(0); opacity: 0; }\n                      60% { transform: scale(1.3); opacity: 0.9; }\n                      75% { transform: scale(1.1); opacity: 1; }\n                      90% { transform: scale(1.05); opacity: 1; }\n                      100% { transform: scale(1); opacity: 1; }\n                    }\n                    \n                    @keyframes branchGrow {\n                      0% { stroke-dashoffset: 1000; }\n                      80% { stroke-dashoffset: 50; }\n                      100% { stroke-dashoffset: 0; }\n                    }\n                    \n                    @keyframes pulse {\n                      0% { opacity: 0.8; transform: scale(1); filter: drop-shadow(0 0 2px rgba(120, 255, 120, 0.3)); }\n                      50% { opacity: 1; transform: scale(1.1); filter: drop-shadow(0 0 5px rgba(120, 255, 120, 0.5)); }\n                      100% { opacity: 0.8; transform: scale(1); filter: drop-shadow(0 0 2px rgba(120, 255, 120, 0.3)); }\n                    }\n                    \n                    @keyframes float {\n                      0% { transform: translateY(0); }\n                      50% { transform: translateY(-5px); }\n                      100% { transform: translateY(0); }\n                    }\n                    \n                    @keyframes sway {\n                      0% { transform: rotate(0deg); }\n                      25% { transform: rotate(1deg); }\n                      75% { transform: rotate(-1deg); }\n                      100% { transform: rotate(0deg); }\n                    }\n                    \n                    .animate-grow {\n                      stroke-dasharray: 1000;\n                      stroke-dashoffset: 1000;\n                      animation: branchGrow 1.5s ease-in-out forwards;\n                    }\n                    \n                    .animate-leaf-grow {\n                      animation: leafGrow 0.8s ease-out forwards;\n                    }\n                    \n                    .leaf-pulse {\n                      animation: pulse 2s infinite;\n                    }\n                    \n                    .sway-slow {\n                      transform-origin: bottom;\n                      animation: sway 8s ease-in-out infinite;\n                    }\n                    \n                    .sway-medium {\n                      transform-origin: bottom;\n                      animation: sway 6s ease-in-out infinite;\n                    }\n                    \n                    .float-animation {\n                      animation: float 5s ease-in-out infinite;\n                    }\n                  `\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 953,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ellipse\", {\n              cx: \"150\",\n              cy: 385 + treeVitality.potHeight,\n              rx: treeVitality.potWidth * 0.9,\n              ry: \"8\",\n              fill: \"url(#shadowGradient)\",\n              opacity: \"0.5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"float-animation\",\n              children: [/*#__PURE__*/_jsxDEV(\"ellipse\", {\n                cx: \"150\",\n                cy: \"385\",\n                rx: treeVitality.potWidth,\n                ry: \"15\",\n                fill: \"#A1887F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1031,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: `\n                    M${150 - treeVitality.potWidth}, 385 \n                    L${150 - treeVitality.potWidth * 0.8}, ${385 + treeVitality.potHeight}\n                    L${150 + treeVitality.potWidth * 0.8}, ${385 + treeVitality.potHeight}\n                    L${150 + treeVitality.potWidth}, 385\n                  `,\n                fill: \"url(#potGradient)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1038,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"ellipse\", {\n                cx: \"150\",\n                cy: 385 + treeVitality.potHeight,\n                rx: treeVitality.potWidth * 0.8,\n                ry: \"6\",\n                fill: \"#5D4037\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1047,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"ellipse\", {\n                cx: \"150\",\n                cy: \"383\",\n                rx: treeVitality.potWidth * 0.85,\n                ry: \"13\",\n                fill: \"#3E2723\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1056,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"ellipse\", {\n                cx: \"150\",\n                cy: \"382\",\n                rx: treeVitality.potWidth * 0.8,\n                ry: \"12\",\n                fill: \"#33691E\",\n                opacity: \"0.4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1063,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1030,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"sway-slow\",\n              children: [/*#__PURE__*/_jsxDEV(animated.path, {\n                id: \"tree-trunk\",\n                d: `\n                    M${150 - treeVitality.trunkWidth * 0.4}, 385\n                    C${150 - treeVitality.trunkWidth * 0.5}, ${385 - treeVitality.trunkHeight * 0.3}\n                     ${150 + treeVitality.trunkWidth * 0.2}, ${385 - treeVitality.trunkHeight * 0.6}\n                     ${150 + treeVitality.trunkWidth * 0.1}, ${385 - treeVitality.trunkHeight * 0.7}\n                    S${150 + treeVitality.trunkWidth * 0.05}, ${385 - treeVitality.trunkHeight * 0.85}\n                     150, ${385 - treeVitality.trunkHeight}\n                  `,\n                fill: \"none\",\n                stroke: \"url(#trunkGradient)\",\n                strokeWidth: treeVitality.trunkWidth,\n                strokeLinecap: \"round\",\n                style: trunkProps\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1075,\n                columnNumber: 17\n              }, this), renderBranches(mainBranches)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1074,\n              columnNumber: 15\n            }, this), renderTooltip()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 902,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            bottom: 15,\n            right: 15,\n            background: 'rgba(255,255,255,0.9)',\n            p: 1.5,\n            borderRadius: '8px',\n            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n            backdropFilter: 'blur(8px)',\n            border: '1px solid rgba(255,255,255,0.5)',\n            zIndex: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            display: \"block\",\n            sx: {\n              fontWeight: 'bold',\n              mb: 0.5,\n              fontFamily: 'DM Sans, sans-serif'\n            },\n            children: \"Your Learning Growth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            display: \"block\",\n            sx: {\n              fontFamily: 'DM Sans, sans-serif'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              component: \"span\",\n              sx: {\n                display: 'inline-block',\n                width: 10,\n                height: 10,\n                borderRadius: '50%',\n                backgroundColor: theme.palette.primary.main,\n                mr: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1132,\n              columnNumber: 15\n            }, this), \"Mastered Skills\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            display: \"block\",\n            sx: {\n              fontFamily: 'DM Sans, sans-serif'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              component: \"span\",\n              sx: {\n                display: 'inline-block',\n                width: 10,\n                height: 10,\n                borderRadius: '50%',\n                backgroundColor: treeVitality.leafBaseColor,\n                opacity: 0.7,\n                mr: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 15\n            }, this), \"Skills In Progress\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mt: 2,\n          fontFamily: 'DM Sans, sans-serif',\n          animation: animation ? 'fadeIn 1s ease-in-out' : 'none'\n        },\n        children: [\"You've mastered \", masteredSkills.length, \" skills so far! Keep growing!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 802,\n    columnNumber: 5\n  }, this);\n};\n_s(BonsaiTree, \"qPAci9LYdxCzIvWnm/IPpP+qxn0=\", false, function () {\n  return [useTheme, useSpringRef, useSpringRef, useSpringRef, useSpring, useSpring, useSpring, useSpring, useChain, useSpring];\n});\n_c = BonsaiTree;\nexport default BonsaiTree;\nvar _c;\n$RefreshReg$(_c, \"BonsaiTree\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Box","Typography","Paper","useTheme","useSpring","animated","config","useSpringRef","useChain","jsxDEV","_jsxDEV","lerp","a","b","t","clamp","num","min","max","Math","randRange","random","getAllBranches","branches","all_branches","branch","push","subBranches","length","concat","BonsaiTree","skills","totalSkills","showGrowthAnimation","_s","theme","svgRef","recentlyMastered","setRecentlyMastered","showTooltip","setShowTooltip","animation","setAnimation","firstRender","setFirstRender","hoveredBranch","setHoveredBranch","prevSkillsRef","skillsByCategory","reduce","acc","skill","category","prevMasteredIds","current","filter","mastered","map","id","currentMasteredIds","newlyMastered","includes","timer","setTimeout","clearTimeout","masteredSkills","masteryPercentage","round","trunkSpringRef","branchSpringRef","leafSpringRef","percentageProps","number","from","tension","friction","delay","trunkProps","ref","strokeDashoffset","opacity","to","duration","branchProps","leafProps","scale","treeContainerProps","transform","gentle","treeVitality","trunkBaseColor","trunkWidth","trunkHeight","potWidth","potHeight","leafBaseColor","generateBranches","categories","Object","keys","mainBranches","trunkEndY","trunkTop","x","y","totalCategories","baseAngles","PI","i","position","angle","baseAngle","categorySkills","masteredInCategory","s","categoryMasteryRatio","minLength","maxLength","branchLength","branchDirection","cos","sin","endPoint","curveFactor","verticalBias","controlPoint1","controlPoint2","thickness","mainBranch","start","end","control1","control2","masteryRatio","level","gradientId","generateSubBranches","parentBranch","maxBranches","numBranches","skillsPerBranch","ceil","startIdx","endIdx","branchSkills","slice","masteredInBranch","branchMasteryRatio","sideAngle","continueParentDirection","levelFactor","newAngle","scaleFactor","lengthVariation","baseT","p0","p1","p2","p3","t1","t1_2","t1_3","t_2","t_3","startX","startY","curveMagnitude","curveVariation","thicknessScale","furtherSubBranches","allDisplayBranches","renderBranches","flatMap","index","onMouseEnter","onMouseLeave","children","path","d","fill","stroke","strokeWidth","strokeLinecap","style","transformOrigin","transition","fileName","_jsxFileName","lineNumber","columnNumber","skillIndex","leaf","generateLeafCoordinates","width","height","overflow","isRecentlyMastered","viewBox","g","hue","masteryLevel","className","size","clusterSize","clusterIndex","floor","clusterPosition","tVariation","finalT","tangentX","tangentY","tangentLength","sqrt","normalizedTangentX","normalizedTangentY","perpX","perpY","clusterSide","side","baseOffset","offsetVariation","offset","baseX","baseY","baseSize","masteryBonus","sizeVariation","atan2","svg","trunk","querySelector","classList","add","addEventListener","remove","once","forEach","branchElement","setAttribute","removeAttribute","skillId","leafElement","renderTooltip","find","tooltipX","tooltipY","found","findSkillInBranches","findIndex","rx","ry","palette","primary","main","textAnchor","dominantBaseline","text","fontSize","fontFamily","name","success","fontWeight","div","elevation","sx","p","mb","borderRadius","background","boxShadow","backdropFilter","border","variant","gutterBottom","align","color","textAlign","display","n","bottom","left","zIndex","top","right","marginTop","cx","cy","r","fx","fy","stopColor","x1","y1","x2","y2","gradientUnits","gradientTransform","stdDeviation","result","in","in2","operator","type","component","backgroundColor","mr","mt","_c","$RefreshReg$"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, ReactElement } from 'react';\nimport { Box, Typography, Paper, useTheme, Tooltip } from '@mui/material';\nimport { useSpring, animated, config, useSpringRef, useChain } from 'react-spring';\n\ninterface Skill {\n  id: string;\n  name: string;\n  category: string;\n  mastered: boolean;\n  masteryLevel: number;\n}\n\ninterface BonsaiTreeProps {\n  skills: Skill[];\n  totalSkills: number;\n  showGrowthAnimation?: boolean;\n}\n\n// Helper functions\nconst lerp = (a: number, b: number, t: number) => a * (1 - t) + b * t;\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\nconst randRange = (min: number, max: number) => Math.random() * (max - min) + min;\n\n// Helper function to get all branches (main and sub-branches) flattened into a single array\nconst getAllBranches = (branches: Branch[]): Branch[] => {\n  let all_branches: Branch[] = [];\n  for (const branch of branches) {\n    all_branches.push(branch);\n    if (branch.subBranches && branch.subBranches.length > 0) {\n      all_branches = all_branches.concat(getAllBranches(branch.subBranches));\n    }\n  }\n  return all_branches;\n};\n\n// Define interfaces for branch and leaf objects\ninterface BranchPoint {\n  x: number;\n  y: number;\n}\n\ninterface Branch {\n  id: string;\n  category: string;\n  start: BranchPoint;\n  end: BranchPoint;\n  control1: BranchPoint;\n  control2: BranchPoint;\n  thickness: number;\n  angle: number;\n  masteryRatio: number;\n  level: number;\n  skills: Skill[];\n  subBranches: Branch[];\n  gradientId: string;\n}\n\ninterface LeafCoordinates {\n  x: number;\n  y: number;\n  size: number;\n  angle: number;\n  isRecentlyMastered: boolean;\n  hue: number;\n}\n\nconst BonsaiTree: React.FC<BonsaiTreeProps> = ({ skills, totalSkills, showGrowthAnimation = false }): ReactElement => {\n  const theme = useTheme();\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [recentlyMastered, setRecentlyMastered] = useState<string[]>([]);\n  const [showTooltip, setShowTooltip] = useState<string | null>(null);\n  const [animation, setAnimation] = useState<boolean>(false);\n  const [firstRender, setFirstRender] = useState<boolean>(true);\n  const [hoveredBranch, setHoveredBranch] = useState<string | null>(null);\n  \n  // Reference to track previous skills for comparison\n  const prevSkillsRef = useRef<Skill[]>([]);\n  \n  // Group skills by category\n  const skillsByCategory = skills.reduce((acc, skill) => {\n      if (!acc[skill.category]) {\n        acc[skill.category] = [];\n      }\n      acc[skill.category].push(skill);\n      return acc;\n    }, {} as Record<string, Skill[]>);\n\n  // Track skills that were recently mastered\n  useEffect(() => {\n    // Only run effect if not first render\n    if (!firstRender) {\n      const prevMasteredIds = prevSkillsRef.current\n        .filter(skill => skill.mastered)\n        .map(skill => skill.id);\n      \n      const currentMasteredIds = skills\n        .filter(skill => skill.mastered)\n        .map(skill => skill.id);\n      \n      // Find newly mastered skills\n      const newlyMastered = currentMasteredIds.filter(id => !prevMasteredIds.includes(id));\n      \n      if (newlyMastered.length > 0) {\n        setRecentlyMastered(newlyMastered);\n        setAnimation(true);\n        \n        // Reset animation state after animation completes\n        const timer = setTimeout(() => {\n          setAnimation(false);\n        }, 3000);\n        \n        return () => clearTimeout(timer);\n      }\n    } else {\n      setFirstRender(false);\n    }\n    // Update reference\n    prevSkillsRef.current = [...skills];\n  }, [skills, firstRender]);\n  \n  // Calculate mastery percentage\n  const masteredSkills = skills.filter(skill => skill.mastered);\n  const masteryPercentage = Math.round((masteredSkills.length / totalSkills) * 100);\n  \n  // Spring animation refs for chaining\n  const trunkSpringRef = useSpringRef();\n  const branchSpringRef = useSpringRef();\n  const leafSpringRef = useSpringRef();\n\n  // Spring animations\n  const percentageProps = useSpring({\n    number: masteryPercentage,\n    from: { number: 0 },\n    config: { tension: 120, friction: 14 },\n    delay: 300,\n  });\n\n  const trunkProps = useSpring({\n    ref: trunkSpringRef,\n    from: { strokeDashoffset: 1000, opacity: 0.7 },\n    to: { strokeDashoffset: 0, opacity: 1 },\n    config: { tension: 80, friction: 15, duration: 1500 },\n  });\n\n  const branchProps = useSpring({\n    ref: branchSpringRef,\n    from: { strokeDashoffset: 1000, opacity: 0.5 },\n    to: { strokeDashoffset: 0, opacity: 1 },\n    config: { tension: 70, friction: 14, duration: 1200 },\n  });\n\n  const leafProps = useSpring({\n    ref: leafSpringRef,\n    from: { scale: 0, opacity: 0 },\n    to: { scale: 1, opacity: 1 },\n    config: { tension: 200, friction: 20, duration: 800 },\n  });\n\n  // Chain the animations\n  useChain(\n    firstRender \n      ? [trunkSpringRef, branchSpringRef, leafSpringRef] \n      : [], \n    firstRender \n      ? [0, 0.5, 0.8] \n      : []\n  );\n\n  const treeContainerProps = useSpring({\n    from: { opacity: 0, transform: 'translateY(30px)' },\n    to: { opacity: 1, transform: 'translateY(0px)' },\n    config: config.gentle,\n  });\n\n  // Calculate tree health/vitality based on mastery\n  const treeVitality = {\n    // Trunk color darkens as tree matures\n    trunkBaseColor: masteryPercentage < 30 \n      ? '#6d4c41' // Lighter brown for younger tree\n      : masteryPercentage < 70\n        ? '#5d4037' // Medium brown\n        : '#4e342e', // Dark rich brown for mature tree\n        \n    // Set trunk dimensions based on growth\n    trunkWidth: clamp(30 + (masteryPercentage / 4), 30, 45),\n    trunkHeight: clamp(160 + masteryPercentage, 160, 250),\n    \n    // Pot style based on growth\n    potWidth: clamp(100 + (masteryPercentage / 3), 100, 120),\n    potHeight: clamp(45 + (masteryPercentage / 10), 45, 55),\n    \n    // Leaf colors become more vibrant with mastery\n    leafBaseColor: masteryPercentage < 30 \n      ? '#88d498' // Light green for low mastery\n      : masteryPercentage < 60 \n        ? '#6bcca1' // Medium green\n        : '#4fc3a8', // Vibrant green for high mastery\n    \n    // Overall size scaling factor\n    scale: clamp(0.85 + (masteryPercentage / 100), 0.85, 1.25)\n  };\n\n  // Generate branches with a more natural, realistic pattern\n  const generateBranches = (): Branch[] => {\n    const categories = Object.keys(skillsByCategory);\n    const mainBranches: Branch[] = [];\n    \n    // If no categories, return empty array\n    if (categories.length === 0) return mainBranches;\n    \n    // Determine the main trunk end point (where it starts to curve)\n    const trunkEndY = 300 - treeVitality.trunkHeight * 0.8;\n    const trunkTop = { x: 150, y: trunkEndY };\n    \n    // Main branch distribution angles based on number of categories\n    const totalCategories = categories.length;\n    const baseAngles = [];\n    \n    if (totalCategories === 1) {\n      // Single category - branch goes mostly upward\n      baseAngles.push(-Math.PI/2);\n    } else if (totalCategories === 2) {\n      // Two categories - split left and right with asymmetry\n      baseAngles.push(-Math.PI/2 - 0.5);\n      baseAngles.push(-Math.PI/2 + 0.3);\n    } else {\n      // Distribute branches in a natural, asymmetric pattern\n      // Traditional bonsai often has branches at Golden ratio points\n      // We'll create a more natural distribution with intentional gaps\n      \n      // First create a basic distribution\n      for (let i = 0; i < totalCategories; i++) {\n        // Introduce some natural clustering rather than even distribution\n        const position = i / (totalCategories - 1);\n        // Apply non-linear transformation for more natural spacing\n        let angle;\n        if (position < 0.4) {\n          // Cluster more branches on the left side (traditional bonsai aesthetic)\n          angle = lerp(-Math.PI/2 - 0.9, -Math.PI/2 - 0.2, position / 0.4);\n        } else if (position > 0.6) {\n          // Some branches on the right\n          angle = lerp(-Math.PI/2 + 0.1, -Math.PI/2 + 0.7, (position - 0.6) / 0.4);\n        } else {\n          // Few branches directly upward\n          angle = lerp(-Math.PI/2 - 0.2, -Math.PI/2 + 0.1, (position - 0.4) / 0.2);\n        }\n        baseAngles.push(angle);\n      }\n    }\n    \n    // Create main branches\n    for (let i = 0; i < categories.length; i++) {\n      const category = categories[i];\n      const skills = skillsByCategory[category];\n      \n      // Skip empty categories\n      if (!skills || skills.length === 0) continue;\n      \n      // Calculate angle with small random variation\n      const baseAngle = baseAngles[i];\n      const angle = baseAngle + randRange(-0.15, 0.15);\n      \n      // Calculate mastery for this category\n      const categorySkills = skillsByCategory[category] || [];\n      const masteredInCategory = categorySkills.filter(s => s.mastered).length;\n      const categoryMasteryRatio = categorySkills.length > 0 \n        ? masteredInCategory / categorySkills.length \n        : 0;\n      \n      // Set branch length based on category mastery and skill count\n      const minLength = 80 + (skills.length * 3);\n      const maxLength = 120 + (skills.length * 4);\n      const branchLength = lerp(minLength, maxLength, categoryMasteryRatio);\n      \n      // Branch direction vector\n      const branchDirection = { \n        x: Math.cos(angle),\n        y: Math.sin(angle)\n      };\n      \n      // Branch end point\n      const endPoint = {\n        x: trunkTop.x + branchDirection.x * branchLength,\n        y: trunkTop.y + branchDirection.y * branchLength\n      };\n      \n      // Control points for natural curve - more variation for realistic bonsai shapes\n      // Bonsai branches often have more dramatic curves and character\n      const curveFactor = randRange(0.8, 1.2); // Variation in curve intensity\n      const verticalBias = randRange(-20, -5); // Varied vertical offset for natural curves\n      \n      const controlPoint1 = {\n        x: trunkTop.x + branchDirection.x * branchLength * 0.3 * curveFactor,\n        y: trunkTop.y + branchDirection.y * branchLength * 0.2 + verticalBias\n      };\n      \n      const controlPoint2 = {\n        x: trunkTop.x + branchDirection.x * branchLength * 0.7 * curveFactor, \n        y: trunkTop.y + branchDirection.y * branchLength * 0.6 + verticalBias * 0.7\n      };\n      \n      // Thickness based on mastery and size with more taper\n      const thickness = 6 * (0.7 + (categoryMasteryRatio * 0.5));\n      \n      const mainBranch: Branch = {\n        id: `branch-${i}`,\n        category,\n        start: trunkTop,\n        end: endPoint,\n        control1: controlPoint1,\n        control2: controlPoint2,\n        thickness,\n        angle,\n        masteryRatio: categoryMasteryRatio,\n        level: 0,\n        skills: [],\n        subBranches: [],\n        gradientId: `branch-${i}-gradient`,\n      };\n      \n      // Generate sub-branches\n      const subBranches = generateSubBranches(mainBranch, skills, 3, 1);\n      mainBranch.subBranches = subBranches;\n      \n      mainBranches.push(mainBranch);\n    }\n    \n    return mainBranches;\n  };\n  \n  // Generate sub-branches recursively\n  const generateSubBranches = (parentBranch: Branch, skills: Skill[], maxBranches: number, level: number): Branch[] => {\n    if (level > 3 || skills.length === 0) return []; // Limit the recursion depth\n    \n    const branches: Branch[] = [];\n    const numBranches = Math.min(maxBranches, skills.length);\n    const skillsPerBranch = Math.ceil(skills.length / numBranches);\n    \n    for (let i = 0; i < numBranches; i++) {\n      // Get skills for this branch\n      const startIdx = i * skillsPerBranch;\n      const endIdx = Math.min(startIdx + skillsPerBranch, skills.length);\n      const branchSkills = skills.slice(startIdx, endIdx);\n      \n      if (branchSkills.length === 0) continue;\n      \n      // Calculate mastery for this set of skills\n      const masteredInBranch = branchSkills.filter(s => s.mastered).length;\n      const branchMasteryRatio = masteredInBranch / branchSkills.length;\n      \n      // Generate the sub-branch\n      const baseAngle = parentBranch.angle;\n      \n      // More natural variation for bonsai-like growth patterns\n      // Traditional bonsai branches often have distinctive angles and arrangements\n      \n      // For first-level branches, create more distinct side branches\n      // Deeper levels have more natural, subtle variations\n      let sideAngle;\n      if (level === 1) {\n        // First level branches have more dramatic angles\n        // Growing mostly upward and outward\n        sideAngle = i % 2 === 0 ? \n          randRange(0.3, 0.7) : // Right side\n          randRange(-0.7, -0.3); // Left side\n      } else if (level === 2) {\n        // Second level branches follow a more natural pattern\n        // Some continue the direction of parent, some create smaller offshoots\n        const continueParentDirection = Math.random() > 0.4;\n        if (continueParentDirection) {\n          // Continue in similar direction with small variation\n          sideAngle = randRange(-0.2, 0.2);\n        } else {\n          // Create a side branch\n          sideAngle = i % 2 === 0 ? \n            randRange(0.3, 0.5) : \n            randRange(-0.5, -0.3);\n        }\n      } else {\n        // Deepest branches are smaller and have more subtle variations\n        // These often support leaves at the tips\n        sideAngle = randRange(-0.3, 0.3);\n      }\n      \n      // As we go deeper, branches extend more horizontally\n      const levelFactor = level * 0.2;\n      const newAngle = baseAngle + sideAngle * (1 + levelFactor);\n      \n      // Calculate branch length (diminishing with level)\n      const scaleFactor = 1 - (level * 0.2);\n      // Some length variety based on mastery\n      const lengthVariation = 0.8 + (branchMasteryRatio * 0.4);\n      const branchLength = (40 + (branchSkills.length * 5)) * scaleFactor * lengthVariation;\n      \n      // Branch direction\n      const branchDirection = {\n        x: Math.cos(newAngle),\n        y: Math.sin(newAngle)\n      };\n      \n      // For sub-branches, start from a point along the parent branch\n      // Higher level branches start further toward the parent's tip\n      const baseT = 0.6 + (level * 0.1);\n      const t = baseT + (i / numBranches) * (0.35 - (level * 0.05)); // More spread on first level\n      \n      const p0 = parentBranch.start;\n      const p1 = parentBranch.control1;\n      const p2 = parentBranch.control2;\n      const p3 = parentBranch.end;\n      \n      // Calculate position on the parent's bezier curve\n      const t1 = 1 - t;\n      const t1_2 = t1 * t1;\n      const t1_3 = t1_2 * t1;\n      const t_2 = t * t;\n      const t_3 = t_2 * t;\n      \n      const startX = t1_3 * p0.x + 3 * t1_2 * t * p1.x + 3 * t1 * t_2 * p2.x + t_3 * p3.x;\n      const startY = t1_3 * p0.y + 3 * t1_2 * t * p1.y + 3 * t1 * t_2 * p2.y + t_3 * p3.y;\n      const start = { x: startX, y: startY };\n      \n      // End point\n      const end = {\n        x: start.x + branchDirection.x * branchLength,\n        y: start.y + branchDirection.y * branchLength\n      };\n      \n      // Control points for natural curve\n      // Add more character to the curve based on level\n      const curveMagnitude = 1 - (level * 0.2); // Deeper branches are straighter\n      const curveVariation = randRange(0.7, 1.3); // Add variety\n      \n      const control1 = {\n        x: start.x + branchDirection.x * branchLength * 0.3 * curveVariation,\n        y: start.y + branchDirection.y * branchLength * 0.2 - (5 * curveMagnitude)\n      };\n      \n      const control2 = {\n        x: start.x + branchDirection.x * branchLength * 0.7 * curveVariation,\n        y: start.y + branchDirection.y * branchLength * 0.6 - (8 * curveMagnitude)\n      };\n      \n      // Thickness diminishes with level - more dramatic tapering for bonsai look\n      const thicknessScale = 1 - (level * 0.28);\n      const thickness = parentBranch.thickness * 0.55 * thicknessScale;\n      \n      const branch: Branch = {\n        id: `${parentBranch.id}-sub-${i}`,\n        category: parentBranch.category,\n        start,\n        end,\n        control1,\n        control2,\n        thickness,\n        angle: newAngle,\n        masteryRatio: branchMasteryRatio,\n        level,\n        skills: branchSkills,\n        subBranches: [],\n        gradientId: `${parentBranch.id}-sub-${i}-gradient`,\n      };\n      \n      // Generate further sub-branches if we haven't reached max level\n      if (level < 3 && branchSkills.length > 1) {\n        const furtherSubBranches = generateSubBranches(\n          branch, \n          branchSkills, \n          Math.max(2, branchSkills.length - 1), \n          level + 1\n        );\n        branch.subBranches = furtherSubBranches;\n      }\n      \n      branches.push(branch);\n    }\n    \n    return branches;\n  };\n  \n  // Generate main branches\n  const mainBranches = generateBranches();\n  const allDisplayBranches = getAllBranches(mainBranches);\n\n  // Function to render all branches recursively\n  const renderBranches = (branches: Branch[]) => {\n    return branches.flatMap((branch, index) => [\n      <g \n        key={branch.id} \n        onMouseEnter={() => setHoveredBranch(branch.id)}\n        onMouseLeave={() => setHoveredBranch(null)}\n      >\n        <animated.path\n          id={branch.id}\n          d={`\n            M${branch.start.x}, ${branch.start.y}\n            C${branch.control1.x}, ${branch.control1.y}\n             ${branch.control2.x}, ${branch.control2.y}\n             ${branch.end.x}, ${branch.end.y}\n          `}\n          fill=\"none\"\n          stroke={`url(#${branch.gradientId})`}\n          strokeWidth={branch.thickness}\n          strokeLinecap=\"round\"\n          style={{\n            transform: hoveredBranch === branch.id \n              ? 'scale(1.05)' \n              : 'scale(1)',\n            transformOrigin: `${branch.start.x}px ${branch.start.y}px`,\n            transition: 'transform 0.3s ease',\n            ...branchProps\n          }}\n        />\n        \n        {/* Skills as leaves */}\n        {branch.skills.map((skill, skillIndex) => {\n          const leaf = generateLeafCoordinates(branch, skill, skillIndex);\n          return (\n            <foreignObject\n              key={`leaf-${skill.id}`}\n              id={`leaf-${skill.id}`}\n              x={leaf.x - 20}\n              y={leaf.y - 20}\n              width={40}\n              height={40}\n              style={{\n                overflow: 'visible',\n                transition: 'all 0.3s ease',\n                filter: leaf.isRecentlyMastered ? 'url(#leaf-glow)' : 'none',\n                transform: hoveredBranch === branch.id \n                  ? 'scale(1.1) rotate(5deg)' \n                  : 'scale(1) rotate(0deg)',\n              }}\n              onMouseEnter={() => setShowTooltip(skill.id)}\n              onMouseLeave={() => setShowTooltip(null)}\n            >\n              <svg \n                width=\"40\" \n                height=\"40\" \n                viewBox=\"-20 -20 40 40\"\n                style={{\n                  overflow: 'visible',\n                }}\n              >\n                <animated.g \n                  transform={`rotate(${leaf.angle * 180 / Math.PI})`}\n                  style={{\n                    ...leafProps\n                  }}\n                >\n                  <path\n                    d=\"M0,-2 C3,-10 8,-15 12,-15 C18,-15 20,-8 15,0 C10,8 5,10 0,5 C-5,10 -10,8 -15,0 C-20,-8 -18,-15 -12,-15 C-8,-15 -3,-10 0,-2 Z\"\n                    fill={skill.mastered \n                      ? `hsl(${leaf.hue}, 70%, 55%)` \n                      : `hsl(${leaf.hue}, ${50 + skill.masteryLevel / 2}%, ${70 - skill.masteryLevel / 3}%)`\n                    }\n                    opacity={skill.mastered ? 1 : 0.6 + (skill.masteryLevel / 250)}\n                    className={leaf.isRecentlyMastered ? 'leaf-pulse' : ''}\n                    transform={`scale(${leaf.size / 25})`}\n                  />\n                  {/* Leaf vein */}\n                  <path\n                    d=\"M0,-2 L0,5 M-8,-8 Q0,-2 8,-8\"\n                    fill=\"none\"\n                    stroke={skill.mastered \n                      ? `rgba(255,255,255,0.5)` \n                      : `rgba(255,255,255,0.3)`\n                    }\n                    strokeWidth=\"0.8\"\n                    transform={`scale(${leaf.size / 25})`}\n                    opacity={0.8}\n                  />\n                </animated.g>\n              </svg>\n            </foreignObject>\n          );\n        })}\n        \n        {/* Render sub-branches recursively */}\n        {branch.subBranches && renderBranches(branch.subBranches)}\n      </g>\n    ]);\n  };\n\n  // Generate leaf coordinates for a branch\n  const generateLeafCoordinates = (branch: Branch, skill: Skill, index: number): LeafCoordinates => {\n    const skills = branch.skills;\n    const totalSkills = skills.length;\n    \n    // Get a t-value [0-1] along the curve based on the skill index\n    // For more natural clustering, we'll create small groups of leaves\n    const clusterSize = Math.min(3, totalSkills); // Max 3 leaves per cluster\n    const clusterIndex = Math.floor(index / clusterSize);\n    const clusterPosition = clusterIndex / Math.ceil(totalSkills / clusterSize);\n    \n    // Create areas of the branch more likely to have leaves\n    const t = clamp(0.3 + clusterPosition * 0.65, 0.3, 0.95);\n    \n    // Add small variation within each cluster\n    const tVariation = (index % clusterSize) * 0.05 * (Math.random() > 0.5 ? 1 : -1);\n    const finalT = clamp(t + tVariation, 0.3, 0.95);\n\n    // Calculate point on the cubic bezier curve\n    const p0 = branch.start;\n    const p1 = branch.control1;\n    const p2 = branch.control2;\n    const p3 = branch.end;\n    \n    // Calculate position on the cubic bezier curve\n    // Formula: P = (1-t)^3 * P0 + 3(1-t)^2 * t * P1 + 3(1-t) * t^2 * P2 + t^3 * P3\n    const t1 = 1 - finalT;\n    const t1_2 = t1 * t1;\n    const t1_3 = t1_2 * t1;\n    const t_2 = finalT * finalT;\n    const t_3 = t_2 * finalT;\n    \n    const x = t1_3 * p0.x + 3 * t1_2 * finalT * p1.x + 3 * t1 * t_2 * p2.x + t_3 * p3.x;\n    const y = t1_3 * p0.y + 3 * t1_2 * finalT * p1.y + 3 * t1 * t_2 * p2.y + t_3 * p3.y;\n    \n    // Calculate the curve tangent to decide the leaf direction\n    const tangentX = -3 * t1_2 * p0.x + 3 * t1_2 * p1.x - 6 * t1 * finalT * p1.x + \n                6 * t1 * finalT * p2.x - 3 * t_2 * p2.x + 3 * t_2 * p3.x;\n    const tangentY = -3 * t1_2 * p0.y + 3 * t1_2 * p1.y - 6 * t1 * finalT * p1.y + \n                6 * t1 * finalT * p2.y - 3 * t_2 * p2.y + 3 * t_2 * p3.y;\n    \n    // Normalize the tangent\n    const tangentLength = Math.sqrt(tangentX * tangentX + tangentY * tangentY);\n    const normalizedTangentX = tangentX / tangentLength;\n    const normalizedTangentY = tangentY / tangentLength;\n    \n    // Calculate perpendicular vector\n    const perpX = -normalizedTangentY;\n    const perpY = normalizedTangentX;\n    \n    // For clustering, vary the side distribution - leaves in the same cluster should be on similar sides\n    const clusterSide = (clusterIndex % 2 === 0) ? 1 : -1;\n    // But still allow some variation within the cluster\n    const side = (Math.random() > 0.25) ? clusterSide : -clusterSide;\n    \n    // Vary the offset from the branch within the cluster\n    const baseOffset = ((skill.masteryLevel / 100) * 5) + 5;\n    // Leaves within a cluster should have small variations in offset\n    const offsetVariation = randRange(0.8, 1.2);\n    const offset = baseOffset * offsetVariation;\n    \n    // Base position on the curve\n    let baseX = x + side * perpX * offset;\n    let baseY = y + side * perpY * offset;\n    \n    // Add some random variation for a more natural look\n    baseX += randRange(-3, 3);\n    baseY += randRange(-3, 3);\n    \n    // Calculate leaf size based on mastery level\n    const baseSize = 7;\n    const masteryBonus = skill.mastered ? 4 : (skill.masteryLevel / 25);\n    // Add slight variation in leaf size\n    const sizeVariation = randRange(0.9, 1.1);\n    const size = (baseSize + masteryBonus) * sizeVariation;\n\n    // Leaf color hue varies slightly based on mastery and position\n    const hue = 120 + (skill.masteryLevel / 5) + randRange(-5, 5);\n    \n    return {\n      x: baseX,\n      y: baseY,\n      size,\n      // Add angle information for leaf orientation with more natural variation\n      angle: Math.atan2(perpY, perpX) + (side * Math.PI / 8) + randRange(-Math.PI / 12, Math.PI / 12),\n      isRecentlyMastered: recentlyMastered.includes(skill.id) && skill.mastered,\n      hue\n    };\n  };\n  \n  // Animation update\n  useEffect(() => {\n    if (!svgRef.current || mainBranches.length === 0) return;\n    \n    // Skip animation if it's the first render\n    if (firstRender) return;\n\n    if (animation) {\n      // Add the SVG animation\n      const svg = svgRef.current;\n      \n      // Animate trunk growing\n      const trunk = svg.querySelector('#tree-trunk');\n      if (trunk) {\n        trunk.classList.add('animate-grow');\n        trunk.addEventListener('animationend', () => {\n          trunk.classList.remove('animate-grow');\n        }, { once: true });\n      }\n      \n      // Animate branches\n      mainBranches.forEach((branch, i) => {\n        const branchElement = svg.querySelector(`#${branch.id}`);\n        if (branchElement) {\n          branchElement.classList.add('animate-grow');\n          branchElement.setAttribute('style', `animation-delay: ${i * 0.2}s`);\n          branchElement.addEventListener('animationend', () => {\n            branchElement.classList.remove('animate-grow');\n            branchElement.removeAttribute('style');\n          }, { once: true });\n        }\n      });\n      \n      // Animate leaves\n      recentlyMastered.forEach(skillId => {\n        const leafElement = svg.querySelector(`#leaf-${skillId}`);\n        if (leafElement) {\n          leafElement.classList.add('animate-leaf-grow');\n          leafElement.addEventListener('animationend', () => {\n            leafElement.classList.remove('animate-leaf-grow');\n          }, { once: true });\n        }\n      });\n    }\n  }, [animation, mainBranches, recentlyMastered, firstRender]);\n\n  // Render tooltip for skills\n  const renderTooltip = () => {\n    if (!showTooltip) return null;\n    \n    const skill = skills.find(s => s.id === showTooltip);\n    if (!skill) return null;\n    \n    // Find leaf position for this skill\n    let tooltipX = 0;\n    let tooltipY = 0;\n    let found = false;\n    \n    // Recursive search function\n    const findSkillInBranches = (branches: Branch[]) => {\n      for (const branch of branches) {\n        const skillIndex = branch.skills.findIndex(s => s.id === skill.id);\n        if (skillIndex >= 0) {\n          const leaf = generateLeafCoordinates(branch, skill, skillIndex);\n          tooltipX = leaf.x;\n          tooltipY = leaf.y;\n          found = true;\n          return true;\n        }\n        \n        // Check sub-branches\n        if (branch.subBranches && branch.subBranches.length > 0) {\n          if (findSkillInBranches(branch.subBranches)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    \n    findSkillInBranches(mainBranches);\n    \n    if (!found) return null;\n    \n    return (\n      <g key={`tooltip-${skill.id}`}>\n        <rect\n          x={tooltipX - 60}\n          y={tooltipY - 50}\n          width=\"120\"\n          height=\"36\"\n          rx=\"6\"\n          ry=\"6\"\n          fill=\"rgba(255,255,255,0.95)\"\n          stroke={theme.palette.primary.main}\n          strokeWidth=\"1\"\n          filter=\"drop-shadow(0px 2px 3px rgba(0,0,0,0.2))\"\n        />\n        <text\n          x={tooltipX}\n          y={tooltipY - 30}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n          fill={theme.palette.text.primary}\n          fontSize=\"10\"\n          fontFamily=\"DM Sans, sans-serif\"\n        >\n          {skill.name}\n        </text>\n        {skill.mastered && (\n          <text\n            x={tooltipX}\n            y={tooltipY - 40}\n            textAnchor=\"middle\"\n            dominantBaseline=\"middle\"\n            fill={theme.palette.success.main}\n            fontSize=\"8\"\n            fontFamily=\"DM Sans, sans-serif\"\n            fontWeight=\"bold\"\n          >\n            MASTERED\n          </text>\n        )}\n      </g>\n    );\n  };\n\n  return (\n    <animated.div style={treeContainerProps}>\n      <Paper \n        elevation={3} \n        className=\"glass-morphism\"\n        sx={{ \n          p: 4, \n          mb: 4, \n          position: 'relative',\n          overflow: 'hidden',\n          borderRadius: '8px',\n          background: 'linear-gradient(to bottom, rgba(255,255,255,0.9), rgba(245,250,245,0.9))',\n          boxShadow: '0 8px 32px rgba(31,38,135,0.15)',\n          backdropFilter: 'blur(10px)',\n          border: '1px solid rgba(255,255,255,0.18)',\n          transition: 'all 0.5s ease',\n        }}\n      >\n        <Typography \n          variant=\"h5\" \n          gutterBottom \n          align=\"center\" \n          sx={{ \n            fontFamily: 'DM Sans, sans-serif',\n            fontWeight: 'bold', \n            color: theme.palette.primary.main,\n            mb: 3\n          }}\n        >\n          Your Bonsai Learning Tree\n        </Typography>\n      \n        <Box sx={{ \n          textAlign: 'center', \n          mb: 3,\n          animation: animation ? 'pulse 2s ease-in-out' : 'none',\n        }}>\n          <animated.div style={{\n            display: 'inline-block',\n            fontSize: '2.5rem',\n            fontWeight: 'bold',\n            color: theme.palette.primary.main,\n            animation: animation ? 'colorShift 2s ease-in-out' : 'none',\n          }}>\n            {percentageProps.number.to(n => `${Math.floor(n)}%`)}\n          </animated.div>\n          <Typography \n            variant=\"body2\" \n            color=\"text.secondary\"\n            sx={{ fontFamily: 'DM Sans, sans-serif' }}\n          >\n            Skills Mastered\n          </Typography>\n        </Box>\n      \n        <Box sx={{ \n          width: '100%', \n          height: 500,\n          position: 'relative',\n          borderRadius: 2,\n          overflow: 'hidden',\n          transition: 'all 0.5s ease',\n        }}>\n          {/* Background gradient */}\n          <Box sx={{\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n            width: '100%',\n            height: '40%',\n            background: 'linear-gradient(to top, rgba(232, 245, 233, 0.7) 0%, rgba(232, 245, 233, 0) 100%)',\n            zIndex: 1\n          }} />\n          \n          {/* Sun/light effect */}\n          <Box sx={{\n            position: 'absolute',\n            top: 20,\n            right: 25,\n            width: 100,\n            height: 100,\n            borderRadius: '50%',\n            background: 'radial-gradient(circle, rgba(255,236,179,0.3) 0%, rgba(255,236,179,0) 70%)',\n            zIndex: 1,\n            animation: 'pulse 8s infinite ease-in-out',\n            '@keyframes pulse': {\n              '0%': { opacity: 0.5, transform: 'scale(1)' },\n              '50%': { opacity: 0.8, transform: 'scale(1.1)' },\n              '100%': { opacity: 0.5, transform: 'scale(1)' }\n            }\n          }} />\n          \n          {/* Tree SVG */}\n          <Box sx={{\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            zIndex: 2,\n            transform: `scale(${treeVitality.scale})`,\n            transition: 'transform 1s ease-in-out',\n          }}>\n            <svg \n              ref={svgRef}\n              width=\"100%\" \n              height=\"100%\" \n              viewBox=\"0 0 300 500\" \n              overflow=\"visible\"\n              style={{ marginTop: '-40px' }}\n            >\n              <defs>\n                {/* Gradients for tree elements */}\n                <radialGradient id=\"potGradient\" cx=\"50%\" cy=\"30%\" r=\"70%\" fx=\"50%\" fy=\"30%\">\n                  <stop offset=\"0%\" stopColor=\"#8D6E63\" />\n                  <stop offset=\"90%\" stopColor=\"#5D4037\" />\n                </radialGradient>\n                \n                <linearGradient id=\"trunkGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor={treeVitality.trunkBaseColor} />\n                  <stop offset=\"50%\" stopColor=\"#6D4C41\" />\n                  <stop offset=\"100%\" stopColor={treeVitality.trunkBaseColor} />\n                </linearGradient>\n                \n                {/* Shadow gradient */}\n                <radialGradient id=\"shadowGradient\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\n                  <stop offset=\"0%\" stopColor=\"rgba(0,0,0,0.2)\" />\n                  <stop offset=\"100%\" stopColor=\"rgba(0,0,0,0)\" />\n                </radialGradient>\n                \n                {/* Gradients for each branch */}\n                {allDisplayBranches.map((branch) => (\n                  <linearGradient \n                    key={branch.gradientId}\n                    id={branch.gradientId}\n                    x1=\"0%\" \n                    y1=\"0%\" \n                    x2=\"100%\" \n                    y2=\"0%\" \n                    gradientUnits=\"userSpaceOnUse\"\n                    gradientTransform={`rotate(${branch.angle * 180 / Math.PI})`}\n                  >\n                    <stop offset=\"0%\" stopColor=\"#6D4C41\" />\n                    <stop offset=\"100%\" stopColor=\"#8D6E63\" />\n                  </linearGradient>\n                ))}\n                \n                {/* Leaf filter for glow effect */}\n                <filter id=\"leaf-glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                  <feGaussianBlur stdDeviation=\"2\" result=\"blur\" />\n                  <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n                </filter>\n                \n                {/* Animation keyframes */}\n                <style type=\"text/css\">\n                  {`\n                    @keyframes leafGrow {\n                      0% { transform: scale(0); opacity: 0; }\n                      60% { transform: scale(1.3); opacity: 0.9; }\n                      75% { transform: scale(1.1); opacity: 1; }\n                      90% { transform: scale(1.05); opacity: 1; }\n                      100% { transform: scale(1); opacity: 1; }\n                    }\n                    \n                    @keyframes branchGrow {\n                      0% { stroke-dashoffset: 1000; }\n                      80% { stroke-dashoffset: 50; }\n                      100% { stroke-dashoffset: 0; }\n                    }\n                    \n                    @keyframes pulse {\n                      0% { opacity: 0.8; transform: scale(1); filter: drop-shadow(0 0 2px rgba(120, 255, 120, 0.3)); }\n                      50% { opacity: 1; transform: scale(1.1); filter: drop-shadow(0 0 5px rgba(120, 255, 120, 0.5)); }\n                      100% { opacity: 0.8; transform: scale(1); filter: drop-shadow(0 0 2px rgba(120, 255, 120, 0.3)); }\n                    }\n                    \n                    @keyframes float {\n                      0% { transform: translateY(0); }\n                      50% { transform: translateY(-5px); }\n                      100% { transform: translateY(0); }\n                    }\n                    \n                    @keyframes sway {\n                      0% { transform: rotate(0deg); }\n                      25% { transform: rotate(1deg); }\n                      75% { transform: rotate(-1deg); }\n                      100% { transform: rotate(0deg); }\n                    }\n                    \n                    .animate-grow {\n                      stroke-dasharray: 1000;\n                      stroke-dashoffset: 1000;\n                      animation: branchGrow 1.5s ease-in-out forwards;\n                    }\n                    \n                    .animate-leaf-grow {\n                      animation: leafGrow 0.8s ease-out forwards;\n                    }\n                    \n                    .leaf-pulse {\n                      animation: pulse 2s infinite;\n                    }\n                    \n                    .sway-slow {\n                      transform-origin: bottom;\n                      animation: sway 8s ease-in-out infinite;\n                    }\n                    \n                    .sway-medium {\n                      transform-origin: bottom;\n                      animation: sway 6s ease-in-out infinite;\n                    }\n                    \n                    .float-animation {\n                      animation: float 5s ease-in-out infinite;\n                    }\n                  `}\n                </style>\n              </defs>\n              \n              {/* Shadow beneath the pot */}\n              <ellipse \n                cx=\"150\" \n                cy={385 + treeVitality.potHeight} \n                rx={treeVitality.potWidth * 0.9} \n                ry=\"8\" \n                fill=\"url(#shadowGradient)\"\n                opacity=\"0.5\"\n              />\n              \n              {/* Pot/Base */}\n              <g className=\"float-animation\">\n                <ellipse \n                  cx=\"150\" \n                  cy=\"385\" \n                  rx={treeVitality.potWidth} \n                  ry=\"15\" \n                  fill=\"#A1887F\" \n                />\n                <path \n                  d={`\n                    M${150 - treeVitality.potWidth}, 385 \n                    L${150 - treeVitality.potWidth * 0.8}, ${385 + treeVitality.potHeight}\n                    L${150 + treeVitality.potWidth * 0.8}, ${385 + treeVitality.potHeight}\n                    L${150 + treeVitality.potWidth}, 385\n                  `}\n                  fill=\"url(#potGradient)\"\n                />\n                <ellipse \n                  cx=\"150\" \n                  cy={385 + treeVitality.potHeight} \n                  rx={treeVitality.potWidth * 0.8} \n                  ry=\"6\" \n                  fill=\"#5D4037\" \n                />\n                \n                {/* Soil/moss in pot */}\n                <ellipse \n                  cx=\"150\" \n                  cy=\"383\" \n                  rx={treeVitality.potWidth * 0.85} \n                  ry=\"13\" \n                  fill=\"#3E2723\" \n                />\n                <ellipse \n                  cx=\"150\" \n                  cy=\"382\" \n                  rx={treeVitality.potWidth * 0.8} \n                  ry=\"12\" \n                  fill=\"#33691E\" \n                  opacity=\"0.4\"\n                />\n              </g>\n              \n              {/* Trunk */}\n              <g className=\"sway-slow\">\n                <animated.path\n                  id=\"tree-trunk\"\n                  d={`\n                    M${150 - treeVitality.trunkWidth * 0.4}, 385\n                    C${150 - treeVitality.trunkWidth * 0.5}, ${385 - treeVitality.trunkHeight * 0.3}\n                     ${150 + treeVitality.trunkWidth * 0.2}, ${385 - treeVitality.trunkHeight * 0.6}\n                     ${150 + treeVitality.trunkWidth * 0.1}, ${385 - treeVitality.trunkHeight * 0.7}\n                    S${150 + treeVitality.trunkWidth * 0.05}, ${385 - treeVitality.trunkHeight * 0.85}\n                     150, ${385 - treeVitality.trunkHeight}\n                  `}\n                  fill=\"none\"\n                  stroke=\"url(#trunkGradient)\"\n                  strokeWidth={treeVitality.trunkWidth}\n                  strokeLinecap=\"round\"\n                  style={trunkProps}\n                />\n                \n                {/* Branches */}\n                {renderBranches(mainBranches)}\n              </g>\n              \n              {/* Skill name tooltips */}\n              {renderTooltip()}\n            </svg>\n          </Box>\n          \n          {/* Tree legend */}\n          <Box \n            sx={{ \n              position: 'absolute', \n              bottom: 15, \n              right: 15,\n              background: 'rgba(255,255,255,0.9)', \n              p: 1.5,\n              borderRadius: '8px',\n              boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n              backdropFilter: 'blur(8px)',\n              border: '1px solid rgba(255,255,255,0.5)',\n              zIndex: 10\n            }}\n          >\n            <Typography \n              variant=\"caption\" \n              display=\"block\" \n              sx={{ \n                fontWeight: 'bold', \n                mb: 0.5, \n                fontFamily: 'DM Sans, sans-serif'\n              }}\n            >\n              Your Learning Growth\n            </Typography>\n            <Typography \n              variant=\"caption\" \n              display=\"block\"\n              sx={{ fontFamily: 'DM Sans, sans-serif' }}\n            >\n              <Box \n                component=\"span\" \n                sx={{ \n                  display: 'inline-block', \n                  width: 10, \n                  height: 10, \n                  borderRadius: '50%', \n                  backgroundColor: theme.palette.primary.main,\n                  mr: 1\n                }}\n              />\n              Mastered Skills\n            </Typography>\n            <Typography \n              variant=\"caption\" \n              display=\"block\"\n              sx={{ fontFamily: 'DM Sans, sans-serif' }}\n            >\n              <Box \n                component=\"span\" \n                sx={{ \n                  display: 'inline-block', \n                  width: 10, \n                  height: 10, \n                  borderRadius: '50%', \n                  backgroundColor: treeVitality.leafBaseColor,\n                  opacity: 0.7,\n                  mr: 1\n                }}\n              />\n              Skills In Progress\n            </Typography>\n          </Box>\n        </Box>\n        \n        <Typography \n          align=\"center\" \n          variant=\"body2\" \n          color=\"text.secondary\" \n          sx={{ \n            mt: 2,\n            fontFamily: 'DM Sans, sans-serif',\n            animation: animation ? 'fadeIn 1s ease-in-out' : 'none'\n          }}\n        >\n          You've mastered {masteredSkills.length} skills so far! Keep growing!\n        </Typography>\n      </Paper>\n    </animated.div>\n  );\n};\n\nexport default BonsaiTree;\n\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}