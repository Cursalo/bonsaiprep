{"ast":null,"code":"// Placeholder for API service calls\n// Example structure for skillsAPI\nexport const skillsAPI={getSkills:async()=>{console.log('Fetching skills...');// In a real app, this would fetch data from Supabase or another backend\nreturn Promise.resolve([{id:'1',name:'Understanding Variables',category:'Programming Basics',subcategory:'Fundamentals',description:'Learn about variables.',masteryLevel:0,mastered:false,videoId:'vid1'},{id:'2',name:'Loops and Iteration',category:'Programming Basics',subcategory:'Control Flow',description:'Learn about loops.',masteryLevel:0,mastered:false,videoId:'vid2'},{id:'3',name:'Functions and Modularity',category:'Programming Basics',subcategory:'Modularity',description:'Learn about functions.',masteryLevel:0,mastered:false,videoId:'vid3'}]);},updateSkillProgress:async(skillId,masteryLevel,mastered)=>{console.log(\"Updating skill \".concat(skillId,\" masteryLevel to \").concat(masteryLevel,\", mastered: \").concat(mastered));return Promise.resolve({id:skillId,masteryLevel,mastered});}// Add other skill-related API functions here\n};// Example structure for videosAPI\nexport const videosAPI={getVideoDetails:async videoId=>{console.log(\"Fetching details for video \".concat(videoId,\"...\"));// Fetch video details from backend\nreturn Promise.resolve({id:videoId,title:\"Sample Video \".concat(videoId),url:'https://www.example.com/sample.mp4',// Placeholder URL\ndescription:'This is a sample video description.'});},markVideoCompleted:async(videoId,userId)=>{console.log(\"Marking video \".concat(videoId,\" completed for user \").concat(userId));return Promise.resolve({success:true});}// Add other video-related API functions here\n};","map":{"version":3,"names":["skillsAPI","getSkills","console","log","Promise","resolve","id","name","category","subcategory","description","masteryLevel","mastered","videoId","updateSkillProgress","skillId","concat","videosAPI","getVideoDetails","title","url","markVideoCompleted","userId","success"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/services/api.ts"],"sourcesContent":["// Placeholder for API service calls\n\n// Example structure for skillsAPI\nexport const skillsAPI = {\n  getSkills: async () => {\n    console.log('Fetching skills...');\n    // In a real app, this would fetch data from Supabase or another backend\n    return Promise.resolve([\n      { id: '1', name: 'Understanding Variables', category: 'Programming Basics', subcategory: 'Fundamentals', description: 'Learn about variables.', masteryLevel: 0, mastered: false, videoId: 'vid1' },\n      { id: '2', name: 'Loops and Iteration', category: 'Programming Basics', subcategory: 'Control Flow', description: 'Learn about loops.', masteryLevel: 0, mastered: false, videoId: 'vid2' },\n      { id: '3', name: 'Functions and Modularity', category: 'Programming Basics', subcategory: 'Modularity', description: 'Learn about functions.', masteryLevel: 0, mastered: false, videoId: 'vid3' },\n    ]);\n  },\n  updateSkillProgress: async (skillId: string, masteryLevel: number, mastered: boolean) => {\n    console.log(`Updating skill ${skillId} masteryLevel to ${masteryLevel}, mastered: ${mastered}`);\n    return Promise.resolve({ id: skillId, masteryLevel, mastered });\n  },\n  // Add other skill-related API functions here\n};\n\n// Example structure for videosAPI\nexport const videosAPI = {\n  getVideoDetails: async (videoId: string) => {\n    console.log(`Fetching details for video ${videoId}...`);\n    // Fetch video details from backend\n    return Promise.resolve(\n      { \n        id: videoId, \n        title: `Sample Video ${videoId}`,\n        url: 'https://www.example.com/sample.mp4', // Placeholder URL\n        description: 'This is a sample video description.'\n      }\n    );\n  },\n  markVideoCompleted: async (videoId: string, userId: string) => {\n    console.log(`Marking video ${videoId} completed for user ${userId}`);\n    return Promise.resolve({ success: true });\n  }\n  // Add other video-related API functions here\n}; "],"mappings":"AAAA;AAEA;AACA,MAAO,MAAM,CAAAA,SAAS,CAAG,CACvBC,SAAS,CAAE,KAAAA,CAAA,GAAY,CACrBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACjC;AACA,MAAO,CAAAC,OAAO,CAACC,OAAO,CAAC,CACrB,CAAEC,EAAE,CAAE,GAAG,CAAEC,IAAI,CAAE,yBAAyB,CAAEC,QAAQ,CAAE,oBAAoB,CAAEC,WAAW,CAAE,cAAc,CAAEC,WAAW,CAAE,wBAAwB,CAAEC,YAAY,CAAE,CAAC,CAAEC,QAAQ,CAAE,KAAK,CAAEC,OAAO,CAAE,MAAO,CAAC,CACnM,CAAEP,EAAE,CAAE,GAAG,CAAEC,IAAI,CAAE,qBAAqB,CAAEC,QAAQ,CAAE,oBAAoB,CAAEC,WAAW,CAAE,cAAc,CAAEC,WAAW,CAAE,oBAAoB,CAAEC,YAAY,CAAE,CAAC,CAAEC,QAAQ,CAAE,KAAK,CAAEC,OAAO,CAAE,MAAO,CAAC,CAC3L,CAAEP,EAAE,CAAE,GAAG,CAAEC,IAAI,CAAE,0BAA0B,CAAEC,QAAQ,CAAE,oBAAoB,CAAEC,WAAW,CAAE,YAAY,CAAEC,WAAW,CAAE,wBAAwB,CAAEC,YAAY,CAAE,CAAC,CAAEC,QAAQ,CAAE,KAAK,CAAEC,OAAO,CAAE,MAAO,CAAC,CACnM,CAAC,CACJ,CAAC,CACDC,mBAAmB,CAAE,KAAAA,CAAOC,OAAe,CAAEJ,YAAoB,CAAEC,QAAiB,GAAK,CACvFV,OAAO,CAACC,GAAG,mBAAAa,MAAA,CAAmBD,OAAO,sBAAAC,MAAA,CAAoBL,YAAY,iBAAAK,MAAA,CAAeJ,QAAQ,CAAE,CAAC,CAC/F,MAAO,CAAAR,OAAO,CAACC,OAAO,CAAC,CAAEC,EAAE,CAAES,OAAO,CAAEJ,YAAY,CAAEC,QAAS,CAAC,CAAC,CACjE,CACA;AACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,SAAS,CAAG,CACvBC,eAAe,CAAE,KAAO,CAAAL,OAAe,EAAK,CAC1CX,OAAO,CAACC,GAAG,+BAAAa,MAAA,CAA+BH,OAAO,OAAK,CAAC,CACvD;AACA,MAAO,CAAAT,OAAO,CAACC,OAAO,CACpB,CACEC,EAAE,CAAEO,OAAO,CACXM,KAAK,iBAAAH,MAAA,CAAkBH,OAAO,CAAE,CAChCO,GAAG,CAAE,oCAAoC,CAAE;AAC3CV,WAAW,CAAE,qCACf,CACF,CAAC,CACH,CAAC,CACDW,kBAAkB,CAAE,KAAAA,CAAOR,OAAe,CAAES,MAAc,GAAK,CAC7DpB,OAAO,CAACC,GAAG,kBAAAa,MAAA,CAAkBH,OAAO,yBAAAG,MAAA,CAAuBM,MAAM,CAAE,CAAC,CACpE,MAAO,CAAAlB,OAAO,CAACC,OAAO,CAAC,CAAEkB,OAAO,CAAE,IAAK,CAAC,CAAC,CAC3C,CACA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}