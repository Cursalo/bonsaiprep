{"ast":null,"code":"var _jsxFileName = \"/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { animated, useSpring } from 'react-spring';\nimport { supabase } from '../supabaseClient';\n\n// Helper functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lerp = (a, b, t) => a * (1 - t) + b * t;\nconst clamp = (num, min, max) => Math.min(Math.max(num, min), max);\nconst randRange = (min, max) => Math.random() * (max - min) + min;\n\n// Simplified structure - focusing on trunk and foliage pads\n\n// New Color Palette based on the target image\nconst TRUNK_COLOR = '#604E43';\nconst FOLIAGE_HIGHLIGHT_COLOR = '#A1D490';\nconst FOLIAGE_SHADE_COLOR = '#7CAC6C';\nconst POT_COLOR = '#8D7B6F';\nconst BonsaiTree = ({\n  skills,\n  totalSkills\n}) => {\n  _s();\n  const theme = useTheme();\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [imageError, setImageError] = useState(false);\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n\n  // Determine which bonsai image to show (1.png to 11.png)\n  const getBonsaiImageNumber = () => {\n    // Default to image 1 (empty bonsai)\n    if (correctAnswersCount === 0) return 1;\n\n    // Map the number of correct answers to the appropriate image\n    // 1-10 correct answers maps to images 2-11\n    return Math.min(correctAnswersCount + 1, 11);\n  };\n  const bonsaiImageNumber = getBonsaiImageNumber();\n\n  // Construct the image path using the base URL\n  const baseUrl = process.env.NODE_ENV === 'production' ? 'https://bonsaiprep-4e8cd0rd4-cursalos-projects.vercel.app' : '';\n  const bonsaiImagePath = `${baseUrl}/bonsaipng/${bonsaiImageNumber}.png`;\n  const altarImagePath = '/altar2.png';\n\n  // Log the image path for debugging\n  console.log('Loading bonsai image:', bonsaiImagePath);\n\n  // Animations - updated to use the recommended API\n  const [containerProps, containerApi] = useSpring(() => ({\n    opacity: 0,\n    config: {\n      duration: 500\n    }\n  }));\n  useEffect(() => {\n    containerApi.start({\n      opacity: 1\n    });\n  }, [containerApi]);\n  const [imageProps, imageApi] = useSpring(() => ({\n    transform: 'translateY(20px)',\n    config: {\n      tension: 100,\n      friction: 10\n    }\n  }));\n  useEffect(() => {\n    imageApi.start({\n      transform: 'translateY(0px)'\n    });\n  }, [imageApi]);\n\n  // Preload both bonsai and altar images\n  useEffect(() => {\n    const preloadImages = async () => {\n      setIsLoading(true);\n      try {\n        await Promise.all([new Promise((resolve, reject) => {\n          const bonsaiImg = new Image();\n          bonsaiImg.src = bonsaiImagePath;\n          bonsaiImg.onload = resolve;\n          bonsaiImg.onerror = reject;\n        }), new Promise((resolve, reject) => {\n          const altarImg = new Image();\n          altarImg.src = altarImagePath;\n          altarImg.onload = resolve;\n          altarImg.onerror = reject;\n        })]);\n        setIsImageLoaded(true);\n        setImageError(false);\n      } catch (error) {\n        console.error('Failed to load images:', error);\n        setImageError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    preloadImages();\n  }, [bonsaiImagePath, altarImagePath]);\n\n  // Fetch the user's question data to determine how many questions were answered correctly\n  useEffect(() => {\n    const fetchUserProgress = async () => {\n      setIsLoading(true);\n      try {\n        // Get the current user\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (!user) {\n          console.error('No user logged in');\n          setIsLoading(false);\n          return;\n        }\n\n        // Get the completed questions for the user\n        const {\n          data,\n          error\n        } = await supabase.from('practice_questions').select('*').eq('user_id', user.id).eq('completed', true);\n        if (error) {\n          throw error;\n        }\n\n        // Calculate how many questions were answered correctly\n        const correctAnswers = data ? data.filter(q => q.correct === true).length : 0;\n        console.log('Correct answers:', correctAnswers);\n        setCorrectAnswersCount(correctAnswers);\n      } catch (error) {\n        console.error('Error fetching user progress:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchUserProgress();\n  }, []);\n  const handleImageError = () => {\n    console.error(`Failed to load image: ${bonsaiImagePath}`);\n    setImageError(true);\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Loading your bonsai...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this);\n  }\n  if (imageError) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '400px',\n        gap: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: \"Unable to load bonsai image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: \"Please try refreshing the page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: containerProps,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 0,\n      sx: {\n        p: 3,\n        mb: 4,\n        borderRadius: '20px',\n        backgroundColor: 'transparent',\n        position: 'relative',\n        height: '100%',\n        overflow: 'hidden',\n        '&::before': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundImage: `url(${altarImagePath})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          opacity: 0.85,\n          zIndex: 0\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'relative',\n          zIndex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          gutterBottom: true,\n          align: \"center\",\n          sx: {\n            fontWeight: 'bold',\n            color: '#2C1810',\n            textShadow: '0 2px 4px rgba(0,0,0,0.1)',\n            mb: 3\n          },\n          children: \"Your Learning Bonsai\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            flexGrow: 1,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'relative',\n            width: '100%',\n            aspectRatio: '16/9',\n            maxHeight: '600px',\n            '& img': {\n              maxWidth: '100%',\n              maxHeight: '100%',\n              objectFit: 'contain',\n              transition: 'transform 0.3s ease-in-out',\n              '&:hover': {\n                transform: 'scale(1.02)'\n              }\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(animated.img, {\n            src: bonsaiImagePath,\n            alt: `Bonsai tree progress - ${correctAnswersCount} questions correct`,\n            style: {\n              ...imageProps,\n              opacity: isImageLoaded ? 1 : 0\n            },\n            onLoad: () => setIsImageLoaded(true),\n            onError: handleImageError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3,\n            textAlign: 'center',\n            color: '#2C1810',\n            textShadow: '0 1px 2px rgba(0,0,0,0.1)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [correctAnswersCount, \" Questions Mastered\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            sx: {\n              mt: 1,\n              opacity: 0.8\n            },\n            children: \"Keep practicing to grow your bonsai!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(BonsaiTree, \"iSsvf0V/d1d2vPGPVFPLzq0rmfE=\", false, function () {\n  return [useTheme, useSpring, useSpring];\n});\n_c = BonsaiTree;\nexport default BonsaiTree;\nvar _c;\n$RefreshReg$(_c, \"BonsaiTree\");","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","Paper","useTheme","animated","useSpring","supabase","jsxDEV","_jsxDEV","lerp","a","b","t","clamp","num","min","max","Math","randRange","random","TRUNK_COLOR","FOLIAGE_HIGHLIGHT_COLOR","FOLIAGE_SHADE_COLOR","POT_COLOR","BonsaiTree","skills","totalSkills","_s","theme","correctAnswersCount","setCorrectAnswersCount","isLoading","setIsLoading","imageError","setImageError","isImageLoaded","setIsImageLoaded","getBonsaiImageNumber","bonsaiImageNumber","baseUrl","process","env","NODE_ENV","bonsaiImagePath","altarImagePath","console","log","containerProps","containerApi","opacity","config","duration","start","imageProps","imageApi","transform","tension","friction","preloadImages","Promise","all","resolve","reject","bonsaiImg","Image","src","onload","onerror","altarImg","error","fetchUserProgress","data","user","auth","getUser","from","select","eq","id","correctAnswers","filter","q","correct","length","handleImageError","sx","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","gap","color","variant","div","style","elevation","p","mb","borderRadius","backgroundColor","position","overflow","content","top","left","right","bottom","backgroundImage","backgroundSize","backgroundPosition","zIndex","gutterBottom","align","fontWeight","textShadow","flexGrow","width","aspectRatio","maxHeight","maxWidth","objectFit","transition","img","alt","onLoad","onError","mt","textAlign","_c","$RefreshReg$"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { animated, useSpring } from 'react-spring';\nimport { supabase } from '../supabaseClient';\n\n// Helper functions\nconst lerp = (a: number, b: number, t: number): number => a * (1 - t) + b * t;\nconst clamp = (num: number, min: number, max: number): number => Math.min(Math.max(num, min), max);\nconst randRange = (min: number, max: number): number => Math.random() * (max - min) + min;\n\ninterface Skill {\n  id: string;\n  name: string;\n  category: string;\n  mastered: boolean;\n  masteryLevel: number; // Assuming 0-100\n}\n\ninterface BonsaiTreeProps {\n  skills: Skill[];\n  totalSkills: number;\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\n// Simplified structure - focusing on trunk and foliage pads\ninterface FoliagePadElement {\n  id: string;\n  cx: number;\n  cy: number;\n  rx: number;\n  ry: number;\n  rotation: number;\n  // Elements for gradient/layering\n  layers: {\n    color: string;\n    opacity: number;\n    scale: number; // To create inner layers\n  }[];\n}\n\n// New Color Palette based on the target image\nconst TRUNK_COLOR = '#604E43'; \nconst FOLIAGE_HIGHLIGHT_COLOR = '#A1D490';\nconst FOLIAGE_SHADE_COLOR = '#7CAC6C'; \nconst POT_COLOR = '#8D7B6F';\n\nconst BonsaiTree: React.FC<BonsaiTreeProps> = ({ skills, totalSkills }) => {\n  const theme = useTheme();\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [imageError, setImageError] = useState(false);\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n\n  // Determine which bonsai image to show (1.png to 11.png)\n  const getBonsaiImageNumber = () => {\n    // Default to image 1 (empty bonsai)\n    if (correctAnswersCount === 0) return 1;\n    \n    // Map the number of correct answers to the appropriate image\n    // 1-10 correct answers maps to images 2-11\n    return Math.min(correctAnswersCount + 1, 11);\n  };\n\n  const bonsaiImageNumber = getBonsaiImageNumber();\n  \n  // Construct the image path using the base URL\n  const baseUrl = process.env.NODE_ENV === 'production' \n    ? 'https://bonsaiprep-4e8cd0rd4-cursalos-projects.vercel.app'\n    : '';\n  const bonsaiImagePath = `${baseUrl}/bonsaipng/${bonsaiImageNumber}.png`;\n  const altarImagePath = '/altar2.png';\n\n  // Log the image path for debugging\n  console.log('Loading bonsai image:', bonsaiImagePath);\n\n  // Animations - updated to use the recommended API\n  const [containerProps, containerApi] = useSpring(() => ({ \n    opacity: 0,\n    config: { duration: 500 }\n  }));\n\n  useEffect(() => {\n    containerApi.start({ opacity: 1 });\n  }, [containerApi]);\n\n  const [imageProps, imageApi] = useSpring(() => ({\n    transform: 'translateY(20px)',\n    config: { tension: 100, friction: 10 }\n  }));\n\n  useEffect(() => {\n    imageApi.start({ transform: 'translateY(0px)' });\n  }, [imageApi]);\n\n  // Preload both bonsai and altar images\n  useEffect(() => {\n    const preloadImages = async () => {\n      setIsLoading(true);\n      try {\n        await Promise.all([\n          new Promise((resolve, reject) => {\n            const bonsaiImg = new Image();\n            bonsaiImg.src = bonsaiImagePath;\n            bonsaiImg.onload = resolve;\n            bonsaiImg.onerror = reject;\n          }),\n          new Promise((resolve, reject) => {\n            const altarImg = new Image();\n            altarImg.src = altarImagePath;\n            altarImg.onload = resolve;\n            altarImg.onerror = reject;\n          })\n        ]);\n        setIsImageLoaded(true);\n        setImageError(false);\n      } catch (error) {\n        console.error('Failed to load images:', error);\n        setImageError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    preloadImages();\n  }, [bonsaiImagePath, altarImagePath]);\n\n  // Fetch the user's question data to determine how many questions were answered correctly\n  useEffect(() => {\n    const fetchUserProgress = async () => {\n      setIsLoading(true);\n      try {\n        // Get the current user\n        const { data: { user } } = await supabase.auth.getUser();\n        \n        if (!user) {\n          console.error('No user logged in');\n          setIsLoading(false);\n          return;\n        }\n\n        // Get the completed questions for the user\n        const { data, error } = await supabase\n          .from('practice_questions')\n          .select('*')\n          .eq('user_id', user.id)\n          .eq('completed', true);\n\n        if (error) {\n          throw error;\n        }\n\n        // Calculate how many questions were answered correctly\n        const correctAnswers = data ? data.filter(q => q.correct === true).length : 0;\n        console.log('Correct answers:', correctAnswers);\n        setCorrectAnswersCount(correctAnswers);\n      } catch (error) {\n        console.error('Error fetching user progress:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserProgress();\n  }, []);\n\n  const handleImageError = () => {\n    console.error(`Failed to load image: ${bonsaiImagePath}`);\n    setImageError(true);\n  };\n\n  if (isLoading) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '400px' \n      }}>\n        <Typography>Loading your bonsai...</Typography>\n      </Box>\n    );\n  }\n\n  if (imageError) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '400px',\n        gap: 2\n      }}>\n        <Typography color=\"error\">Unable to load bonsai image</Typography>\n        <Typography variant=\"body2\">Please try refreshing the page</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <animated.div style={containerProps}>\n      <Paper \n        elevation={0} \n        sx={{ \n          p: 3, \n          mb: 4, \n          borderRadius: '20px',\n          backgroundColor: 'transparent',\n          position: 'relative',\n          height: '100%',\n          overflow: 'hidden',\n          '&::before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundImage: `url(${altarImagePath})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            opacity: 0.85,\n            zIndex: 0,\n          }\n        }}\n      >\n        <Box sx={{ position: 'relative', zIndex: 1, display: 'flex', flexDirection: 'column', height: '100%' }}>\n        <Typography \n          variant=\"h5\" \n          gutterBottom \n          align=\"center\" \n          sx={{ \n            fontWeight: 'bold', \n              color: '#2C1810',\n              textShadow: '0 2px 4px rgba(0,0,0,0.1)',\n            mb: 3\n          }}\n          >\n            Your Learning Bonsai\n          </Typography>\n          \n          <Box sx={{\n            flexGrow: 1,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'relative',\n            width: '100%',\n            aspectRatio: '16/9',\n            maxHeight: '600px',\n            '& img': {\n              maxWidth: '100%',\n              maxHeight: '100%',\n              objectFit: 'contain',\n              transition: 'transform 0.3s ease-in-out',\n              '&:hover': {\n                transform: 'scale(1.02)'\n              }\n            }\n          }}>\n            <animated.img\n              src={bonsaiImagePath}\n              alt={`Bonsai tree progress - ${correctAnswersCount} questions correct`}\n              style={{\n                ...imageProps,\n                opacity: isImageLoaded ? 1 : 0\n              }}\n              onLoad={() => setIsImageLoaded(true)}\n              onError={handleImageError}\n            />\n          </Box>\n          \n          <Box sx={{ \n            mt: 3, \n            textAlign: 'center',\n            color: '#2C1810',\n            textShadow: '0 1px 2px rgba(0,0,0,0.1)'\n          }}>\n            <Typography variant=\"h6\">\n              {correctAnswersCount} Questions Mastered\n            </Typography>\n            <Typography variant=\"body2\" sx={{ mt: 1, opacity: 0.8 }}>\n              Keep practicing to grow your bonsai!\n            </Typography>\n          </Box>\n        </Box>\n      </Paper>\n    </animated.div>\n  );\n};\n\nexport default BonsaiTree;\n\n "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,UAAU,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAChE,SAASC,QAAQ,EAAEC,SAAS,QAAQ,cAAc;AAClD,SAASC,QAAQ,QAAQ,mBAAmB;;AAE5C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAGA,CAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS,KAAaF,CAAC,IAAI,CAAC,GAAGE,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC;AAC7E,MAAMC,KAAK,GAAGA,CAACC,GAAW,EAAEC,GAAW,EAAEC,GAAW,KAAaC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACF,GAAG,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC;AAClG,MAAME,SAAS,GAAGA,CAACH,GAAW,EAAEC,GAAW,KAAaC,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG;;AAoBzF;;AAgBA;AACA,MAAMK,WAAW,GAAG,SAAS;AAC7B,MAAMC,uBAAuB,GAAG,SAAS;AACzC,MAAMC,mBAAmB,GAAG,SAAS;AACrC,MAAMC,SAAS,GAAG,SAAS;AAE3B,MAAMC,UAAqC,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAMC,KAAK,GAAGzB,QAAQ,CAAC,CAAC;EACxB,MAAM,CAAC0B,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC;EACjE,MAAM,CAACgC,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACkC,UAAU,EAAEC,aAAa,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACoC,aAAa,EAAEC,gBAAgB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAMsC,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACA,IAAIR,mBAAmB,KAAK,CAAC,EAAE,OAAO,CAAC;;IAEvC;IACA;IACA,OAAOZ,IAAI,CAACF,GAAG,CAACc,mBAAmB,GAAG,CAAC,EAAE,EAAE,CAAC;EAC9C,CAAC;EAED,MAAMS,iBAAiB,GAAGD,oBAAoB,CAAC,CAAC;;EAEhD;EACA,MAAME,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjD,2DAA2D,GAC3D,EAAE;EACN,MAAMC,eAAe,GAAG,GAAGJ,OAAO,cAAcD,iBAAiB,MAAM;EACvE,MAAMM,cAAc,GAAG,aAAa;;EAEpC;EACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,eAAe,CAAC;;EAErD;EACA,MAAM,CAACI,cAAc,EAAEC,YAAY,CAAC,GAAG3C,SAAS,CAAC,OAAO;IACtD4C,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE;MAAEC,QAAQ,EAAE;IAAI;EAC1B,CAAC,CAAC,CAAC;EAEHrD,SAAS,CAAC,MAAM;IACdkD,YAAY,CAACI,KAAK,CAAC;MAAEH,OAAO,EAAE;IAAE,CAAC,CAAC;EACpC,CAAC,EAAE,CAACD,YAAY,CAAC,CAAC;EAElB,MAAM,CAACK,UAAU,EAAEC,QAAQ,CAAC,GAAGjD,SAAS,CAAC,OAAO;IAC9CkD,SAAS,EAAE,kBAAkB;IAC7BL,MAAM,EAAE;MAAEM,OAAO,EAAE,GAAG;MAAEC,QAAQ,EAAE;IAAG;EACvC,CAAC,CAAC,CAAC;EAEH3D,SAAS,CAAC,MAAM;IACdwD,QAAQ,CAACF,KAAK,CAAC;MAAEG,SAAS,EAAE;IAAkB,CAAC,CAAC;EAClD,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;;EAEd;EACAxD,SAAS,CAAC,MAAM;IACd,MAAM4D,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC1B,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,MAAM2B,OAAO,CAACC,GAAG,CAAC,CAChB,IAAID,OAAO,CAAC,CAACE,OAAO,EAAEC,MAAM,KAAK;UAC/B,MAAMC,SAAS,GAAG,IAAIC,KAAK,CAAC,CAAC;UAC7BD,SAAS,CAACE,GAAG,GAAGtB,eAAe;UAC/BoB,SAAS,CAACG,MAAM,GAAGL,OAAO;UAC1BE,SAAS,CAACI,OAAO,GAAGL,MAAM;QAC5B,CAAC,CAAC,EACF,IAAIH,OAAO,CAAC,CAACE,OAAO,EAAEC,MAAM,KAAK;UAC/B,MAAMM,QAAQ,GAAG,IAAIJ,KAAK,CAAC,CAAC;UAC5BI,QAAQ,CAACH,GAAG,GAAGrB,cAAc;UAC7BwB,QAAQ,CAACF,MAAM,GAAGL,OAAO;UACzBO,QAAQ,CAACD,OAAO,GAAGL,MAAM;QAC3B,CAAC,CAAC,CACH,CAAC;QACF1B,gBAAgB,CAAC,IAAI,CAAC;QACtBF,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC,CAAC,OAAOmC,KAAK,EAAE;QACdxB,OAAO,CAACwB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CnC,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,SAAS;QACRF,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED0B,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACf,eAAe,EAAEC,cAAc,CAAC,CAAC;;EAErC;EACA9C,SAAS,CAAC,MAAM;IACd,MAAMwE,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpCtC,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF;QACA,MAAM;UAAEuC,IAAI,EAAE;YAAEC;UAAK;QAAE,CAAC,GAAG,MAAMlE,QAAQ,CAACmE,IAAI,CAACC,OAAO,CAAC,CAAC;QAExD,IAAI,CAACF,IAAI,EAAE;UACT3B,OAAO,CAACwB,KAAK,CAAC,mBAAmB,CAAC;UAClCrC,YAAY,CAAC,KAAK,CAAC;UACnB;QACF;;QAEA;QACA,MAAM;UAAEuC,IAAI;UAAEF;QAAM,CAAC,GAAG,MAAM/D,QAAQ,CACnCqE,IAAI,CAAC,oBAAoB,CAAC,CAC1BC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEL,IAAI,CAACM,EAAE,CAAC,CACtBD,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC;QAExB,IAAIR,KAAK,EAAE;UACT,MAAMA,KAAK;QACb;;QAEA;QACA,MAAMU,cAAc,GAAGR,IAAI,GAAGA,IAAI,CAACS,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAK,IAAI,CAAC,CAACC,MAAM,GAAG,CAAC;QAC7EtC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiC,cAAc,CAAC;QAC/CjD,sBAAsB,CAACiD,cAAc,CAAC;MACxC,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdxB,OAAO,CAACwB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD,CAAC,SAAS;QACRrC,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDsC,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC7BvC,OAAO,CAACwB,KAAK,CAAC,yBAAyB1B,eAAe,EAAE,CAAC;IACzDT,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,IAAIH,SAAS,EAAE;IACb,oBACEvB,OAAA,CAACR,GAAG;MAACqF,EAAE,EAAE;QACPC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE,QAAQ;QACpBC,MAAM,EAAE;MACV,CAAE;MAAAC,QAAA,eACAlF,OAAA,CAACP,UAAU;QAAAyF,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAEV;EAEA,IAAI7D,UAAU,EAAE;IACd,oBACEzB,OAAA,CAACR,GAAG;MAACqF,EAAE,EAAE;QACPC,OAAO,EAAE,MAAM;QACfS,aAAa,EAAE,QAAQ;QACvBR,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE,QAAQ;QACpBC,MAAM,EAAE,OAAO;QACfO,GAAG,EAAE;MACP,CAAE;MAAAN,QAAA,gBACAlF,OAAA,CAACP,UAAU;QAACgG,KAAK,EAAC,OAAO;QAAAP,QAAA,EAAC;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAClEtF,OAAA,CAACP,UAAU;QAACiG,OAAO,EAAC,OAAO;QAAAR,QAAA,EAAC;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC;EAEV;EAEA,oBACEtF,OAAA,CAACJ,QAAQ,CAAC+F,GAAG;IAACC,KAAK,EAAErD,cAAe;IAAA2C,QAAA,eAClClF,OAAA,CAACN,KAAK;MACJmG,SAAS,EAAE,CAAE;MACbhB,EAAE,EAAE;QACFiB,CAAC,EAAE,CAAC;QACJC,EAAE,EAAE,CAAC;QACLC,YAAY,EAAE,MAAM;QACpBC,eAAe,EAAE,aAAa;QAC9BC,QAAQ,EAAE,UAAU;QACpBjB,MAAM,EAAE,MAAM;QACdkB,QAAQ,EAAE,QAAQ;QAClB,WAAW,EAAE;UACXC,OAAO,EAAE,IAAI;UACbF,QAAQ,EAAE,UAAU;UACpBG,GAAG,EAAE,CAAC;UACNC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;UACTC,eAAe,EAAE,OAAOrE,cAAc,GAAG;UACzCsE,cAAc,EAAE,OAAO;UACvBC,kBAAkB,EAAE,QAAQ;UAC5BlE,OAAO,EAAE,IAAI;UACbmE,MAAM,EAAE;QACV;MACF,CAAE;MAAA1B,QAAA,eAEFlF,OAAA,CAACR,GAAG;QAACqF,EAAE,EAAE;UAAEqB,QAAQ,EAAE,UAAU;UAAEU,MAAM,EAAE,CAAC;UAAE9B,OAAO,EAAE,MAAM;UAAES,aAAa,EAAE,QAAQ;UAAEN,MAAM,EAAE;QAAO,CAAE;QAAAC,QAAA,gBACvGlF,OAAA,CAACP,UAAU;UACTiG,OAAO,EAAC,IAAI;UACZmB,YAAY;UACZC,KAAK,EAAC,QAAQ;UACdjC,EAAE,EAAE;YACFkC,UAAU,EAAE,MAAM;YAChBtB,KAAK,EAAE,SAAS;YAChBuB,UAAU,EAAE,2BAA2B;YACzCjB,EAAE,EAAE;UACN,CAAE;UAAAb,QAAA,EACD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eAEbtF,OAAA,CAACR,GAAG;UAACqF,EAAE,EAAE;YACPoC,QAAQ,EAAE,CAAC;YACXnC,OAAO,EAAE,MAAM;YACfC,cAAc,EAAE,QAAQ;YACxBC,UAAU,EAAE,QAAQ;YACpBkB,QAAQ,EAAE,UAAU;YACpBgB,KAAK,EAAE,MAAM;YACbC,WAAW,EAAE,MAAM;YACnBC,SAAS,EAAE,OAAO;YAClB,OAAO,EAAE;cACPC,QAAQ,EAAE,MAAM;cAChBD,SAAS,EAAE,MAAM;cACjBE,SAAS,EAAE,SAAS;cACpBC,UAAU,EAAE,4BAA4B;cACxC,SAAS,EAAE;gBACTxE,SAAS,EAAE;cACb;YACF;UACF,CAAE;UAAAmC,QAAA,eACAlF,OAAA,CAACJ,QAAQ,CAAC4H,GAAG;YACX/D,GAAG,EAAEtB,eAAgB;YACrBsF,GAAG,EAAE,0BAA0BpG,mBAAmB,oBAAqB;YACvEuE,KAAK,EAAE;cACL,GAAG/C,UAAU;cACbJ,OAAO,EAAEd,aAAa,GAAG,CAAC,GAAG;YAC/B,CAAE;YACF+F,MAAM,EAAEA,CAAA,KAAM9F,gBAAgB,CAAC,IAAI,CAAE;YACrC+F,OAAO,EAAE/C;UAAiB;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENtF,OAAA,CAACR,GAAG;UAACqF,EAAE,EAAE;YACP+C,EAAE,EAAE,CAAC;YACLC,SAAS,EAAE,QAAQ;YACnBpC,KAAK,EAAE,SAAS;YAChBuB,UAAU,EAAE;UACd,CAAE;UAAA9B,QAAA,gBACAlF,OAAA,CAACP,UAAU;YAACiG,OAAO,EAAC,IAAI;YAAAR,QAAA,GACrB7D,mBAAmB,EAAC,qBACvB;UAAA;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACbtF,OAAA,CAACP,UAAU;YAACiG,OAAO,EAAC,OAAO;YAACb,EAAE,EAAE;cAAE+C,EAAE,EAAE,CAAC;cAAEnF,OAAO,EAAE;YAAI,CAAE;YAAAyC,QAAA,EAAC;UAEzD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEnB,CAAC;AAACnE,EAAA,CAnPIH,UAAqC;EAAA,QAC3BrB,QAAQ,EA6BiBE,SAAS,EASjBA,SAAS;AAAA;AAAAiI,EAAA,GAvCpC9G,UAAqC;AAqP3C,eAAeA,UAAU;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}