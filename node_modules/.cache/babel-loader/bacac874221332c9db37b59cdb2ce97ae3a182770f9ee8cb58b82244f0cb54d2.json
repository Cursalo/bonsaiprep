{"ast":null,"code":"var _jsxFileName = \"/Users/gerardo/Downloads/Bonsaito/src/pages/UploadReport.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, Button, Container, Typography, Paper, AppBar, Toolbar, IconButton, CircularProgress, Alert } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport { useDropzone } from 'react-dropzone';\nimport { uploadFileToSupabase, ocrPdfFromSupabase } from '../services/ocrService';\nimport { generateQuestionsFromMistakes } from '../services/aiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadReport = () => {\n  _s();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [extractedText, setExtractedText] = useState(null);\n  const [generatedQuestions, setGeneratedQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [error, setError] = useState(null);\n  const handleDrawerToggle = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n  const onDrop = useCallback(async acceptedFiles => {\n    if (acceptedFiles && acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      if (file.type !== 'application/pdf') {\n        setError('Invalid file type. Please upload a PDF.');\n        setUploadedFile(null);\n        return;\n      }\n      setUploadedFile(file);\n      setError(null);\n      setExtractedText(null);\n      setGeneratedQuestions([]);\n      setIsLoading(true);\n      try {\n        setLoadingMessage('Uploading PDF to secure storage...');\n        // You might want to make this public if your OCR function needs a public URL\n        // and your bucket policies allow. Otherwise, pass storagePath.\n        const {\n          storagePath,\n          publicUrl\n        } = await uploadFileToSupabase(file, 'score-reports', {\n          publicAccess: false\n        });\n        console.log('File uploaded:', {\n          storagePath,\n          publicUrl\n        });\n        setLoadingMessage('Extracting text from PDF (OCR process)... This may take a moment.');\n        // Use publicUrl if available and preferred by your OCR function, otherwise storagePath\n        const text = await ocrPdfFromSupabase(publicUrl, storagePath);\n        setExtractedText(text);\n        console.log('Text extracted:', text.substring(0, 100) + '...');\n        setLoadingMessage('Generating practice questions with AI...');\n        const questions = await generateQuestionsFromMistakes(text);\n        setGeneratedQuestions(questions);\n        console.log('Questions generated:', questions);\n      } catch (err) {\n        console.error(\"Error processing file:\", err);\n        setError(`Failed to process the PDF: ${err.message || 'Unknown error'}. Check console for details.`);\n      } finally {\n        setIsLoading(false);\n        setLoadingMessage('');\n      }\n    }\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf']\n    },\n    multiple: false\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"inherit\",\n          \"aria-label\": \"open drawer\",\n          edge: \"start\",\n          onClick: handleDrawerToggle,\n          sx: {\n            mr: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(MenuIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"div\",\n          sx: {\n            flexGrow: 1\n          },\n          children: \"Upload Score Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        align: \"center\",\n        children: \"Upload Your SAT Practice Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        align: \"center\",\n        color: \"text.secondary\",\n        paragraph: true,\n        children: \"Upload your PDF score report to get personalized lessons and practice questions.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        ...getRootProps(),\n        elevation: 3,\n        sx: {\n          p: 4,\n          mt: 3,\n          textAlign: 'center',\n          border: isDragActive ? '2px dashed primary.main' : '2px dashed grey.500',\n          backgroundColor: isDragActive ? 'action.hover' : 'background.paper',\n          cursor: 'pointer',\n          minHeight: 200,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloudUploadIcon, {\n          sx: {\n            fontSize: 60,\n            color: 'primary.main',\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), isDragActive ? /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Drop the PDF here ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Drag 'n' drop a PDF file here, or click to select file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"(Max file size: 10MB. Supported format: PDF)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mt: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), uploadedFile && !error && !isLoading && /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        sx: {\n          p: 2,\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Uploaded File:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [uploadedFile.name, \" (\", Math.round(uploadedFile.size / 1024), \" KB)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          mt: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            ml: 2\n          },\n          children: loadingMessage || 'Processing your report...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), extractedText && !isLoading && /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        sx: {\n          p: 2,\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Extracted Text (Preview from OCR):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            maxHeight: 150,\n            overflowY: 'auto',\n            whiteSpace: 'pre-wrap',\n            backgroundColor: 'grey.100',\n            p: 1,\n            borderRadius: 1\n          },\n          children: extractedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), generatedQuestions.length > 0 && !isLoading && /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        sx: {\n          p: 2,\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"AI Generated Practice Questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), generatedQuestions.map(q => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2,\n            p: 1.5,\n            border: '1px solid #e0e0e0',\n            borderRadius: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            children: [\"Topic: \", q.topic]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            gutterBottom: true,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Question:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 58\n            }, this), \" \", q.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this), q.options && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: \"Options:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: q.options.map((opt, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: opt\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 70\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 54\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 19\n          }, this), q.answer && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            sx: {\n              color: 'green',\n              fontWeight: 'bold'\n            },\n            children: [\"Answer: \", q.answer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 30\n          }, this), q.explanation && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            display: \"block\",\n            sx: {\n              mt: 0.5,\n              color: 'text.secondary'\n            },\n            children: [\"Explanation: \", q.explanation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 35\n          }, this)]\n        }, q.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          component: Link,\n          to: \"/dashboard\",\n          variant: \"outlined\",\n          children: \"Back to Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadReport, \"/fvKl8a3rALYI5pw9eTlIDIO+RY=\", false, function () {\n  return [useDropzone];\n});\n_c = UploadReport;\nexport default UploadReport;\nvar _c;\n$RefreshReg$(_c, \"UploadReport\");","map":{"version":3,"names":["React","useState","useCallback","Link","Box","Button","Container","Typography","Paper","AppBar","Toolbar","IconButton","CircularProgress","Alert","MenuIcon","CloudUploadIcon","useDropzone","uploadFileToSupabase","ocrPdfFromSupabase","generateQuestionsFromMistakes","jsxDEV","_jsxDEV","UploadReport","_s","drawerOpen","setDrawerOpen","uploadedFile","setUploadedFile","extractedText","setExtractedText","generatedQuestions","setGeneratedQuestions","isLoading","setIsLoading","loadingMessage","setLoadingMessage","error","setError","handleDrawerToggle","onDrop","acceptedFiles","length","file","type","storagePath","publicUrl","publicAccess","console","log","text","substring","questions","err","message","getRootProps","getInputProps","isDragActive","accept","multiple","sx","display","flexDirection","minHeight","children","position","color","edge","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","flexGrow","maxWidth","mt","mb","gutterBottom","align","paragraph","elevation","p","textAlign","border","backgroundColor","cursor","alignItems","justifyContent","fontSize","severity","name","Math","round","size","ml","maxHeight","overflowY","whiteSpace","borderRadius","map","q","topic","options","opt","index","answer","fontWeight","explanation","id","to","_c","$RefreshReg$"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/pages/UploadReport.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Box,\n  Button,\n  Container,\n  Typography,\n  Paper,\n  AppBar,\n  Toolbar,\n  IconButton,\n  CircularProgress,\n  Alert\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport { useDropzone } from 'react-dropzone';\nimport { uploadFileToSupabase, ocrPdfFromSupabase } from '../services/ocrService'; \nimport { generateQuestionsFromMistakes, GeneratedQuestion } from '../services/aiService';\n\nconst UploadReport: React.FC = () => {\n  const [drawerOpen, setDrawerOpen] = useState<boolean>(false); \n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [extractedText, setExtractedText] = useState<string | null>(null);\n  const [generatedQuestions, setGeneratedQuestions] = useState<GeneratedQuestion[]>([]); \n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [loadingMessage, setLoadingMessage] = useState<string>('');\n  const [error, setError] = useState<string | null>(null);\n\n  const handleDrawerToggle = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (acceptedFiles && acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      if (file.type !== 'application/pdf') {\n        setError('Invalid file type. Please upload a PDF.');\n        setUploadedFile(null);\n        return;\n      }\n      setUploadedFile(file);\n      setError(null);\n      setExtractedText(null);\n      setGeneratedQuestions([]);\n      setIsLoading(true);\n      \n      try {\n        setLoadingMessage('Uploading PDF to secure storage...');\n        // You might want to make this public if your OCR function needs a public URL\n        // and your bucket policies allow. Otherwise, pass storagePath.\n        const { storagePath, publicUrl } = await uploadFileToSupabase(file, 'score-reports', { publicAccess: false });\n        console.log('File uploaded:', { storagePath, publicUrl });\n\n        setLoadingMessage('Extracting text from PDF (OCR process)... This may take a moment.');\n        // Use publicUrl if available and preferred by your OCR function, otherwise storagePath\n        const text = await ocrPdfFromSupabase(publicUrl, storagePath);\n        setExtractedText(text);\n        console.log('Text extracted:', text.substring(0, 100) + '...');\n        \n        setLoadingMessage('Generating practice questions with AI...');\n        const questions = await generateQuestionsFromMistakes(text);\n        setGeneratedQuestions(questions);\n        console.log('Questions generated:', questions);\n\n      } catch (err: any) {\n        console.error(\"Error processing file:\", err);\n        setError(`Failed to process the PDF: ${err.message || 'Unknown error'}. Check console for details.`);\n      } finally {\n        setIsLoading(false);\n        setLoadingMessage('');\n      }\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: { 'application/pdf': ['.pdf'] },\n    multiple: false\n  });\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle} \n            sx={{ mr: 2 }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Upload Score Report\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container maxWidth=\"md\" sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom align=\"center\">\n          Upload Your SAT Practice Report\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"text.secondary\" paragraph>\n          Upload your PDF score report to get personalized lessons and practice questions.\n        </Typography>\n\n        <Paper\n          {...getRootProps()}\n          elevation={3}\n          sx={{\n            p: 4,\n            mt: 3,\n            textAlign: 'center',\n            border: isDragActive ? '2px dashed primary.main' : '2px dashed grey.500',\n            backgroundColor: isDragActive ? 'action.hover' : 'background.paper',\n            cursor: 'pointer',\n            minHeight: 200,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          <input {...getInputProps()} />\n          <CloudUploadIcon sx={{ fontSize: 60, color: 'primary.main', mb: 2 }} />\n          {isDragActive ? (\n            <Typography variant=\"h6\">Drop the PDF here ...</Typography>\n          ) : (\n            <Typography variant=\"h6\">Drag 'n' drop a PDF file here, or click to select file</Typography>\n          )}\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            (Max file size: 10MB. Supported format: PDF)\n          </Typography>\n        </Paper>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mt: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {uploadedFile && !error && !isLoading && (\n          <Paper elevation={1} sx={{ p: 2, mt: 3 }}>\n            <Typography variant=\"h6\">Uploaded File:</Typography>\n            <Typography>{uploadedFile.name} ({Math.round(uploadedFile.size / 1024)} KB)</Typography>\n          </Paper>\n        )}\n\n        {isLoading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mt: 4 }}>\n            <CircularProgress />\n            <Typography sx={{ ml: 2 }}>{loadingMessage || 'Processing your report...'}</Typography>\n          </Box>\n        )}\n\n        {extractedText && !isLoading && (\n          <Paper elevation={1} sx={{ p: 2, mt: 3 }}>\n            <Typography variant=\"h6\">Extracted Text (Preview from OCR):</Typography>\n            <Typography variant=\"body2\" sx={{ maxHeight: 150, overflowY: 'auto', whiteSpace: 'pre-wrap', backgroundColor: 'grey.100', p:1, borderRadius:1 }}>\n              {extractedText}\n            </Typography>\n          </Paper>\n        )}\n        \n        {generatedQuestions.length > 0 && !isLoading && (\n          <Paper elevation={1} sx={{ p: 2, mt: 3 }}>\n            <Typography variant=\"h6\">AI Generated Practice Questions:</Typography>\n            {generatedQuestions.map(q => (\n              <Box key={q.id} sx={{ mb: 2, p:1.5, border: '1px solid #e0e0e0', borderRadius: 1}}>\n                <Typography variant=\"subtitle1\" gutterBottom>Topic: {q.topic}</Typography>\n                <Typography variant=\"body1\" gutterBottom><strong>Question:</strong> {q.text}</Typography>\n                {q.options && (\n                  <Box sx={{mb:1}}>\n                    <Typography variant=\"body2\">Options:</Typography>\n                    <ul>\n                      {q.options.map((opt, index) => <li key={index}><Typography variant=\"body2\">{opt}</Typography></li>)}\n                    </ul>\n                  </Box>\n                )}\n                {q.answer && <Typography variant=\"body2\" sx={{color: 'green', fontWeight: 'bold'}}>Answer: {q.answer}</Typography>}\n                {q.explanation && <Typography variant=\"caption\" display=\"block\" sx={{mt:0.5, color: 'text.secondary'}}>Explanation: {q.explanation}</Typography>}\n              </Box>\n            ))}\n          </Paper>\n        )}\n\n        <Box sx={{ mt: 4, display: 'flex', justifyContent: 'center' }}>\n          <Button component={Link} to=\"/dashboard\" variant=\"outlined\">\n            Back to Dashboard\n          </Button>\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default UploadReport; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}