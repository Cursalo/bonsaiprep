{"ast":null,"code":"import React,{useEffect,useState,useRef}from'react';import{Box,Typography,Paper,useTheme}from'@mui/material';import{useSpring,animated,config}from'react-spring';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Helper functions\nconst lerp=(a,b,t)=>a*(1-t)+b*t;const clamp=(num,min,max)=>Math.min(Math.max(num,min),max);const randRange=(min,max)=>Math.random()*(max-min)+min;const BonsaiTree=_ref=>{let{skills,totalSkills}=_ref;const theme=useTheme();const svgRef=useRef(null);const[recentlyMastered,setRecentlyMastered]=useState([]);const[showTooltip,setShowTooltip]=useState(null);const[animation,setAnimation]=useState(false);const[firstRender,setFirstRender]=useState(true);// Reference to track previous skills for comparison\nconst prevSkillsRef=useRef([]);// Calculate mastery percentage\nconst masteredSkills=skills.filter(skill=>skill.mastered);const masteryPercentage=Math.round(masteredSkills.length/totalSkills*100);// Spring animations\nconst percentageProps=useSpring({number:masteryPercentage,from:{number:0},config:{tension:120,friction:14},delay:300});const treeContainerProps=useSpring({from:{opacity:0,transform:'translateY(30px)'},to:{opacity:1,transform:'translateY(0px)'},config:config.gentle});// Group skills by category\nconst skillsByCategory=skills.reduce((acc,skill)=>{if(!acc[skill.category]){acc[skill.category]=[];}acc[skill.category].push(skill);return acc;},{});// Track skills that were recently mastered\nuseEffect(()=>{// Only run effect if not first render\nif(!firstRender){const prevMasteredIds=prevSkillsRef.current.filter(skill=>skill.mastered).map(skill=>skill.id);const currentMasteredIds=skills.filter(skill=>skill.mastered).map(skill=>skill.id);// Find newly mastered skills\nconst newlyMastered=currentMasteredIds.filter(id=>!prevMasteredIds.includes(id));if(newlyMastered.length>0){setRecentlyMastered(newlyMastered);setAnimation(true);// Reset animation state after animation completes\nconst timer=setTimeout(()=>{setAnimation(false);},3000);return()=>clearTimeout(timer);}}else{setFirstRender(false);}// Update reference\nprevSkillsRef.current=[...skills];},[skills,firstRender]);// Calculate tree health/vitality based on mastery\nconst treeVitality={// Trunk color darkens as tree matures\ntrunkBaseColor:masteryPercentage<30?'#8D6E63'// Lighter brown for younger tree\n:masteryPercentage<70?'#795548'// Medium brown\n:'#5D4037',// Dark rich brown for mature tree\n// Set trunk dimensions based on growth\ntrunkWidth:clamp(25+masteryPercentage/5,25,35),trunkHeight:clamp(140+masteryPercentage,150,220),// Pot style based on growth\npotWidth:clamp(90+masteryPercentage/3,90,110),potHeight:clamp(40+masteryPercentage/10,40,50),// Leaf base color becomes more vibrant with mastery\nleafBaseColor:masteryPercentage<30?'#A5D6A7'// Pale green for low mastery\n:masteryPercentage<60?'#66BB6A'// Medium green\n:'#4CAF50',// Vibrant green for high mastery\n// Overall size scaling factor\nscale:clamp(0.8+masteryPercentage/100,0.8,1.2)};// Generate branches\nconst generateBranches=()=>{const categories=Object.keys(skillsByCategory);const branches=[];// If no categories, return empty array\nif(categories.length===0)return branches;// Determine the main trunk end point (where it starts to curve)\nconst trunkEndY=300-treeVitality.trunkHeight*0.7;const trunkTop={x:150,y:trunkEndY};// Calculate branch points based on categories\nfor(let i=0;i<categories.length;i++){const category=categories[i];const skills=skillsByCategory[category];// Skip empty categories\nif(!skills||skills.length===0)continue;// Calculate the angle and position for this branch\nconst totalCategories=categories.length;let angle;if(totalCategories===1){// Single category - branch goes straight up\nangle=-Math.PI/2;}else if(i===0){// First branch - goes left\nangle=-Math.PI/2-randRange(0.2,0.6);}else if(i===totalCategories-1){// Last branch - goes right\nangle=-Math.PI/2+randRange(0.2,0.6);}else{// Middle branches - distributed between\nconst normalizedIndex=i/(totalCategories-1);angle=lerp(-Math.PI/2-0.5,-Math.PI/2+0.5,normalizedIndex);// Add slight randomness\nangle+=randRange(-0.1,0.1);}// Calculate mastery for this category\nconst categorySkills=skillsByCategory[category]||[];const masteredInCategory=categorySkills.filter(s=>s.mastered).length;const categoryMasteryRatio=categorySkills.length>0?masteredInCategory/categorySkills.length:0;// Set branch length based on category mastery and skill count\nconst minLength=40+skills.length*2;const maxLength=100+skills.length*3;const branchLength=lerp(minLength,maxLength,categoryMasteryRatio);// Calculate branch curve control points\nconst branchDirection={x:Math.cos(angle),y:Math.sin(angle)};// Branch end point\nconst endPoint={x:trunkTop.x+branchDirection.x*branchLength,y:trunkTop.y+branchDirection.y*branchLength};// Control points for natural curve - adjust these for different branch shapes\nconst controlPoint1={x:trunkTop.x+branchDirection.x*branchLength*0.3,y:trunkTop.y+branchDirection.y*branchLength*0.2-10};const controlPoint2={x:trunkTop.x+branchDirection.x*branchLength*0.7,y:trunkTop.y+branchDirection.y*branchLength*0.6-15};// Calculate thickness based on mastery and size\nconst thickness=6*(0.6+categoryMasteryRatio*0.4);// Generate branch object\nbranches.push({id:\"branch-\".concat(i),category,start:trunkTop,end:endPoint,control1:controlPoint1,control2:controlPoint2,thickness,angle,masteryRatio:categoryMasteryRatio,skills:skills});// If we have many categories, limit the number of branches\nif(branches.length>=3)break;}return branches;};const branches=generateBranches();// Generate leaf coordinates for a branch\nconst generateLeafCoordinates=(branch,skill,index)=>{const skills=branch.skills;const totalSkills=skills.length;// Get a t-value [0-1] along the curve based on the skill index\n// We want to distribute skills evenly\nconst t=clamp(0.3+(index+1)/(totalSkills+1)*0.7,0.3,0.95);// Calculate point on the cubic bezier curve\nconst p0=branch.start;const p1=branch.control1;const p2=branch.control2;const p3=branch.end;// Calculate position on the cubic bezier curve\n// Formula: P = (1-t)^3 * P0 + 3(1-t)^2 * t * P1 + 3(1-t) * t^2 * P2 + t^3 * P3\nconst t1=1-t;const t1_2=t1*t1;const t1_3=t1_2*t1;const t_2=t*t;const t_3=t_2*t;const x=t1_3*p0.x+3*t1_2*t*p1.x+3*t1*t_2*p2.x+t_3*p3.x;const y=t1_3*p0.y+3*t1_2*t*p1.y+3*t1*t_2*p2.y+t_3*p3.y;// Calculate the curve tangent to decide the leaf direction\nconst tangentX=-3*t1_2*p0.x+3*t1_2*p1.x-6*t1*t*p1.x+6*t1*t*p2.x-3*t_2*p2.x+3*t_2*p3.x;const tangentY=-3*t1_2*p0.y+3*t1_2*p1.y-6*t1*t*p1.y+6*t1*t*p2.y-3*t_2*p2.y+3*t_2*p3.y;// Normalize the tangent\nconst tangentLength=Math.sqrt(tangentX*tangentX+tangentY*tangentY);const normalizedTangentX=tangentX/tangentLength;const normalizedTangentY=tangentY/tangentLength;// Calculate perpendicular vector\nconst perpX=-normalizedTangentY;const perpY=normalizedTangentX;// Spread leaves on both sides of the branch\n// Alternate sides for a more natural look\nconst side=index%2===0?1:-1;// Offset from the curve\nconst offset=skill.masteryLevel/100*5+5;// Base position on the curve\nlet baseX=x+side*perpX*offset;let baseY=y+side*perpY*offset;// Add some random variation for a more natural look\nbaseX+=randRange(-3,3);baseY+=randRange(-3,3);// Calculate leaf size based on mastery level\nconst baseSize=6;const masteryBonus=skill.mastered?4:skill.masteryLevel/25;const size=baseSize+masteryBonus;return{x:baseX,y:baseY,size,// Add angle information for leaf orientation\nangle:Math.atan2(perpY,perpX)+side*Math.PI/4,isRecentlyMastered:recentlyMastered.includes(skill.id)&&skill.mastered};};// SVG path for leaf shape instead of circles\nconst getLeafPath=(x,y,size,angle)=>{// Rotate the leaf to point in the correct direction\nreturn\"\\n      <g transform=\\\"translate(\".concat(x,\", \").concat(y,\") rotate(\").concat(angle*180/Math.PI,\") scale(\").concat(size/10,\")\\\">\\n        <path d=\\\"M0,0 C1,-3 3,-5 5,-5 C8,-5 10,-2 10,2 C10,5 8,8 5,8 C2,8 0,5 0,3 C0,5 -2,8 -5,8 C-8,8 -10,5 -10,2 C-10,-2 -8,-5 -5,-5 C-3,-5 -1,-3 0,0 Z\\\" />\\n      </g>\\n    \");};// Animation update\nuseEffect(()=>{if(!svgRef.current||branches.length===0)return;// Skip animation if it's the first render\nif(firstRender)return;if(animation){// Add the SVG animation\nconst svg=svgRef.current;// Animate trunk growing\nconst trunk=svg.querySelector('#tree-trunk');if(trunk){trunk.classList.add('animate-grow');trunk.addEventListener('animationend',()=>{trunk.classList.remove('animate-grow');},{once:true});}// Animate branches\nbranches.forEach((branch,i)=>{const branchElement=svg.querySelector(\"#\".concat(branch.id));if(branchElement){branchElement.classList.add('animate-grow');branchElement.style.animationDelay=\"\".concat(i*0.2,\"s\");branchElement.addEventListener('animationend',()=>{branchElement.classList.remove('animate-grow');},{once:true});}});// Animate leaves\nrecentlyMastered.forEach(skillId=>{const leafElement=svg.querySelector(\"#leaf-\".concat(skillId));if(leafElement){leafElement.classList.add('animate-leaf-grow');leafElement.addEventListener('animationend',()=>{leafElement.classList.remove('animate-leaf-grow');},{once:true});}});}},[animation,branches,recentlyMastered,firstRender]);return/*#__PURE__*/_jsx(animated.div,{style:treeContainerProps,children:/*#__PURE__*/_jsxs(Paper,{elevation:3,className:\"glass-morphism\",sx:{p:4,mb:4,position:'relative',overflow:'hidden',borderRadius:'4px',transition:'all 0.5s ease'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,align:\"center\",sx:{fontFamily:'DM Sans, sans-serif',fontWeight:'bold',color:theme.palette.primary.main,mb:3},children:\"Your Bonsai Learning Tree\"}),/*#__PURE__*/_jsxs(Box,{sx:{textAlign:'center',mb:3,animation:animation?'pulse 2s ease-in-out':'none'},children:[/*#__PURE__*/_jsx(animated.div,{style:{display:'inline-block',fontSize:'2.5rem',fontWeight:'bold',color:theme.palette.primary.main,animation:animation?'colorShift 2s ease-in-out':'none'},children:percentageProps.number.to(n=>\"\".concat(Math.floor(n),\"%\"))}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",sx:{fontFamily:'DM Sans, sans-serif'},children:\"Skills Mastered\"})]}),/*#__PURE__*/_jsxs(Box,{sx:{width:'100%',height:450,position:'relative',borderRadius:2,overflow:'hidden',transition:'all 0.5s ease'},children:[/*#__PURE__*/_jsx(Box,{sx:{position:'absolute',bottom:0,left:0,width:'100%',height:'30%',background:'linear-gradient(to top, rgba(232, 245, 233, 0.6) 0%, rgba(232, 245, 233, 0) 100%)',zIndex:1}}),/*#__PURE__*/_jsx(Box,{sx:{position:'absolute',top:20,right:25,width:60,height:60,borderRadius:'50%',background:'radial-gradient(circle, rgba(255,236,179,0.3) 0%, rgba(255,236,179,0) 70%)',zIndex:1}}),/*#__PURE__*/_jsx(Box,{sx:{width:'100%',height:'100%',position:'relative',zIndex:2,transform:\"scale(\".concat(treeVitality.scale,\")\"),transition:'transform 1s ease-in-out'},children:/*#__PURE__*/_jsxs(\"svg\",{ref:svgRef,width:\"100%\",height:\"100%\",viewBox:\"0 0 300 450\",overflow:\"visible\",style:{marginTop:'-20px'},children:[/*#__PURE__*/_jsxs(\"defs\",{children:[/*#__PURE__*/_jsxs(\"radialGradient\",{id:\"potGradient\",cx:\"50%\",cy:\"30%\",r:\"70%\",fx:\"50%\",fy:\"30%\",children:[/*#__PURE__*/_jsx(\"stop\",{offset:\"0%\",stopColor:\"#8D6E63\"}),/*#__PURE__*/_jsx(\"stop\",{offset:\"90%\",stopColor:\"#5D4037\"})]}),/*#__PURE__*/_jsxs(\"linearGradient\",{id:\"trunkGradient\",x1:\"0%\",y1:\"0%\",x2:\"100%\",y2:\"0%\",children:[/*#__PURE__*/_jsx(\"stop\",{offset:\"0%\",stopColor:treeVitality.trunkBaseColor}),/*#__PURE__*/_jsx(\"stop\",{offset:\"50%\",stopColor:\"#6D4C41\"}),/*#__PURE__*/_jsx(\"stop\",{offset:\"100%\",stopColor:treeVitality.trunkBaseColor})]}),branches.map((branch,i)=>/*#__PURE__*/_jsxs(\"linearGradient\",{id:\"branchGradient-\".concat(i),x1:\"0%\",y1:\"0%\",x2:\"100%\",y2:\"0%\",gradientUnits:\"userSpaceOnUse\",gradientTransform:\"rotate(\".concat(branch.angle*180/Math.PI,\")\"),children:[/*#__PURE__*/_jsx(\"stop\",{offset:\"0%\",stopColor:\"#6D4C41\"}),/*#__PURE__*/_jsx(\"stop\",{offset:\"100%\",stopColor:\"#8D6E63\"})]},\"branch-gradient-\".concat(i))),/*#__PURE__*/_jsxs(\"filter\",{id:\"leaf-glow\",x:\"-50%\",y:\"-50%\",width:\"200%\",height:\"200%\",children:[/*#__PURE__*/_jsx(\"feGaussianBlur\",{stdDeviation:\"2\",result:\"blur\"}),/*#__PURE__*/_jsx(\"feComposite\",{in:\"SourceGraphic\",in2:\"blur\",operator:\"over\"})]}),/*#__PURE__*/_jsx(\"style\",{type:\"text/css\",children:\"\\n                    @keyframes leafGrow {\\n                      0% { transform: scale(0); opacity: 0; }\\n                      60% { transform: scale(1.5); opacity: 1; }\\n                      100% { transform: scale(1); opacity: 1; }\\n                    }\\n                    \\n                    @keyframes branchGrow {\\n                      0% { stroke-dashoffset: 1000; }\\n                      100% { stroke-dashoffset: 0; }\\n                    }\\n                    \\n                    @keyframes pulse {\\n                      0% { opacity: 0.5; transform: scale(1); }\\n                      50% { opacity: 1; transform: scale(1.1); }\\n                      100% { opacity: 0.5; transform: scale(1); }\\n                    }\\n                    \\n                    .animate-grow {\\n                      stroke-dasharray: 1000;\\n                      stroke-dashoffset: 1000;\\n                      animation: branchGrow 1.5s ease-in-out forwards;\\n                    }\\n                    \\n                    .animate-leaf-grow {\\n                      animation: leafGrow 0.8s ease-out forwards;\\n                    }\\n                    \\n                    .leaf-pulse {\\n                      animation: pulse 2s infinite;\\n                    }\\n                  \"})]}),/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"ellipse\",{cx:\"150\",cy:\"380\",rx:treeVitality.potWidth,ry:\"15\",fill:\"#A1887F\"}),/*#__PURE__*/_jsx(\"path\",{d:\"\\n                    M\".concat(150-treeVitality.potWidth,\", 380 \\n                    L\").concat(150-treeVitality.potWidth*0.8,\", \").concat(380+treeVitality.potHeight,\"\\n                    L\").concat(150+treeVitality.potWidth*0.8,\", \").concat(380+treeVitality.potHeight,\"\\n                    L\").concat(150+treeVitality.potWidth,\", 380\\n                  \"),fill:\"url(#potGradient)\"}),/*#__PURE__*/_jsx(\"ellipse\",{cx:\"150\",cy:380+treeVitality.potHeight,rx:treeVitality.potWidth*0.8,ry:\"6\",fill:\"#5D4037\"})]}),/*#__PURE__*/_jsx(\"g\",{children:/*#__PURE__*/_jsx(\"path\",{id:\"tree-trunk\",d:\"\\n                    M\".concat(150-treeVitality.trunkWidth*0.25,\", 380\\n                    C\").concat(150-treeVitality.trunkWidth*0.4,\", \").concat(380-treeVitality.trunkHeight*0.3,\"\\n                     \").concat(150-treeVitality.trunkWidth*0.2,\", \").concat(380-treeVitality.trunkHeight*0.7,\"\\n                     \",150,\", \").concat(380-treeVitality.trunkHeight,\"\\n                  \"),fill:\"none\",stroke:\"url(#trunkGradient)\",strokeWidth:treeVitality.trunkWidth,strokeLinecap:\"round\"})}),branches.map((branch,index)=>/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"path\",{id:branch.id,d:\"\\n                      M\".concat(branch.start.x,\", \").concat(branch.start.y,\"\\n                      C\").concat(branch.control1.x,\", \").concat(branch.control1.y,\"\\n                       \").concat(branch.control2.x,\", \").concat(branch.control2.y,\"\\n                       \").concat(branch.end.x,\", \").concat(branch.end.y,\"\\n                    \"),fill:\"none\",stroke:\"url(#branchGradient-\".concat(index,\")\"),strokeWidth:branch.thickness,strokeLinecap:\"round\"}),branch.skills.map((skill,skillIndex)=>{const leaf=generateLeafCoordinates(branch,skill,skillIndex);return/*#__PURE__*/_jsx(\"foreignObject\",{id:\"leaf-\".concat(skill.id),x:leaf.x-20,y:leaf.y-20,width:40,height:40,style:{overflow:'visible',transition:'all 0.3s ease'},onMouseEnter:()=>setShowTooltip(skill.id),onMouseLeave:()=>setShowTooltip(null),children:/*#__PURE__*/_jsx(\"svg\",{width:\"40\",height:\"40\",viewBox:\"-20 -20 40 40\",style:{overflow:'visible',filter:leaf.isRecentlyMastered?'url(#leaf-glow)':'none'},children:/*#__PURE__*/_jsx(\"g\",{transform:\"rotate(\".concat(leaf.angle*180/Math.PI,\")\"),children:/*#__PURE__*/_jsx(\"path\",{d:\"M0,0 C1,-5 5,-10 10,-10 C15,-8 15,0 10,5 C5,10 0,8 0,5 C0,8 -5,10 -10,5 C-15,0 -15,-8 -10,-10 C-5,-10 -1,-5 0,0 Z\",fill:skill.mastered?theme.palette.primary.main:treeVitality.leafBaseColor,opacity:skill.mastered?1:0.5+skill.masteryLevel/200,className:leaf.isRecentlyMastered?'leaf-pulse':'',transform:\"scale(\".concat(leaf.size/20,\")\")})})})},\"leaf-\".concat(skill.id));})]},branch.id)),showTooltip&&skills.map(skill=>{if(skill.id===showTooltip){// Find this skill's branch and position\nfor(const branch of branches){const skillIndex=branch.skills.findIndex(s=>s.id===skill.id);if(skillIndex>=0){const leaf=generateLeafCoordinates(branch,skill,skillIndex);return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"rect\",{x:leaf.x-60,y:leaf.y-50,width:\"120\",height:\"30\",rx:\"4\",ry:\"4\",fill:\"rgba(255,255,255,0.9)\",stroke:theme.palette.primary.main,strokeWidth:\"1\"}),/*#__PURE__*/_jsx(\"text\",{x:leaf.x,y:leaf.y-30,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:theme.palette.text.primary,fontSize:\"10\",fontFamily:\"DM Sans, sans-serif\",children:skill.name}),skill.mastered&&/*#__PURE__*/_jsx(\"text\",{x:leaf.x,y:leaf.y-40,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:theme.palette.success.main,fontSize:\"8\",fontFamily:\"DM Sans, sans-serif\",fontWeight:\"bold\",children:\"MASTERED\"})]},\"tooltip-\".concat(skill.id));}}}return null;})]})}),/*#__PURE__*/_jsxs(Box,{sx:{position:'absolute',bottom:15,right:15,background:'rgba(255,255,255,0.8)',p:1.5,borderRadius:'4px',boxShadow:'0 2px 8px rgba(0,0,0,0.1)',backdropFilter:'blur(8px)',zIndex:10},children:[/*#__PURE__*/_jsx(Typography,{variant:\"caption\",display:\"block\",sx:{fontWeight:'bold',mb:0.5,fontFamily:'DM Sans, sans-serif'},children:\"Your Learning Growth\"}),/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",display:\"block\",sx:{fontFamily:'DM Sans, sans-serif'},children:[/*#__PURE__*/_jsx(Box,{component:\"span\",sx:{display:'inline-block',width:10,height:10,borderRadius:'50%',backgroundColor:theme.palette.primary.main,mr:1}}),\"Mastered Skills\"]}),/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",display:\"block\",sx:{fontFamily:'DM Sans, sans-serif'},children:[/*#__PURE__*/_jsx(Box,{component:\"span\",sx:{display:'inline-block',width:10,height:10,borderRadius:'50%',backgroundColor:treeVitality.leafBaseColor,opacity:0.7,mr:1}}),\"Skills In Progress\"]})]})]}),/*#__PURE__*/_jsxs(Typography,{align:\"center\",variant:\"body2\",color:\"text.secondary\",sx:{mt:2,fontFamily:'DM Sans, sans-serif',animation:animation?'fadeIn 1s ease-in-out':'none'},children:[\"You've mastered \",masteredSkills.length,\" skills so far! Keep growing!\"]})]})});};export default BonsaiTree;","map":{"version":3,"names":["React","useEffect","useState","useRef","Box","Typography","Paper","useTheme","useSpring","animated","config","jsx","_jsx","jsxs","_jsxs","lerp","a","b","t","clamp","num","min","max","Math","randRange","random","BonsaiTree","_ref","skills","totalSkills","theme","svgRef","recentlyMastered","setRecentlyMastered","showTooltip","setShowTooltip","animation","setAnimation","firstRender","setFirstRender","prevSkillsRef","masteredSkills","filter","skill","mastered","masteryPercentage","round","length","percentageProps","number","from","tension","friction","delay","treeContainerProps","opacity","transform","to","gentle","skillsByCategory","reduce","acc","category","push","prevMasteredIds","current","map","id","currentMasteredIds","newlyMastered","includes","timer","setTimeout","clearTimeout","treeVitality","trunkBaseColor","trunkWidth","trunkHeight","potWidth","potHeight","leafBaseColor","scale","generateBranches","categories","Object","keys","branches","trunkEndY","trunkTop","x","y","i","totalCategories","angle","PI","normalizedIndex","categorySkills","masteredInCategory","s","categoryMasteryRatio","minLength","maxLength","branchLength","branchDirection","cos","sin","endPoint","controlPoint1","controlPoint2","thickness","concat","start","end","control1","control2","masteryRatio","generateLeafCoordinates","branch","index","p0","p1","p2","p3","t1","t1_2","t1_3","t_2","t_3","tangentX","tangentY","tangentLength","sqrt","normalizedTangentX","normalizedTangentY","perpX","perpY","side","offset","masteryLevel","baseX","baseY","baseSize","masteryBonus","size","atan2","isRecentlyMastered","getLeafPath","svg","trunk","querySelector","classList","add","addEventListener","remove","once","forEach","branchElement","style","animationDelay","skillId","leafElement","div","children","elevation","className","sx","p","mb","position","overflow","borderRadius","transition","variant","gutterBottom","align","fontFamily","fontWeight","color","palette","primary","main","textAlign","display","fontSize","n","floor","width","height","bottom","left","background","zIndex","top","right","ref","viewBox","marginTop","cx","cy","r","fx","fy","stopColor","x1","y1","x2","y2","gradientUnits","gradientTransform","stdDeviation","result","in","in2","operator","type","rx","ry","fill","d","stroke","strokeWidth","strokeLinecap","skillIndex","leaf","onMouseEnter","onMouseLeave","findIndex","textAnchor","dominantBaseline","text","name","success","boxShadow","backdropFilter","component","backgroundColor","mr","mt"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Box, Typography, Paper, useTheme, Tooltip } from '@mui/material';\nimport { useSpring, animated, config } from 'react-spring';\n\ninterface Skill {\n  id: string;\n  name: string;\n  category: string;\n  mastered: boolean;\n  masteryLevel: number;\n}\n\ninterface BonsaiTreeProps {\n  skills: Skill[];\n  totalSkills: number;\n}\n\n// Helper functions\nconst lerp = (a: number, b: number, t: number) => a * (1 - t) + b * t;\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\nconst randRange = (min: number, max: number) => Math.random() * (max - min) + min;\n\nconst BonsaiTree: React.FC<BonsaiTreeProps> = ({ skills, totalSkills }) => {\n  const theme = useTheme();\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [recentlyMastered, setRecentlyMastered] = useState<string[]>([]);\n  const [showTooltip, setShowTooltip] = useState<string | null>(null);\n  const [animation, setAnimation] = useState<boolean>(false);\n  const [firstRender, setFirstRender] = useState<boolean>(true);\n\n  // Reference to track previous skills for comparison\n  const prevSkillsRef = useRef<Skill[]>([]);\n  \n  // Calculate mastery percentage\n  const masteredSkills = skills.filter(skill => skill.mastered);\n  const masteryPercentage = Math.round((masteredSkills.length / totalSkills) * 100);\n  \n  // Spring animations\n  const percentageProps = useSpring({\n    number: masteryPercentage,\n    from: { number: 0 },\n    config: { tension: 120, friction: 14 },\n    delay: 300,\n  });\n\n  const treeContainerProps = useSpring({\n    from: { opacity: 0, transform: 'translateY(30px)' },\n    to: { opacity: 1, transform: 'translateY(0px)' },\n    config: config.gentle,\n  });\n\n  // Group skills by category\n  const skillsByCategory = skills.reduce((acc, skill) => {\n    if (!acc[skill.category]) {\n      acc[skill.category] = [];\n    }\n    acc[skill.category].push(skill);\n    return acc;\n  }, {} as Record<string, Skill[]>);\n\n  // Track skills that were recently mastered\n  useEffect(() => {\n    // Only run effect if not first render\n    if (!firstRender) {\n      const prevMasteredIds = prevSkillsRef.current\n        .filter(skill => skill.mastered)\n        .map(skill => skill.id);\n      \n      const currentMasteredIds = skills\n        .filter(skill => skill.mastered)\n        .map(skill => skill.id);\n      \n      // Find newly mastered skills\n      const newlyMastered = currentMasteredIds.filter(id => !prevMasteredIds.includes(id));\n      \n      if (newlyMastered.length > 0) {\n        setRecentlyMastered(newlyMastered);\n        setAnimation(true);\n        \n        // Reset animation state after animation completes\n        const timer = setTimeout(() => {\n          setAnimation(false);\n        }, 3000);\n        \n        return () => clearTimeout(timer);\n      }\n    } else {\n      setFirstRender(false);\n    }\n    // Update reference\n    prevSkillsRef.current = [...skills];\n  }, [skills, firstRender]);\n\n  // Calculate tree health/vitality based on mastery\n  const treeVitality = {\n    // Trunk color darkens as tree matures\n    trunkBaseColor: masteryPercentage < 30 \n      ? '#8D6E63' // Lighter brown for younger tree\n      : masteryPercentage < 70\n        ? '#795548' // Medium brown\n        : '#5D4037', // Dark rich brown for mature tree\n        \n    // Set trunk dimensions based on growth\n    trunkWidth: clamp(25 + (masteryPercentage / 5), 25, 35),\n    trunkHeight: clamp(140 + masteryPercentage, 150, 220),\n    \n    // Pot style based on growth\n    potWidth: clamp(90 + (masteryPercentage / 3), 90, 110),\n    potHeight: clamp(40 + (masteryPercentage / 10), 40, 50),\n    \n    // Leaf base color becomes more vibrant with mastery\n    leafBaseColor: masteryPercentage < 30 \n      ? '#A5D6A7' // Pale green for low mastery\n      : masteryPercentage < 60 \n        ? '#66BB6A' // Medium green\n        : '#4CAF50', // Vibrant green for high mastery\n    \n    // Overall size scaling factor\n    scale: clamp(0.8 + (masteryPercentage / 100), 0.8, 1.2)\n  };\n\n  // Generate branches\n  const generateBranches = () => {\n    const categories = Object.keys(skillsByCategory);\n    const branches = [];\n    \n    // If no categories, return empty array\n    if (categories.length === 0) return branches;\n    \n    // Determine the main trunk end point (where it starts to curve)\n    const trunkEndY = 300 - treeVitality.trunkHeight * 0.7;\n    const trunkTop = { x: 150, y: trunkEndY };\n    \n    // Calculate branch points based on categories\n    for (let i = 0; i < categories.length; i++) {\n      const category = categories[i];\n      const skills = skillsByCategory[category];\n      \n      // Skip empty categories\n      if (!skills || skills.length === 0) continue;\n      \n      // Calculate the angle and position for this branch\n      const totalCategories = categories.length;\n      let angle;\n      \n      if (totalCategories === 1) {\n        // Single category - branch goes straight up\n        angle = -Math.PI/2;\n      } else if (i === 0) {\n        // First branch - goes left\n        angle = -Math.PI/2 - randRange(0.2, 0.6);\n      } else if (i === totalCategories - 1) {\n        // Last branch - goes right\n        angle = -Math.PI/2 + randRange(0.2, 0.6);\n      } else {\n        // Middle branches - distributed between\n        const normalizedIndex = i / (totalCategories - 1);\n        angle = lerp(-Math.PI/2 - 0.5, -Math.PI/2 + 0.5, normalizedIndex);\n        // Add slight randomness\n        angle += randRange(-0.1, 0.1);\n      }\n      \n      // Calculate mastery for this category\n      const categorySkills = skillsByCategory[category] || [];\n      const masteredInCategory = categorySkills.filter(s => s.mastered).length;\n      const categoryMasteryRatio = categorySkills.length > 0 \n        ? masteredInCategory / categorySkills.length \n        : 0;\n      \n      // Set branch length based on category mastery and skill count\n      const minLength = 40 + (skills.length * 2);\n      const maxLength = 100 + (skills.length * 3);\n      const branchLength = lerp(minLength, maxLength, categoryMasteryRatio);\n      \n      // Calculate branch curve control points\n      const branchDirection = { \n        x: Math.cos(angle),\n        y: Math.sin(angle)\n      };\n      \n      // Branch end point\n      const endPoint = {\n        x: trunkTop.x + branchDirection.x * branchLength,\n        y: trunkTop.y + branchDirection.y * branchLength\n      };\n      \n      // Control points for natural curve - adjust these for different branch shapes\n      const controlPoint1 = {\n        x: trunkTop.x + branchDirection.x * branchLength * 0.3,\n        y: trunkTop.y + branchDirection.y * branchLength * 0.2 - 10\n      };\n      \n      const controlPoint2 = {\n        x: trunkTop.x + branchDirection.x * branchLength * 0.7, \n        y: trunkTop.y + branchDirection.y * branchLength * 0.6 - 15\n      };\n      \n      // Calculate thickness based on mastery and size\n      const thickness = 6 * (0.6 + (categoryMasteryRatio * 0.4));\n      \n      // Generate branch object\n      branches.push({\n        id: `branch-${i}`,\n        category,\n        start: trunkTop,\n        end: endPoint,\n        control1: controlPoint1,\n        control2: controlPoint2,\n        thickness,\n        angle,\n        masteryRatio: categoryMasteryRatio,\n        skills: skills,\n      });\n      \n      // If we have many categories, limit the number of branches\n      if (branches.length >= 3) break;\n    }\n    \n    return branches;\n  };\n  \n  const branches = generateBranches();\n\n  // Generate leaf coordinates for a branch\n  const generateLeafCoordinates = (branch: any, skill: Skill, index: number) => {\n    const skills = branch.skills;\n    const totalSkills = skills.length;\n    \n    // Get a t-value [0-1] along the curve based on the skill index\n    // We want to distribute skills evenly\n    const t = clamp(0.3 + ((index + 1) / (totalSkills + 1)) * 0.7, 0.3, 0.95);\n\n    // Calculate point on the cubic bezier curve\n    const p0 = branch.start;\n    const p1 = branch.control1;\n    const p2 = branch.control2;\n    const p3 = branch.end;\n    \n    // Calculate position on the cubic bezier curve\n    // Formula: P = (1-t)^3 * P0 + 3(1-t)^2 * t * P1 + 3(1-t) * t^2 * P2 + t^3 * P3\n    const t1 = 1 - t;\n    const t1_2 = t1 * t1;\n    const t1_3 = t1_2 * t1;\n    const t_2 = t * t;\n    const t_3 = t_2 * t;\n    \n    const x = t1_3 * p0.x + 3 * t1_2 * t * p1.x + 3 * t1 * t_2 * p2.x + t_3 * p3.x;\n    const y = t1_3 * p0.y + 3 * t1_2 * t * p1.y + 3 * t1 * t_2 * p2.y + t_3 * p3.y;\n    \n    // Calculate the curve tangent to decide the leaf direction\n    const tangentX = -3 * t1_2 * p0.x + 3 * t1_2 * p1.x - 6 * t1 * t * p1.x + \n                 6 * t1 * t * p2.x - 3 * t_2 * p2.x + 3 * t_2 * p3.x;\n    const tangentY = -3 * t1_2 * p0.y + 3 * t1_2 * p1.y - 6 * t1 * t * p1.y + \n                 6 * t1 * t * p2.y - 3 * t_2 * p2.y + 3 * t_2 * p3.y;\n    \n    // Normalize the tangent\n    const tangentLength = Math.sqrt(tangentX * tangentX + tangentY * tangentY);\n    const normalizedTangentX = tangentX / tangentLength;\n    const normalizedTangentY = tangentY / tangentLength;\n    \n    // Calculate perpendicular vector\n    const perpX = -normalizedTangentY;\n    const perpY = normalizedTangentX;\n    \n    // Spread leaves on both sides of the branch\n    // Alternate sides for a more natural look\n    const side = index % 2 === 0 ? 1 : -1;\n    \n    // Offset from the curve\n    const offset = ((skill.masteryLevel / 100) * 5) + 5;\n    \n    // Base position on the curve\n    let baseX = x + side * perpX * offset;\n    let baseY = y + side * perpY * offset;\n    \n    // Add some random variation for a more natural look\n    baseX += randRange(-3, 3);\n    baseY += randRange(-3, 3);\n    \n    // Calculate leaf size based on mastery level\n    const baseSize = 6;\n    const masteryBonus = skill.mastered ? 4 : (skill.masteryLevel / 25);\n    const size = baseSize + masteryBonus;\n    \n    return {\n      x: baseX,\n      y: baseY,\n      size,\n      // Add angle information for leaf orientation\n      angle: Math.atan2(perpY, perpX) + (side * Math.PI / 4),\n      isRecentlyMastered: recentlyMastered.includes(skill.id) && skill.mastered\n    };\n  };\n  \n  // SVG path for leaf shape instead of circles\n  const getLeafPath = (x: number, y: number, size: number, angle: number) => {\n    // Rotate the leaf to point in the correct direction\n    return `\n      <g transform=\"translate(${x}, ${y}) rotate(${angle * 180 / Math.PI}) scale(${size / 10})\">\n        <path d=\"M0,0 C1,-3 3,-5 5,-5 C8,-5 10,-2 10,2 C10,5 8,8 5,8 C2,8 0,5 0,3 C0,5 -2,8 -5,8 C-8,8 -10,5 -10,2 C-10,-2 -8,-5 -5,-5 C-3,-5 -1,-3 0,0 Z\" />\n      </g>\n    `;\n  };\n  \n  // Animation update\n  useEffect(() => {\n    if (!svgRef.current || branches.length === 0) return;\n    \n    // Skip animation if it's the first render\n    if (firstRender) return;\n\n    if (animation) {\n      // Add the SVG animation\n      const svg = svgRef.current;\n      \n      // Animate trunk growing\n      const trunk = svg.querySelector('#tree-trunk');\n      if (trunk) {\n        trunk.classList.add('animate-grow');\n        trunk.addEventListener('animationend', () => {\n          trunk.classList.remove('animate-grow');\n        }, { once: true });\n      }\n      \n      // Animate branches\n      branches.forEach((branch, i) => {\n        const branchElement = svg.querySelector(`#${branch.id}`);\n        if (branchElement) {\n          branchElement.classList.add('animate-grow');\n          branchElement.style.animationDelay = `${i * 0.2}s`;\n          branchElement.addEventListener('animationend', () => {\n            branchElement.classList.remove('animate-grow');\n          }, { once: true });\n        }\n      });\n      \n      // Animate leaves\n      recentlyMastered.forEach(skillId => {\n        const leafElement = svg.querySelector(`#leaf-${skillId}`);\n        if (leafElement) {\n          leafElement.classList.add('animate-leaf-grow');\n          leafElement.addEventListener('animationend', () => {\n            leafElement.classList.remove('animate-leaf-grow');\n          }, { once: true });\n        }\n      });\n    }\n  }, [animation, branches, recentlyMastered, firstRender]);\n\n  return (\n    <animated.div style={treeContainerProps}>\n      <Paper \n        elevation={3} \n        className=\"glass-morphism\"\n        sx={{ \n          p: 4, \n          mb: 4, \n          position: 'relative',\n          overflow: 'hidden',\n          borderRadius: '4px',\n          transition: 'all 0.5s ease',\n        }}\n      >\n        <Typography \n          variant=\"h5\" \n          gutterBottom \n          align=\"center\" \n          sx={{ \n            fontFamily: 'DM Sans, sans-serif',\n            fontWeight: 'bold', \n            color: theme.palette.primary.main,\n            mb: 3\n          }}\n        >\n          Your Bonsai Learning Tree\n        </Typography>\n        \n        <Box sx={{ \n          textAlign: 'center', \n          mb: 3,\n          animation: animation ? 'pulse 2s ease-in-out' : 'none',\n        }}>\n          <animated.div style={{\n            display: 'inline-block',\n            fontSize: '2.5rem',\n            fontWeight: 'bold',\n            color: theme.palette.primary.main,\n            animation: animation ? 'colorShift 2s ease-in-out' : 'none',\n          }}>\n            {percentageProps.number.to(n => `${Math.floor(n)}%`)}\n          </animated.div>\n          <Typography \n            variant=\"body2\" \n            color=\"text.secondary\"\n            sx={{ fontFamily: 'DM Sans, sans-serif' }}\n          >\n            Skills Mastered\n          </Typography>\n        </Box>\n        \n        <Box sx={{ \n          width: '100%', \n          height: 450,\n          position: 'relative',\n          borderRadius: 2,\n          overflow: 'hidden',\n          transition: 'all 0.5s ease',\n        }}>\n          {/* Background gradient */}\n          <Box sx={{\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n            width: '100%',\n            height: '30%',\n            background: 'linear-gradient(to top, rgba(232, 245, 233, 0.6) 0%, rgba(232, 245, 233, 0) 100%)',\n            zIndex: 1\n          }} />\n          \n          {/* Light effect */}\n          <Box sx={{\n            position: 'absolute',\n            top: 20,\n            right: 25,\n            width: 60,\n            height: 60,\n            borderRadius: '50%',\n            background: 'radial-gradient(circle, rgba(255,236,179,0.3) 0%, rgba(255,236,179,0) 70%)',\n            zIndex: 1\n          }} />\n          \n          {/* Tree SVG */}\n          <Box sx={{\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            zIndex: 2,\n            transform: `scale(${treeVitality.scale})`,\n            transition: 'transform 1s ease-in-out',\n          }}>\n            <svg \n              ref={svgRef}\n              width=\"100%\" \n              height=\"100%\" \n              viewBox=\"0 0 300 450\" \n              overflow=\"visible\"\n              style={{ marginTop: '-20px' }}\n            >\n              <defs>\n                {/* Gradients for tree elements */}\n                <radialGradient id=\"potGradient\" cx=\"50%\" cy=\"30%\" r=\"70%\" fx=\"50%\" fy=\"30%\">\n                  <stop offset=\"0%\" stopColor=\"#8D6E63\" />\n                  <stop offset=\"90%\" stopColor=\"#5D4037\" />\n                </radialGradient>\n                \n                <linearGradient id=\"trunkGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor={treeVitality.trunkBaseColor} />\n                  <stop offset=\"50%\" stopColor=\"#6D4C41\" />\n                  <stop offset=\"100%\" stopColor={treeVitality.trunkBaseColor} />\n                </linearGradient>\n                \n                {/* Gradients for each branch */}\n                {branches.map((branch, i) => (\n                  <linearGradient \n                    key={`branch-gradient-${i}`}\n                    id={`branchGradient-${i}`} \n                    x1=\"0%\" \n                    y1=\"0%\" \n                    x2=\"100%\" \n                    y2=\"0%\" \n                    gradientUnits=\"userSpaceOnUse\"\n                    gradientTransform={`rotate(${branch.angle * 180 / Math.PI})`}\n                  >\n                    <stop offset=\"0%\" stopColor=\"#6D4C41\" />\n                    <stop offset=\"100%\" stopColor=\"#8D6E63\" />\n                  </linearGradient>\n                ))}\n                \n                {/* Leaf filter for glow effect */}\n                <filter id=\"leaf-glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                  <feGaussianBlur stdDeviation=\"2\" result=\"blur\" />\n                  <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n                </filter>\n                \n                {/* Animation keyframes */}\n                <style type=\"text/css\">\n                  {`\n                    @keyframes leafGrow {\n                      0% { transform: scale(0); opacity: 0; }\n                      60% { transform: scale(1.5); opacity: 1; }\n                      100% { transform: scale(1); opacity: 1; }\n                    }\n                    \n                    @keyframes branchGrow {\n                      0% { stroke-dashoffset: 1000; }\n                      100% { stroke-dashoffset: 0; }\n                    }\n                    \n                    @keyframes pulse {\n                      0% { opacity: 0.5; transform: scale(1); }\n                      50% { opacity: 1; transform: scale(1.1); }\n                      100% { opacity: 0.5; transform: scale(1); }\n                    }\n                    \n                    .animate-grow {\n                      stroke-dasharray: 1000;\n                      stroke-dashoffset: 1000;\n                      animation: branchGrow 1.5s ease-in-out forwards;\n                    }\n                    \n                    .animate-leaf-grow {\n                      animation: leafGrow 0.8s ease-out forwards;\n                    }\n                    \n                    .leaf-pulse {\n                      animation: pulse 2s infinite;\n                    }\n                  `}\n                </style>\n              </defs>\n              \n              {/* Pot/Base */}\n              <g>\n                <ellipse \n                  cx=\"150\" \n                  cy=\"380\" \n                  rx={treeVitality.potWidth} \n                  ry=\"15\" \n                  fill=\"#A1887F\" \n                />\n                <path \n                  d={`\n                    M${150 - treeVitality.potWidth}, 380 \n                    L${150 - treeVitality.potWidth * 0.8}, ${380 + treeVitality.potHeight}\n                    L${150 + treeVitality.potWidth * 0.8}, ${380 + treeVitality.potHeight}\n                    L${150 + treeVitality.potWidth}, 380\n                  `}\n                  fill=\"url(#potGradient)\"\n                />\n                <ellipse \n                  cx=\"150\" \n                  cy={380 + treeVitality.potHeight} \n                  rx={treeVitality.potWidth * 0.8} \n                  ry=\"6\" \n                  fill=\"#5D4037\" \n                />\n              </g>\n              \n              {/* Trunk */}\n              <g>\n                <path\n                  id=\"tree-trunk\"\n                  d={`\n                    M${150 - treeVitality.trunkWidth * 0.25}, 380\n                    C${150 - treeVitality.trunkWidth * 0.4}, ${380 - treeVitality.trunkHeight * 0.3}\n                     ${150 - treeVitality.trunkWidth * 0.2}, ${380 - treeVitality.trunkHeight * 0.7}\n                     ${150}, ${380 - treeVitality.trunkHeight}\n                  `}\n                  fill=\"none\"\n                  stroke=\"url(#trunkGradient)\"\n                  strokeWidth={treeVitality.trunkWidth}\n                  strokeLinecap=\"round\"\n                />\n              </g>\n              \n              {/* Branches */}\n              {branches.map((branch, index) => (\n                <g key={branch.id}>\n                  <path\n                    id={branch.id}\n                    d={`\n                      M${branch.start.x}, ${branch.start.y}\n                      C${branch.control1.x}, ${branch.control1.y}\n                       ${branch.control2.x}, ${branch.control2.y}\n                       ${branch.end.x}, ${branch.end.y}\n                    `}\n                    fill=\"none\"\n                    stroke={`url(#branchGradient-${index})`}\n                    strokeWidth={branch.thickness}\n                    strokeLinecap=\"round\"\n                  />\n                  \n                  {/* Skills as leaves */}\n                  {branch.skills.map((skill, skillIndex) => {\n                    const leaf = generateLeafCoordinates(branch, skill, skillIndex);\n                    return (\n                      <foreignObject\n                        key={`leaf-${skill.id}`}\n                        id={`leaf-${skill.id}`}\n                        x={leaf.x - 20}\n                        y={leaf.y - 20}\n                        width={40}\n                        height={40}\n                        style={{\n                          overflow: 'visible',\n                          transition: 'all 0.3s ease',\n                        }}\n                        onMouseEnter={() => setShowTooltip(skill.id)}\n                        onMouseLeave={() => setShowTooltip(null)}\n                      >\n                        <svg \n                          width=\"40\" \n                          height=\"40\" \n                          viewBox=\"-20 -20 40 40\"\n                          style={{\n                            overflow: 'visible',\n                            filter: leaf.isRecentlyMastered ? 'url(#leaf-glow)' : 'none',\n                          }}\n                        >\n                          {/* Leaf shape */}\n                          <g transform={`rotate(${leaf.angle * 180 / Math.PI})`}>\n                            <path\n                              d=\"M0,0 C1,-5 5,-10 10,-10 C15,-8 15,0 10,5 C5,10 0,8 0,5 C0,8 -5,10 -10,5 C-15,0 -15,-8 -10,-10 C-5,-10 -1,-5 0,0 Z\"\n                              fill={skill.mastered ? theme.palette.primary.main : treeVitality.leafBaseColor}\n                              opacity={skill.mastered ? 1 : 0.5 + (skill.masteryLevel / 200)}\n                              className={leaf.isRecentlyMastered ? 'leaf-pulse' : ''}\n                              transform={`scale(${leaf.size / 20})`}\n                            />\n                          </g>\n                        </svg>\n                      </foreignObject>\n                    );\n                  })}\n                </g>\n              ))}\n              \n              {/* Skill name tooltips */}\n              {showTooltip && skills.map(skill => {\n                if (skill.id === showTooltip) {\n                  // Find this skill's branch and position\n                  for (const branch of branches) {\n                    const skillIndex = branch.skills.findIndex((s: Skill) => s.id === skill.id);\n                    if (skillIndex >= 0) {\n                      const leaf = generateLeafCoordinates(branch, skill, skillIndex);\n                      return (\n                        <g key={`tooltip-${skill.id}`}>\n                          <rect\n                            x={leaf.x - 60}\n                            y={leaf.y - 50}\n                            width=\"120\"\n                            height=\"30\"\n                            rx=\"4\"\n                            ry=\"4\"\n                            fill=\"rgba(255,255,255,0.9)\"\n                            stroke={theme.palette.primary.main}\n                            strokeWidth=\"1\"\n                          />\n                          <text\n                            x={leaf.x}\n                            y={leaf.y - 30}\n                            textAnchor=\"middle\"\n                            dominantBaseline=\"middle\"\n                            fill={theme.palette.text.primary}\n                            fontSize=\"10\"\n                            fontFamily=\"DM Sans, sans-serif\"\n                          >\n                            {skill.name}\n                          </text>\n                          {skill.mastered && (\n                            <text\n                              x={leaf.x}\n                              y={leaf.y - 40}\n                              textAnchor=\"middle\"\n                              dominantBaseline=\"middle\"\n                              fill={theme.palette.success.main}\n                              fontSize=\"8\"\n                              fontFamily=\"DM Sans, sans-serif\"\n                              fontWeight=\"bold\"\n                            >\n                              MASTERED\n                            </text>\n                          )}\n                        </g>\n                      );\n                    }\n                  }\n                }\n                return null;\n              })}\n            </svg>\n          </Box>\n          \n          {/* Tree legend */}\n          <Box \n            sx={{ \n              position: 'absolute', \n              bottom: 15, \n              right: 15,\n              background: 'rgba(255,255,255,0.8)', \n              p: 1.5,\n              borderRadius: '4px',\n              boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n              backdropFilter: 'blur(8px)',\n              zIndex: 10\n            }}\n          >\n            <Typography \n              variant=\"caption\" \n              display=\"block\" \n              sx={{ \n                fontWeight: 'bold', \n                mb: 0.5, \n                fontFamily: 'DM Sans, sans-serif'\n              }}\n            >\n              Your Learning Growth\n            </Typography>\n            <Typography \n              variant=\"caption\" \n              display=\"block\"\n              sx={{ fontFamily: 'DM Sans, sans-serif' }}\n            >\n              <Box \n                component=\"span\" \n                sx={{ \n                  display: 'inline-block', \n                  width: 10, \n                  height: 10, \n                  borderRadius: '50%', \n                  backgroundColor: theme.palette.primary.main,\n                  mr: 1\n                }}\n              />\n              Mastered Skills\n            </Typography>\n            <Typography \n              variant=\"caption\" \n              display=\"block\"\n              sx={{ fontFamily: 'DM Sans, sans-serif' }}\n            >\n              <Box \n                component=\"span\" \n                sx={{ \n                  display: 'inline-block', \n                  width: 10, \n                  height: 10, \n                  borderRadius: '50%', \n                  backgroundColor: treeVitality.leafBaseColor,\n                  opacity: 0.7,\n                  mr: 1\n                }}\n              />\n              Skills In Progress\n            </Typography>\n          </Box>\n        </Box>\n        \n        <Typography \n          align=\"center\" \n          variant=\"body2\" \n          color=\"text.secondary\" \n          sx={{ \n            mt: 2,\n            fontFamily: 'DM Sans, sans-serif',\n            animation: animation ? 'fadeIn 1s ease-in-out' : 'none'\n          }}\n        >\n          You've mastered {masteredSkills.length} skills so far! Keep growing!\n        </Typography>\n      </Paper>\n    </animated.div>\n  );\n};\n\nexport default BonsaiTree;\n\n "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,GAAG,CAAEC,UAAU,CAAEC,KAAK,CAAEC,QAAQ,KAAiB,eAAe,CACzE,OAASC,SAAS,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAe3D;AACA,KAAM,CAAAC,IAAI,CAAGA,CAACC,CAAS,CAAEC,CAAS,CAAEC,CAAS,GAAKF,CAAC,EAAI,CAAC,CAAGE,CAAC,CAAC,CAAGD,CAAC,CAAGC,CAAC,CACrE,KAAM,CAAAC,KAAK,CAAGA,CAACC,GAAW,CAAEC,GAAW,CAAEC,GAAW,GAAKC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACF,GAAG,CAAEC,GAAG,CAAC,CAAEC,GAAG,CAAC,CAC1F,KAAM,CAAAE,SAAS,CAAGA,CAACH,GAAW,CAAEC,GAAW,GAAKC,IAAI,CAACE,MAAM,CAAC,CAAC,EAAIH,GAAG,CAAGD,GAAG,CAAC,CAAGA,GAAG,CAEjF,KAAM,CAAAK,UAAqC,CAAGC,IAAA,EAA6B,IAA5B,CAAEC,MAAM,CAAEC,WAAY,CAAC,CAAAF,IAAA,CACpE,KAAM,CAAAG,KAAK,CAAGvB,QAAQ,CAAC,CAAC,CACxB,KAAM,CAAAwB,MAAM,CAAG5B,MAAM,CAAgB,IAAI,CAAC,CAC1C,KAAM,CAAC6B,gBAAgB,CAAEC,mBAAmB,CAAC,CAAG/B,QAAQ,CAAW,EAAE,CAAC,CACtE,KAAM,CAACgC,WAAW,CAAEC,cAAc,CAAC,CAAGjC,QAAQ,CAAgB,IAAI,CAAC,CACnE,KAAM,CAACkC,SAAS,CAAEC,YAAY,CAAC,CAAGnC,QAAQ,CAAU,KAAK,CAAC,CAC1D,KAAM,CAACoC,WAAW,CAAEC,cAAc,CAAC,CAAGrC,QAAQ,CAAU,IAAI,CAAC,CAE7D;AACA,KAAM,CAAAsC,aAAa,CAAGrC,MAAM,CAAU,EAAE,CAAC,CAEzC;AACA,KAAM,CAAAsC,cAAc,CAAGb,MAAM,CAACc,MAAM,CAACC,KAAK,EAAIA,KAAK,CAACC,QAAQ,CAAC,CAC7D,KAAM,CAAAC,iBAAiB,CAAGtB,IAAI,CAACuB,KAAK,CAAEL,cAAc,CAACM,MAAM,CAAGlB,WAAW,CAAI,GAAG,CAAC,CAEjF;AACA,KAAM,CAAAmB,eAAe,CAAGxC,SAAS,CAAC,CAChCyC,MAAM,CAAEJ,iBAAiB,CACzBK,IAAI,CAAE,CAAED,MAAM,CAAE,CAAE,CAAC,CACnBvC,MAAM,CAAE,CAAEyC,OAAO,CAAE,GAAG,CAAEC,QAAQ,CAAE,EAAG,CAAC,CACtCC,KAAK,CAAE,GACT,CAAC,CAAC,CAEF,KAAM,CAAAC,kBAAkB,CAAG9C,SAAS,CAAC,CACnC0C,IAAI,CAAE,CAAEK,OAAO,CAAE,CAAC,CAAEC,SAAS,CAAE,kBAAmB,CAAC,CACnDC,EAAE,CAAE,CAAEF,OAAO,CAAE,CAAC,CAAEC,SAAS,CAAE,iBAAkB,CAAC,CAChD9C,MAAM,CAAEA,MAAM,CAACgD,MACjB,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,gBAAgB,CAAG/B,MAAM,CAACgC,MAAM,CAAC,CAACC,GAAG,CAAElB,KAAK,GAAK,CACrD,GAAI,CAACkB,GAAG,CAAClB,KAAK,CAACmB,QAAQ,CAAC,CAAE,CACxBD,GAAG,CAAClB,KAAK,CAACmB,QAAQ,CAAC,CAAG,EAAE,CAC1B,CACAD,GAAG,CAAClB,KAAK,CAACmB,QAAQ,CAAC,CAACC,IAAI,CAACpB,KAAK,CAAC,CAC/B,MAAO,CAAAkB,GAAG,CACZ,CAAC,CAAE,CAAC,CAA4B,CAAC,CAEjC;AACA5D,SAAS,CAAC,IAAM,CACd;AACA,GAAI,CAACqC,WAAW,CAAE,CAChB,KAAM,CAAA0B,eAAe,CAAGxB,aAAa,CAACyB,OAAO,CAC1CvB,MAAM,CAACC,KAAK,EAAIA,KAAK,CAACC,QAAQ,CAAC,CAC/BsB,GAAG,CAACvB,KAAK,EAAIA,KAAK,CAACwB,EAAE,CAAC,CAEzB,KAAM,CAAAC,kBAAkB,CAAGxC,MAAM,CAC9Bc,MAAM,CAACC,KAAK,EAAIA,KAAK,CAACC,QAAQ,CAAC,CAC/BsB,GAAG,CAACvB,KAAK,EAAIA,KAAK,CAACwB,EAAE,CAAC,CAEzB;AACA,KAAM,CAAAE,aAAa,CAAGD,kBAAkB,CAAC1B,MAAM,CAACyB,EAAE,EAAI,CAACH,eAAe,CAACM,QAAQ,CAACH,EAAE,CAAC,CAAC,CAEpF,GAAIE,aAAa,CAACtB,MAAM,CAAG,CAAC,CAAE,CAC5Bd,mBAAmB,CAACoC,aAAa,CAAC,CAClChC,YAAY,CAAC,IAAI,CAAC,CAElB;AACA,KAAM,CAAAkC,KAAK,CAAGC,UAAU,CAAC,IAAM,CAC7BnC,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAMoC,YAAY,CAACF,KAAK,CAAC,CAClC,CACF,CAAC,IAAM,CACLhC,cAAc,CAAC,KAAK,CAAC,CACvB,CACA;AACAC,aAAa,CAACyB,OAAO,CAAG,CAAC,GAAGrC,MAAM,CAAC,CACrC,CAAC,CAAE,CAACA,MAAM,CAAEU,WAAW,CAAC,CAAC,CAEzB;AACA,KAAM,CAAAoC,YAAY,CAAG,CACnB;AACAC,cAAc,CAAE9B,iBAAiB,CAAG,EAAE,CAClC,SAAU;AAAA,CACVA,iBAAiB,CAAG,EAAE,CACpB,SAAU;AAAA,CACV,SAAS,CAAE;AAEjB;AACA+B,UAAU,CAAEzD,KAAK,CAAC,EAAE,CAAI0B,iBAAiB,CAAG,CAAE,CAAE,EAAE,CAAE,EAAE,CAAC,CACvDgC,WAAW,CAAE1D,KAAK,CAAC,GAAG,CAAG0B,iBAAiB,CAAE,GAAG,CAAE,GAAG,CAAC,CAErD;AACAiC,QAAQ,CAAE3D,KAAK,CAAC,EAAE,CAAI0B,iBAAiB,CAAG,CAAE,CAAE,EAAE,CAAE,GAAG,CAAC,CACtDkC,SAAS,CAAE5D,KAAK,CAAC,EAAE,CAAI0B,iBAAiB,CAAG,EAAG,CAAE,EAAE,CAAE,EAAE,CAAC,CAEvD;AACAmC,aAAa,CAAEnC,iBAAiB,CAAG,EAAE,CACjC,SAAU;AAAA,CACVA,iBAAiB,CAAG,EAAE,CACpB,SAAU;AAAA,CACV,SAAS,CAAE;AAEjB;AACAoC,KAAK,CAAE9D,KAAK,CAAC,GAAG,CAAI0B,iBAAiB,CAAG,GAAI,CAAE,GAAG,CAAE,GAAG,CACxD,CAAC,CAED;AACA,KAAM,CAAAqC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,UAAU,CAAGC,MAAM,CAACC,IAAI,CAAC1B,gBAAgB,CAAC,CAChD,KAAM,CAAA2B,QAAQ,CAAG,EAAE,CAEnB;AACA,GAAIH,UAAU,CAACpC,MAAM,GAAK,CAAC,CAAE,MAAO,CAAAuC,QAAQ,CAE5C;AACA,KAAM,CAAAC,SAAS,CAAG,GAAG,CAAGb,YAAY,CAACG,WAAW,CAAG,GAAG,CACtD,KAAM,CAAAW,QAAQ,CAAG,CAAEC,CAAC,CAAE,GAAG,CAAEC,CAAC,CAAEH,SAAU,CAAC,CAEzC;AACA,IAAK,GAAI,CAAAI,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGR,UAAU,CAACpC,MAAM,CAAE4C,CAAC,EAAE,CAAE,CAC1C,KAAM,CAAA7B,QAAQ,CAAGqB,UAAU,CAACQ,CAAC,CAAC,CAC9B,KAAM,CAAA/D,MAAM,CAAG+B,gBAAgB,CAACG,QAAQ,CAAC,CAEzC;AACA,GAAI,CAAClC,MAAM,EAAIA,MAAM,CAACmB,MAAM,GAAK,CAAC,CAAE,SAEpC;AACA,KAAM,CAAA6C,eAAe,CAAGT,UAAU,CAACpC,MAAM,CACzC,GAAI,CAAA8C,KAAK,CAET,GAAID,eAAe,GAAK,CAAC,CAAE,CACzB;AACAC,KAAK,CAAG,CAACtE,IAAI,CAACuE,EAAE,CAAC,CAAC,CACpB,CAAC,IAAM,IAAIH,CAAC,GAAK,CAAC,CAAE,CAClB;AACAE,KAAK,CAAG,CAACtE,IAAI,CAACuE,EAAE,CAAC,CAAC,CAAGtE,SAAS,CAAC,GAAG,CAAE,GAAG,CAAC,CAC1C,CAAC,IAAM,IAAImE,CAAC,GAAKC,eAAe,CAAG,CAAC,CAAE,CACpC;AACAC,KAAK,CAAG,CAACtE,IAAI,CAACuE,EAAE,CAAC,CAAC,CAAGtE,SAAS,CAAC,GAAG,CAAE,GAAG,CAAC,CAC1C,CAAC,IAAM,CACL;AACA,KAAM,CAAAuE,eAAe,CAAGJ,CAAC,EAAIC,eAAe,CAAG,CAAC,CAAC,CACjDC,KAAK,CAAG9E,IAAI,CAAC,CAACQ,IAAI,CAACuE,EAAE,CAAC,CAAC,CAAG,GAAG,CAAE,CAACvE,IAAI,CAACuE,EAAE,CAAC,CAAC,CAAG,GAAG,CAAEC,eAAe,CAAC,CACjE;AACAF,KAAK,EAAIrE,SAAS,CAAC,CAAC,GAAG,CAAE,GAAG,CAAC,CAC/B,CAEA;AACA,KAAM,CAAAwE,cAAc,CAAGrC,gBAAgB,CAACG,QAAQ,CAAC,EAAI,EAAE,CACvD,KAAM,CAAAmC,kBAAkB,CAAGD,cAAc,CAACtD,MAAM,CAACwD,CAAC,EAAIA,CAAC,CAACtD,QAAQ,CAAC,CAACG,MAAM,CACxE,KAAM,CAAAoD,oBAAoB,CAAGH,cAAc,CAACjD,MAAM,CAAG,CAAC,CAClDkD,kBAAkB,CAAGD,cAAc,CAACjD,MAAM,CAC1C,CAAC,CAEL;AACA,KAAM,CAAAqD,SAAS,CAAG,EAAE,CAAIxE,MAAM,CAACmB,MAAM,CAAG,CAAE,CAC1C,KAAM,CAAAsD,SAAS,CAAG,GAAG,CAAIzE,MAAM,CAACmB,MAAM,CAAG,CAAE,CAC3C,KAAM,CAAAuD,YAAY,CAAGvF,IAAI,CAACqF,SAAS,CAAEC,SAAS,CAAEF,oBAAoB,CAAC,CAErE;AACA,KAAM,CAAAI,eAAe,CAAG,CACtBd,CAAC,CAAElE,IAAI,CAACiF,GAAG,CAACX,KAAK,CAAC,CAClBH,CAAC,CAAEnE,IAAI,CAACkF,GAAG,CAACZ,KAAK,CACnB,CAAC,CAED;AACA,KAAM,CAAAa,QAAQ,CAAG,CACfjB,CAAC,CAAED,QAAQ,CAACC,CAAC,CAAGc,eAAe,CAACd,CAAC,CAAGa,YAAY,CAChDZ,CAAC,CAAEF,QAAQ,CAACE,CAAC,CAAGa,eAAe,CAACb,CAAC,CAAGY,YACtC,CAAC,CAED;AACA,KAAM,CAAAK,aAAa,CAAG,CACpBlB,CAAC,CAAED,QAAQ,CAACC,CAAC,CAAGc,eAAe,CAACd,CAAC,CAAGa,YAAY,CAAG,GAAG,CACtDZ,CAAC,CAAEF,QAAQ,CAACE,CAAC,CAAGa,eAAe,CAACb,CAAC,CAAGY,YAAY,CAAG,GAAG,CAAG,EAC3D,CAAC,CAED,KAAM,CAAAM,aAAa,CAAG,CACpBnB,CAAC,CAAED,QAAQ,CAACC,CAAC,CAAGc,eAAe,CAACd,CAAC,CAAGa,YAAY,CAAG,GAAG,CACtDZ,CAAC,CAAEF,QAAQ,CAACE,CAAC,CAAGa,eAAe,CAACb,CAAC,CAAGY,YAAY,CAAG,GAAG,CAAG,EAC3D,CAAC,CAED;AACA,KAAM,CAAAO,SAAS,CAAG,CAAC,EAAI,GAAG,CAAIV,oBAAoB,CAAG,GAAI,CAAC,CAE1D;AACAb,QAAQ,CAACvB,IAAI,CAAC,CACZI,EAAE,WAAA2C,MAAA,CAAYnB,CAAC,CAAE,CACjB7B,QAAQ,CACRiD,KAAK,CAAEvB,QAAQ,CACfwB,GAAG,CAAEN,QAAQ,CACbO,QAAQ,CAAEN,aAAa,CACvBO,QAAQ,CAAEN,aAAa,CACvBC,SAAS,CACThB,KAAK,CACLsB,YAAY,CAAEhB,oBAAoB,CAClCvE,MAAM,CAAEA,MACV,CAAC,CAAC,CAEF;AACA,GAAI0D,QAAQ,CAACvC,MAAM,EAAI,CAAC,CAAE,MAC5B,CAEA,MAAO,CAAAuC,QAAQ,CACjB,CAAC,CAED,KAAM,CAAAA,QAAQ,CAAGJ,gBAAgB,CAAC,CAAC,CAEnC;AACA,KAAM,CAAAkC,uBAAuB,CAAGA,CAACC,MAAW,CAAE1E,KAAY,CAAE2E,KAAa,GAAK,CAC5E,KAAM,CAAA1F,MAAM,CAAGyF,MAAM,CAACzF,MAAM,CAC5B,KAAM,CAAAC,WAAW,CAAGD,MAAM,CAACmB,MAAM,CAEjC;AACA;AACA,KAAM,CAAA7B,CAAC,CAAGC,KAAK,CAAC,GAAG,CAAI,CAACmG,KAAK,CAAG,CAAC,GAAKzF,WAAW,CAAG,CAAC,CAAC,CAAI,GAAG,CAAE,GAAG,CAAE,IAAI,CAAC,CAEzE;AACA,KAAM,CAAA0F,EAAE,CAAGF,MAAM,CAACN,KAAK,CACvB,KAAM,CAAAS,EAAE,CAAGH,MAAM,CAACJ,QAAQ,CAC1B,KAAM,CAAAQ,EAAE,CAAGJ,MAAM,CAACH,QAAQ,CAC1B,KAAM,CAAAQ,EAAE,CAAGL,MAAM,CAACL,GAAG,CAErB;AACA;AACA,KAAM,CAAAW,EAAE,CAAG,CAAC,CAAGzG,CAAC,CAChB,KAAM,CAAA0G,IAAI,CAAGD,EAAE,CAAGA,EAAE,CACpB,KAAM,CAAAE,IAAI,CAAGD,IAAI,CAAGD,EAAE,CACtB,KAAM,CAAAG,GAAG,CAAG5G,CAAC,CAAGA,CAAC,CACjB,KAAM,CAAA6G,GAAG,CAAGD,GAAG,CAAG5G,CAAC,CAEnB,KAAM,CAAAuE,CAAC,CAAGoC,IAAI,CAAGN,EAAE,CAAC9B,CAAC,CAAG,CAAC,CAAGmC,IAAI,CAAG1G,CAAC,CAAGsG,EAAE,CAAC/B,CAAC,CAAG,CAAC,CAAGkC,EAAE,CAAGG,GAAG,CAAGL,EAAE,CAAChC,CAAC,CAAGsC,GAAG,CAAGL,EAAE,CAACjC,CAAC,CAC9E,KAAM,CAAAC,CAAC,CAAGmC,IAAI,CAAGN,EAAE,CAAC7B,CAAC,CAAG,CAAC,CAAGkC,IAAI,CAAG1G,CAAC,CAAGsG,EAAE,CAAC9B,CAAC,CAAG,CAAC,CAAGiC,EAAE,CAAGG,GAAG,CAAGL,EAAE,CAAC/B,CAAC,CAAGqC,GAAG,CAAGL,EAAE,CAAChC,CAAC,CAE9E;AACA,KAAM,CAAAsC,QAAQ,CAAG,CAAC,CAAC,CAAGJ,IAAI,CAAGL,EAAE,CAAC9B,CAAC,CAAG,CAAC,CAAGmC,IAAI,CAAGJ,EAAE,CAAC/B,CAAC,CAAG,CAAC,CAAGkC,EAAE,CAAGzG,CAAC,CAAGsG,EAAE,CAAC/B,CAAC,CAC1D,CAAC,CAAGkC,EAAE,CAAGzG,CAAC,CAAGuG,EAAE,CAAChC,CAAC,CAAG,CAAC,CAAGqC,GAAG,CAAGL,EAAE,CAAChC,CAAC,CAAG,CAAC,CAAGqC,GAAG,CAAGJ,EAAE,CAACjC,CAAC,CAChE,KAAM,CAAAwC,QAAQ,CAAG,CAAC,CAAC,CAAGL,IAAI,CAAGL,EAAE,CAAC7B,CAAC,CAAG,CAAC,CAAGkC,IAAI,CAAGJ,EAAE,CAAC9B,CAAC,CAAG,CAAC,CAAGiC,EAAE,CAAGzG,CAAC,CAAGsG,EAAE,CAAC9B,CAAC,CAC1D,CAAC,CAAGiC,EAAE,CAAGzG,CAAC,CAAGuG,EAAE,CAAC/B,CAAC,CAAG,CAAC,CAAGoC,GAAG,CAAGL,EAAE,CAAC/B,CAAC,CAAG,CAAC,CAAGoC,GAAG,CAAGJ,EAAE,CAAChC,CAAC,CAEhE;AACA,KAAM,CAAAwC,aAAa,CAAG3G,IAAI,CAAC4G,IAAI,CAACH,QAAQ,CAAGA,QAAQ,CAAGC,QAAQ,CAAGA,QAAQ,CAAC,CAC1E,KAAM,CAAAG,kBAAkB,CAAGJ,QAAQ,CAAGE,aAAa,CACnD,KAAM,CAAAG,kBAAkB,CAAGJ,QAAQ,CAAGC,aAAa,CAEnD;AACA,KAAM,CAAAI,KAAK,CAAG,CAACD,kBAAkB,CACjC,KAAM,CAAAE,KAAK,CAAGH,kBAAkB,CAEhC;AACA;AACA,KAAM,CAAAI,IAAI,CAAGlB,KAAK,CAAG,CAAC,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC,CAErC;AACA,KAAM,CAAAmB,MAAM,CAAK9F,KAAK,CAAC+F,YAAY,CAAG,GAAG,CAAI,CAAC,CAAI,CAAC,CAEnD;AACA,GAAI,CAAAC,KAAK,CAAGlD,CAAC,CAAG+C,IAAI,CAAGF,KAAK,CAAGG,MAAM,CACrC,GAAI,CAAAG,KAAK,CAAGlD,CAAC,CAAG8C,IAAI,CAAGD,KAAK,CAAGE,MAAM,CAErC;AACAE,KAAK,EAAInH,SAAS,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CACzBoH,KAAK,EAAIpH,SAAS,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAEzB;AACA,KAAM,CAAAqH,QAAQ,CAAG,CAAC,CAClB,KAAM,CAAAC,YAAY,CAAGnG,KAAK,CAACC,QAAQ,CAAG,CAAC,CAAID,KAAK,CAAC+F,YAAY,CAAG,EAAG,CACnE,KAAM,CAAAK,IAAI,CAAGF,QAAQ,CAAGC,YAAY,CAEpC,MAAO,CACLrD,CAAC,CAAEkD,KAAK,CACRjD,CAAC,CAAEkD,KAAK,CACRG,IAAI,CACJ;AACAlD,KAAK,CAAEtE,IAAI,CAACyH,KAAK,CAACT,KAAK,CAAED,KAAK,CAAC,CAAIE,IAAI,CAAGjH,IAAI,CAACuE,EAAE,CAAG,CAAE,CACtDmD,kBAAkB,CAAEjH,gBAAgB,CAACsC,QAAQ,CAAC3B,KAAK,CAACwB,EAAE,CAAC,EAAIxB,KAAK,CAACC,QACnE,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAsG,WAAW,CAAGA,CAACzD,CAAS,CAAEC,CAAS,CAAEqD,IAAY,CAAElD,KAAa,GAAK,CACzE;AACA,0CAAAiB,MAAA,CAC4BrB,CAAC,OAAAqB,MAAA,CAAKpB,CAAC,cAAAoB,MAAA,CAAYjB,KAAK,CAAG,GAAG,CAAGtE,IAAI,CAACuE,EAAE,aAAAgB,MAAA,CAAWiC,IAAI,CAAG,EAAE,4LAI1F,CAAC,CAED;AACA9I,SAAS,CAAC,IAAM,CACd,GAAI,CAAC8B,MAAM,CAACkC,OAAO,EAAIqB,QAAQ,CAACvC,MAAM,GAAK,CAAC,CAAE,OAE9C;AACA,GAAIT,WAAW,CAAE,OAEjB,GAAIF,SAAS,CAAE,CACb;AACA,KAAM,CAAA+G,GAAG,CAAGpH,MAAM,CAACkC,OAAO,CAE1B;AACA,KAAM,CAAAmF,KAAK,CAAGD,GAAG,CAACE,aAAa,CAAC,aAAa,CAAC,CAC9C,GAAID,KAAK,CAAE,CACTA,KAAK,CAACE,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC,CACnCH,KAAK,CAACI,gBAAgB,CAAC,cAAc,CAAE,IAAM,CAC3CJ,KAAK,CAACE,SAAS,CAACG,MAAM,CAAC,cAAc,CAAC,CACxC,CAAC,CAAE,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CACpB,CAEA;AACApE,QAAQ,CAACqE,OAAO,CAAC,CAACtC,MAAM,CAAE1B,CAAC,GAAK,CAC9B,KAAM,CAAAiE,aAAa,CAAGT,GAAG,CAACE,aAAa,KAAAvC,MAAA,CAAKO,MAAM,CAAClD,EAAE,CAAE,CAAC,CACxD,GAAIyF,aAAa,CAAE,CACjBA,aAAa,CAACN,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC,CAC3CK,aAAa,CAACC,KAAK,CAACC,cAAc,IAAAhD,MAAA,CAAMnB,CAAC,CAAG,GAAG,KAAG,CAClDiE,aAAa,CAACJ,gBAAgB,CAAC,cAAc,CAAE,IAAM,CACnDI,aAAa,CAACN,SAAS,CAACG,MAAM,CAAC,cAAc,CAAC,CAChD,CAAC,CAAE,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CACpB,CACF,CAAC,CAAC,CAEF;AACA1H,gBAAgB,CAAC2H,OAAO,CAACI,OAAO,EAAI,CAClC,KAAM,CAAAC,WAAW,CAAGb,GAAG,CAACE,aAAa,UAAAvC,MAAA,CAAUiD,OAAO,CAAE,CAAC,CACzD,GAAIC,WAAW,CAAE,CACfA,WAAW,CAACV,SAAS,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAC9CS,WAAW,CAACR,gBAAgB,CAAC,cAAc,CAAE,IAAM,CACjDQ,WAAW,CAACV,SAAS,CAACG,MAAM,CAAC,mBAAmB,CAAC,CACnD,CAAC,CAAE,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CACpB,CACF,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACtH,SAAS,CAAEkD,QAAQ,CAAEtD,gBAAgB,CAAEM,WAAW,CAAC,CAAC,CAExD,mBACE1B,IAAA,CAACH,QAAQ,CAACwJ,GAAG,EAACJ,KAAK,CAAEvG,kBAAmB,CAAA4G,QAAA,cACtCpJ,KAAA,CAACR,KAAK,EACJ6J,SAAS,CAAE,CAAE,CACbC,SAAS,CAAC,gBAAgB,CAC1BC,EAAE,CAAE,CACFC,CAAC,CAAE,CAAC,CACJC,EAAE,CAAE,CAAC,CACLC,QAAQ,CAAE,UAAU,CACpBC,QAAQ,CAAE,QAAQ,CAClBC,YAAY,CAAE,KAAK,CACnBC,UAAU,CAAE,eACd,CAAE,CAAAT,QAAA,eAEFtJ,IAAA,CAACP,UAAU,EACTuK,OAAO,CAAC,IAAI,CACZC,YAAY,MACZC,KAAK,CAAC,QAAQ,CACdT,EAAE,CAAE,CACFU,UAAU,CAAE,qBAAqB,CACjCC,UAAU,CAAE,MAAM,CAClBC,KAAK,CAAEnJ,KAAK,CAACoJ,OAAO,CAACC,OAAO,CAACC,IAAI,CACjCb,EAAE,CAAE,CACN,CAAE,CAAAL,QAAA,CACH,2BAED,CAAY,CAAC,cAEbpJ,KAAA,CAACV,GAAG,EAACiK,EAAE,CAAE,CACPgB,SAAS,CAAE,QAAQ,CACnBd,EAAE,CAAE,CAAC,CACLnI,SAAS,CAAEA,SAAS,CAAG,sBAAsB,CAAG,MAClD,CAAE,CAAA8H,QAAA,eACAtJ,IAAA,CAACH,QAAQ,CAACwJ,GAAG,EAACJ,KAAK,CAAE,CACnByB,OAAO,CAAE,cAAc,CACvBC,QAAQ,CAAE,QAAQ,CAClBP,UAAU,CAAE,MAAM,CAClBC,KAAK,CAAEnJ,KAAK,CAACoJ,OAAO,CAACC,OAAO,CAACC,IAAI,CACjChJ,SAAS,CAAEA,SAAS,CAAG,2BAA2B,CAAG,MACvD,CAAE,CAAA8H,QAAA,CACClH,eAAe,CAACC,MAAM,CAACQ,EAAE,CAAC+H,CAAC,KAAA1E,MAAA,CAAOvF,IAAI,CAACkK,KAAK,CAACD,CAAC,CAAC,KAAG,CAAC,CACxC,CAAC,cACf5K,IAAA,CAACP,UAAU,EACTuK,OAAO,CAAC,OAAO,CACfK,KAAK,CAAC,gBAAgB,CACtBZ,EAAE,CAAE,CAAEU,UAAU,CAAE,qBAAsB,CAAE,CAAAb,QAAA,CAC3C,iBAED,CAAY,CAAC,EACV,CAAC,cAENpJ,KAAA,CAACV,GAAG,EAACiK,EAAE,CAAE,CACPqB,KAAK,CAAE,MAAM,CACbC,MAAM,CAAE,GAAG,CACXnB,QAAQ,CAAE,UAAU,CACpBE,YAAY,CAAE,CAAC,CACfD,QAAQ,CAAE,QAAQ,CAClBE,UAAU,CAAE,eACd,CAAE,CAAAT,QAAA,eAEAtJ,IAAA,CAACR,GAAG,EAACiK,EAAE,CAAE,CACPG,QAAQ,CAAE,UAAU,CACpBoB,MAAM,CAAE,CAAC,CACTC,IAAI,CAAE,CAAC,CACPH,KAAK,CAAE,MAAM,CACbC,MAAM,CAAE,KAAK,CACbG,UAAU,CAAE,mFAAmF,CAC/FC,MAAM,CAAE,CACV,CAAE,CAAE,CAAC,cAGLnL,IAAA,CAACR,GAAG,EAACiK,EAAE,CAAE,CACPG,QAAQ,CAAE,UAAU,CACpBwB,GAAG,CAAE,EAAE,CACPC,KAAK,CAAE,EAAE,CACTP,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,EAAE,CACVjB,YAAY,CAAE,KAAK,CACnBoB,UAAU,CAAE,4EAA4E,CACxFC,MAAM,CAAE,CACV,CAAE,CAAE,CAAC,cAGLnL,IAAA,CAACR,GAAG,EAACiK,EAAE,CAAE,CACPqB,KAAK,CAAE,MAAM,CACbC,MAAM,CAAE,MAAM,CACdnB,QAAQ,CAAE,UAAU,CACpBuB,MAAM,CAAE,CAAC,CACTvI,SAAS,UAAAsD,MAAA,CAAWpC,YAAY,CAACO,KAAK,KAAG,CACzC0F,UAAU,CAAE,0BACd,CAAE,CAAAT,QAAA,cACApJ,KAAA,QACEoL,GAAG,CAAEnK,MAAO,CACZ2J,KAAK,CAAC,MAAM,CACZC,MAAM,CAAC,MAAM,CACbQ,OAAO,CAAC,aAAa,CACrB1B,QAAQ,CAAC,SAAS,CAClBZ,KAAK,CAAE,CAAEuC,SAAS,CAAE,OAAQ,CAAE,CAAAlC,QAAA,eAE9BpJ,KAAA,SAAAoJ,QAAA,eAEEpJ,KAAA,mBAAgBqD,EAAE,CAAC,aAAa,CAACkI,EAAE,CAAC,KAAK,CAACC,EAAE,CAAC,KAAK,CAACC,CAAC,CAAC,KAAK,CAACC,EAAE,CAAC,KAAK,CAACC,EAAE,CAAC,KAAK,CAAAvC,QAAA,eAC1EtJ,IAAA,SAAM6H,MAAM,CAAC,IAAI,CAACiE,SAAS,CAAC,SAAS,CAAE,CAAC,cACxC9L,IAAA,SAAM6H,MAAM,CAAC,KAAK,CAACiE,SAAS,CAAC,SAAS,CAAE,CAAC,EAC3B,CAAC,cAEjB5L,KAAA,mBAAgBqD,EAAE,CAAC,eAAe,CAACwI,EAAE,CAAC,IAAI,CAACC,EAAE,CAAC,IAAI,CAACC,EAAE,CAAC,MAAM,CAACC,EAAE,CAAC,IAAI,CAAA5C,QAAA,eAClEtJ,IAAA,SAAM6H,MAAM,CAAC,IAAI,CAACiE,SAAS,CAAEhI,YAAY,CAACC,cAAe,CAAE,CAAC,cAC5D/D,IAAA,SAAM6H,MAAM,CAAC,KAAK,CAACiE,SAAS,CAAC,SAAS,CAAE,CAAC,cACzC9L,IAAA,SAAM6H,MAAM,CAAC,MAAM,CAACiE,SAAS,CAAEhI,YAAY,CAACC,cAAe,CAAE,CAAC,EAChD,CAAC,CAGhBW,QAAQ,CAACpB,GAAG,CAAC,CAACmD,MAAM,CAAE1B,CAAC,gBACtB7E,KAAA,mBAEEqD,EAAE,mBAAA2C,MAAA,CAAoBnB,CAAC,CAAG,CAC1BgH,EAAE,CAAC,IAAI,CACPC,EAAE,CAAC,IAAI,CACPC,EAAE,CAAC,MAAM,CACTC,EAAE,CAAC,IAAI,CACPC,aAAa,CAAC,gBAAgB,CAC9BC,iBAAiB,WAAAlG,MAAA,CAAYO,MAAM,CAACxB,KAAK,CAAG,GAAG,CAAGtE,IAAI,CAACuE,EAAE,KAAI,CAAAoE,QAAA,eAE7DtJ,IAAA,SAAM6H,MAAM,CAAC,IAAI,CAACiE,SAAS,CAAC,SAAS,CAAE,CAAC,cACxC9L,IAAA,SAAM6H,MAAM,CAAC,MAAM,CAACiE,SAAS,CAAC,SAAS,CAAE,CAAC,sBAAA5F,MAAA,CAVlBnB,CAAC,CAWX,CACjB,CAAC,cAGF7E,KAAA,WAAQqD,EAAE,CAAC,WAAW,CAACsB,CAAC,CAAC,MAAM,CAACC,CAAC,CAAC,MAAM,CAACgG,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,MAAM,CAAAzB,QAAA,eACjEtJ,IAAA,mBAAgBqM,YAAY,CAAC,GAAG,CAACC,MAAM,CAAC,MAAM,CAAE,CAAC,cACjDtM,IAAA,gBAAauM,EAAE,CAAC,eAAe,CAACC,GAAG,CAAC,MAAM,CAACC,QAAQ,CAAC,MAAM,CAAE,CAAC,EACvD,CAAC,cAGTzM,IAAA,UAAO0M,IAAI,CAAC,UAAU,CAAApD,QAAA,sxCAiCf,CAAC,EACJ,CAAC,cAGPpJ,KAAA,MAAAoJ,QAAA,eACEtJ,IAAA,YACEyL,EAAE,CAAC,KAAK,CACRC,EAAE,CAAC,KAAK,CACRiB,EAAE,CAAE7I,YAAY,CAACI,QAAS,CAC1B0I,EAAE,CAAC,IAAI,CACPC,IAAI,CAAC,SAAS,CACf,CAAC,cACF7M,IAAA,SACE8M,CAAC,2BAAA5G,MAAA,CACI,GAAG,CAAGpC,YAAY,CAACI,QAAQ,kCAAAgC,MAAA,CAC3B,GAAG,CAAGpC,YAAY,CAACI,QAAQ,CAAG,GAAG,OAAAgC,MAAA,CAAK,GAAG,CAAGpC,YAAY,CAACK,SAAS,4BAAA+B,MAAA,CAClE,GAAG,CAAGpC,YAAY,CAACI,QAAQ,CAAG,GAAG,OAAAgC,MAAA,CAAK,GAAG,CAAGpC,YAAY,CAACK,SAAS,4BAAA+B,MAAA,CAClE,GAAG,CAAGpC,YAAY,CAACI,QAAQ,6BAC9B,CACF2I,IAAI,CAAC,mBAAmB,CACzB,CAAC,cACF7M,IAAA,YACEyL,EAAE,CAAC,KAAK,CACRC,EAAE,CAAE,GAAG,CAAG5H,YAAY,CAACK,SAAU,CACjCwI,EAAE,CAAE7I,YAAY,CAACI,QAAQ,CAAG,GAAI,CAChC0I,EAAE,CAAC,GAAG,CACNC,IAAI,CAAC,SAAS,CACf,CAAC,EACD,CAAC,cAGJ7M,IAAA,MAAAsJ,QAAA,cACEtJ,IAAA,SACEuD,EAAE,CAAC,YAAY,CACfuJ,CAAC,2BAAA5G,MAAA,CACI,GAAG,CAAGpC,YAAY,CAACE,UAAU,CAAG,IAAI,iCAAAkC,MAAA,CACpC,GAAG,CAAGpC,YAAY,CAACE,UAAU,CAAG,GAAG,OAAAkC,MAAA,CAAK,GAAG,CAAGpC,YAAY,CAACG,WAAW,CAAG,GAAG,4BAAAiC,MAAA,CAC5E,GAAG,CAAGpC,YAAY,CAACE,UAAU,CAAG,GAAG,OAAAkC,MAAA,CAAK,GAAG,CAAGpC,YAAY,CAACG,WAAW,CAAG,GAAG,2BAC5E,GAAG,OAAAiC,MAAA,CAAK,GAAG,CAAGpC,YAAY,CAACG,WAAW,wBACzC,CACF4I,IAAI,CAAC,MAAM,CACXE,MAAM,CAAC,qBAAqB,CAC5BC,WAAW,CAAElJ,YAAY,CAACE,UAAW,CACrCiJ,aAAa,CAAC,OAAO,CACtB,CAAC,CACD,CAAC,CAGHvI,QAAQ,CAACpB,GAAG,CAAC,CAACmD,MAAM,CAAEC,KAAK,gBAC1BxG,KAAA,MAAAoJ,QAAA,eACEtJ,IAAA,SACEuD,EAAE,CAAEkD,MAAM,CAAClD,EAAG,CACduJ,CAAC,6BAAA5G,MAAA,CACIO,MAAM,CAACN,KAAK,CAACtB,CAAC,OAAAqB,MAAA,CAAKO,MAAM,CAACN,KAAK,CAACrB,CAAC,8BAAAoB,MAAA,CACjCO,MAAM,CAACJ,QAAQ,CAACxB,CAAC,OAAAqB,MAAA,CAAKO,MAAM,CAACJ,QAAQ,CAACvB,CAAC,8BAAAoB,MAAA,CACvCO,MAAM,CAACH,QAAQ,CAACzB,CAAC,OAAAqB,MAAA,CAAKO,MAAM,CAACH,QAAQ,CAACxB,CAAC,8BAAAoB,MAAA,CACvCO,MAAM,CAACL,GAAG,CAACvB,CAAC,OAAAqB,MAAA,CAAKO,MAAM,CAACL,GAAG,CAACtB,CAAC,0BAChC,CACF+H,IAAI,CAAC,MAAM,CACXE,MAAM,wBAAA7G,MAAA,CAAyBQ,KAAK,KAAI,CACxCsG,WAAW,CAAEvG,MAAM,CAACR,SAAU,CAC9BgH,aAAa,CAAC,OAAO,CACtB,CAAC,CAGDxG,MAAM,CAACzF,MAAM,CAACsC,GAAG,CAAC,CAACvB,KAAK,CAAEmL,UAAU,GAAK,CACxC,KAAM,CAAAC,IAAI,CAAG3G,uBAAuB,CAACC,MAAM,CAAE1E,KAAK,CAAEmL,UAAU,CAAC,CAC/D,mBACElN,IAAA,kBAEEuD,EAAE,SAAA2C,MAAA,CAAUnE,KAAK,CAACwB,EAAE,CAAG,CACvBsB,CAAC,CAAEsI,IAAI,CAACtI,CAAC,CAAG,EAAG,CACfC,CAAC,CAAEqI,IAAI,CAACrI,CAAC,CAAG,EAAG,CACfgG,KAAK,CAAE,EAAG,CACVC,MAAM,CAAE,EAAG,CACX9B,KAAK,CAAE,CACLY,QAAQ,CAAE,SAAS,CACnBE,UAAU,CAAE,eACd,CAAE,CACFqD,YAAY,CAAEA,CAAA,GAAM7L,cAAc,CAACQ,KAAK,CAACwB,EAAE,CAAE,CAC7C8J,YAAY,CAAEA,CAAA,GAAM9L,cAAc,CAAC,IAAI,CAAE,CAAA+H,QAAA,cAEzCtJ,IAAA,QACE8K,KAAK,CAAC,IAAI,CACVC,MAAM,CAAC,IAAI,CACXQ,OAAO,CAAC,eAAe,CACvBtC,KAAK,CAAE,CACLY,QAAQ,CAAE,SAAS,CACnB/H,MAAM,CAAEqL,IAAI,CAAC9E,kBAAkB,CAAG,iBAAiB,CAAG,MACxD,CAAE,CAAAiB,QAAA,cAGFtJ,IAAA,MAAG4C,SAAS,WAAAsD,MAAA,CAAYiH,IAAI,CAAClI,KAAK,CAAG,GAAG,CAAGtE,IAAI,CAACuE,EAAE,KAAI,CAAAoE,QAAA,cACpDtJ,IAAA,SACE8M,CAAC,CAAC,mHAAmH,CACrHD,IAAI,CAAE9K,KAAK,CAACC,QAAQ,CAAGd,KAAK,CAACoJ,OAAO,CAACC,OAAO,CAACC,IAAI,CAAG1G,YAAY,CAACM,aAAc,CAC/EzB,OAAO,CAAEZ,KAAK,CAACC,QAAQ,CAAG,CAAC,CAAG,GAAG,CAAID,KAAK,CAAC+F,YAAY,CAAG,GAAK,CAC/D0B,SAAS,CAAE2D,IAAI,CAAC9E,kBAAkB,CAAG,YAAY,CAAG,EAAG,CACvDzF,SAAS,UAAAsD,MAAA,CAAWiH,IAAI,CAAChF,IAAI,CAAG,EAAE,KAAI,CACvC,CAAC,CACD,CAAC,CACD,CAAC,UAAAjC,MAAA,CAhCOnE,KAAK,CAACwB,EAAE,CAiCR,CAAC,CAEpB,CAAC,CAAC,GAvDIkD,MAAM,CAAClD,EAwDZ,CACJ,CAAC,CAGDjC,WAAW,EAAIN,MAAM,CAACsC,GAAG,CAACvB,KAAK,EAAI,CAClC,GAAIA,KAAK,CAACwB,EAAE,GAAKjC,WAAW,CAAE,CAC5B;AACA,IAAK,KAAM,CAAAmF,MAAM,GAAI,CAAA/B,QAAQ,CAAE,CAC7B,KAAM,CAAAwI,UAAU,CAAGzG,MAAM,CAACzF,MAAM,CAACsM,SAAS,CAAEhI,CAAQ,EAAKA,CAAC,CAAC/B,EAAE,GAAKxB,KAAK,CAACwB,EAAE,CAAC,CAC3E,GAAI2J,UAAU,EAAI,CAAC,CAAE,CACnB,KAAM,CAAAC,IAAI,CAAG3G,uBAAuB,CAACC,MAAM,CAAE1E,KAAK,CAAEmL,UAAU,CAAC,CAC/D,mBACEhN,KAAA,MAAAoJ,QAAA,eACEtJ,IAAA,SACE6E,CAAC,CAAEsI,IAAI,CAACtI,CAAC,CAAG,EAAG,CACfC,CAAC,CAAEqI,IAAI,CAACrI,CAAC,CAAG,EAAG,CACfgG,KAAK,CAAC,KAAK,CACXC,MAAM,CAAC,IAAI,CACX4B,EAAE,CAAC,GAAG,CACNC,EAAE,CAAC,GAAG,CACNC,IAAI,CAAC,uBAAuB,CAC5BE,MAAM,CAAE7L,KAAK,CAACoJ,OAAO,CAACC,OAAO,CAACC,IAAK,CACnCwC,WAAW,CAAC,GAAG,CAChB,CAAC,cACFhN,IAAA,SACE6E,CAAC,CAAEsI,IAAI,CAACtI,CAAE,CACVC,CAAC,CAAEqI,IAAI,CAACrI,CAAC,CAAG,EAAG,CACfyI,UAAU,CAAC,QAAQ,CACnBC,gBAAgB,CAAC,QAAQ,CACzBX,IAAI,CAAE3L,KAAK,CAACoJ,OAAO,CAACmD,IAAI,CAAClD,OAAQ,CACjCI,QAAQ,CAAC,IAAI,CACbR,UAAU,CAAC,qBAAqB,CAAAb,QAAA,CAE/BvH,KAAK,CAAC2L,IAAI,CACP,CAAC,CACN3L,KAAK,CAACC,QAAQ,eACbhC,IAAA,SACE6E,CAAC,CAAEsI,IAAI,CAACtI,CAAE,CACVC,CAAC,CAAEqI,IAAI,CAACrI,CAAC,CAAG,EAAG,CACfyI,UAAU,CAAC,QAAQ,CACnBC,gBAAgB,CAAC,QAAQ,CACzBX,IAAI,CAAE3L,KAAK,CAACoJ,OAAO,CAACqD,OAAO,CAACnD,IAAK,CACjCG,QAAQ,CAAC,GAAG,CACZR,UAAU,CAAC,qBAAqB,CAChCC,UAAU,CAAC,MAAM,CAAAd,QAAA,CAClB,UAED,CAAM,CACP,cAAApD,MAAA,CApCgBnE,KAAK,CAACwB,EAAE,CAqCxB,CAAC,CAER,CACF,CACF,CACA,MAAO,KAAI,CACb,CAAC,CAAC,EACC,CAAC,CACH,CAAC,cAGNrD,KAAA,CAACV,GAAG,EACFiK,EAAE,CAAE,CACFG,QAAQ,CAAE,UAAU,CACpBoB,MAAM,CAAE,EAAE,CACVK,KAAK,CAAE,EAAE,CACTH,UAAU,CAAE,uBAAuB,CACnCxB,CAAC,CAAE,GAAG,CACNI,YAAY,CAAE,KAAK,CACnB8D,SAAS,CAAE,2BAA2B,CACtCC,cAAc,CAAE,WAAW,CAC3B1C,MAAM,CAAE,EACV,CAAE,CAAA7B,QAAA,eAEFtJ,IAAA,CAACP,UAAU,EACTuK,OAAO,CAAC,SAAS,CACjBU,OAAO,CAAC,OAAO,CACfjB,EAAE,CAAE,CACFW,UAAU,CAAE,MAAM,CAClBT,EAAE,CAAE,GAAG,CACPQ,UAAU,CAAE,qBACd,CAAE,CAAAb,QAAA,CACH,sBAED,CAAY,CAAC,cACbpJ,KAAA,CAACT,UAAU,EACTuK,OAAO,CAAC,SAAS,CACjBU,OAAO,CAAC,OAAO,CACfjB,EAAE,CAAE,CAAEU,UAAU,CAAE,qBAAsB,CAAE,CAAAb,QAAA,eAE1CtJ,IAAA,CAACR,GAAG,EACFsO,SAAS,CAAC,MAAM,CAChBrE,EAAE,CAAE,CACFiB,OAAO,CAAE,cAAc,CACvBI,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,EAAE,CACVjB,YAAY,CAAE,KAAK,CACnBiE,eAAe,CAAE7M,KAAK,CAACoJ,OAAO,CAACC,OAAO,CAACC,IAAI,CAC3CwD,EAAE,CAAE,CACN,CAAE,CACH,CAAC,kBAEJ,EAAY,CAAC,cACb9N,KAAA,CAACT,UAAU,EACTuK,OAAO,CAAC,SAAS,CACjBU,OAAO,CAAC,OAAO,CACfjB,EAAE,CAAE,CAAEU,UAAU,CAAE,qBAAsB,CAAE,CAAAb,QAAA,eAE1CtJ,IAAA,CAACR,GAAG,EACFsO,SAAS,CAAC,MAAM,CAChBrE,EAAE,CAAE,CACFiB,OAAO,CAAE,cAAc,CACvBI,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,EAAE,CACVjB,YAAY,CAAE,KAAK,CACnBiE,eAAe,CAAEjK,YAAY,CAACM,aAAa,CAC3CzB,OAAO,CAAE,GAAG,CACZqL,EAAE,CAAE,CACN,CAAE,CACH,CAAC,qBAEJ,EAAY,CAAC,EACV,CAAC,EACH,CAAC,cAEN9N,KAAA,CAACT,UAAU,EACTyK,KAAK,CAAC,QAAQ,CACdF,OAAO,CAAC,OAAO,CACfK,KAAK,CAAC,gBAAgB,CACtBZ,EAAE,CAAE,CACFwE,EAAE,CAAE,CAAC,CACL9D,UAAU,CAAE,qBAAqB,CACjC3I,SAAS,CAAEA,SAAS,CAAG,uBAAuB,CAAG,MACnD,CAAE,CAAA8H,QAAA,EACH,kBACiB,CAACzH,cAAc,CAACM,MAAM,CAAC,+BACzC,EAAY,CAAC,EACR,CAAC,CACI,CAAC,CAEnB,CAAC,CAED,cAAe,CAAArB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}