{"ast":null,"code":"import _objectSpread from\"/Users/gerardo/Downloads/Bonsaito/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState}from'react';import{Box,Typography,Paper,useTheme}from'@mui/material';import{animated,useSpring}from'react-spring';import{supabase}from'../supabaseClient';// Helper functions\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const lerp=(a,b,t)=>a*(1-t)+b*t;const clamp=(num,min,max)=>Math.min(Math.max(num,min),max);const randRange=(min,max)=>Math.random()*(max-min)+min;// Simplified structure - focusing on trunk and foliage pads\n// New Color Palette based on the target image\nconst TRUNK_COLOR='#604E43';const FOLIAGE_HIGHLIGHT_COLOR='#A1D490';const FOLIAGE_SHADE_COLOR='#7CAC6C';const POT_COLOR='#8D7B6F';const BonsaiTree=_ref=>{let{skills,totalSkills}=_ref;const theme=useTheme();const[correctAnswersCount,setCorrectAnswersCount]=useState(0);const[isLoading,setIsLoading]=useState(true);const[imageError,setImageError]=useState(false);const[isImageLoaded,setIsImageLoaded]=useState(false);// Determine which bonsai image to show (1.png to 11.png)\nconst getBonsaiImageNumber=()=>{// Default to image 1 (empty bonsai)\nif(correctAnswersCount===0)return 1;// Map the number of correct answers to the appropriate image\n// 1-10 correct answers maps to images 2-11\nreturn Math.min(correctAnswersCount+1,11);};const bonsaiImageNumber=getBonsaiImageNumber();// Construct the image path using the base URL\nconst bonsaiImagePath=\"/bonsaipng/\".concat(bonsaiImageNumber,\".png\");const altarImagePath='/altar2.png';// Log the image path for debugging\nconsole.log('Loading bonsai image:',bonsaiImagePath);// Animations - updated to use the recommended API\nconst[containerProps,containerApi]=useSpring(()=>({opacity:0,config:{duration:500}}));useEffect(()=>{containerApi.start({opacity:1});},[containerApi]);const[imageProps,imageApi]=useSpring(()=>({transform:'translateY(20px)',config:{tension:100,friction:10}}));useEffect(()=>{imageApi.start({transform:'translateY(0px)'});},[imageApi]);// Preload both bonsai and altar images\nuseEffect(()=>{const preloadImages=async()=>{setIsLoading(true);try{await Promise.all([new Promise((resolve,reject)=>{const bonsaiImg=new Image();bonsaiImg.src=bonsaiImagePath;bonsaiImg.onload=resolve;bonsaiImg.onerror=reject;}),new Promise((resolve,reject)=>{const altarImg=new Image();altarImg.src=altarImagePath;altarImg.onload=resolve;altarImg.onerror=reject;})]);setIsImageLoaded(true);setImageError(false);}catch(error){console.error('Failed to load images:',error);setImageError(true);}finally{setIsLoading(false);}};preloadImages();},[bonsaiImagePath,altarImagePath]);// Fetch the user's question data to determine how many questions were answered correctly\nuseEffect(()=>{const fetchUserProgress=async()=>{setIsLoading(true);try{// Get the current user\nconst{data:{user}}=await supabase.auth.getUser();if(!user){console.error('No user logged in');setIsLoading(false);return;}// Get the completed questions for the user\nconst{data,error}=await supabase.from('practice_questions').select('*').eq('user_id',user.id).eq('completed',true);if(error){throw error;}// Calculate how many questions were answered correctly\nconst correctAnswers=data?data.filter(q=>q.correct===true).length:0;console.log('Correct answers:',correctAnswers);setCorrectAnswersCount(correctAnswers);}catch(error){console.error('Error fetching user progress:',error);}finally{setIsLoading(false);}};fetchUserProgress();},[]);const handleImageError=()=>{console.error(\"Failed to load image: \".concat(bonsaiImagePath));setImageError(true);};// Add global keyframes for floating animation\nuseEffect(()=>{const style=document.createElement('style');style.innerHTML=\"@keyframes floatBonsai {\\n      0% { transform: translateY(0) scale(0.5); }\\n      50% { transform: translateY(-10px) scale(0.5); }\\n      100% { transform: translateY(0) scale(0.5); }\\n    }\";document.head.appendChild(style);return()=>{document.head.removeChild(style);};},[]);if(isLoading){return/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',alignItems:'center',height:'400px'},children:/*#__PURE__*/_jsx(Typography,{children:\"Loading your bonsai...\"})});}if(imageError){return/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center',height:'400px',gap:2},children:[/*#__PURE__*/_jsx(Typography,{color:\"error\",children:\"Unable to load bonsai image\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"Please try refreshing the page\"})]});}return/*#__PURE__*/_jsx(animated.div,{style:containerProps,children:/*#__PURE__*/_jsx(Paper,{elevation:0,sx:{p:3,mb:4,borderRadius:'20px',backgroundColor:'none',position:'relative',height:'100%',overflow:'hidden'},children:/*#__PURE__*/_jsxs(Box,{sx:{position:'relative',zIndex:1,display:'flex',flexDirection:'column',height:'100%'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,align:\"center\",sx:{fontWeight:'bold',color:'#2C1810',textShadow:'0 2px 4px rgba(0,0,0,0.1)',mb:3},children:\"Your Learning Bonsai\"}),/*#__PURE__*/_jsx(Box,{sx:{flexGrow:1,display:'flex',justifyContent:'center',alignItems:'flex-start',position:'relative',width:'100%',aspectRatio:'16/9',maxHeight:'600px',mt:'-20%',// Move the bonsai 20% higher\n'& img':{maxWidth:'100%',maxHeight:'100%',objectFit:'contain',transition:'transform 0.3s ease-in-out','&:hover':{transform:'scale(1.02)'}}},children:/*#__PURE__*/_jsx(animated.img,{src:bonsaiImagePath,alt:\"Bonsai tree progress - \".concat(correctAnswersCount,\" questions correct\"),style:_objectSpread(_objectSpread({},imageProps),{},{opacity:isImageLoaded?1:0,animation:'floatBonsai 3.5s ease-in-out infinite',transform:'scale(0.5)'}),onLoad:()=>setIsImageLoaded(true),onError:handleImageError})}),/*#__PURE__*/_jsxs(Box,{sx:{mt:3,textAlign:'center',color:'#2C1810',textShadow:'0 1px 2px rgba(0,0,0,0.1)'},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[correctAnswersCount,\" Questions Mastered\"]}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{mt:1,opacity:0.8},children:\"Keep practicing to grow your bonsai!\"})]})]})})});};export default BonsaiTree;","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","Paper","useTheme","animated","useSpring","supabase","jsx","_jsx","jsxs","_jsxs","lerp","a","b","t","clamp","num","min","max","Math","randRange","random","TRUNK_COLOR","FOLIAGE_HIGHLIGHT_COLOR","FOLIAGE_SHADE_COLOR","POT_COLOR","BonsaiTree","_ref","skills","totalSkills","theme","correctAnswersCount","setCorrectAnswersCount","isLoading","setIsLoading","imageError","setImageError","isImageLoaded","setIsImageLoaded","getBonsaiImageNumber","bonsaiImageNumber","bonsaiImagePath","concat","altarImagePath","console","log","containerProps","containerApi","opacity","config","duration","start","imageProps","imageApi","transform","tension","friction","preloadImages","Promise","all","resolve","reject","bonsaiImg","Image","src","onload","onerror","altarImg","error","fetchUserProgress","data","user","auth","getUser","from","select","eq","id","correctAnswers","filter","q","correct","length","handleImageError","style","document","createElement","innerHTML","head","appendChild","removeChild","sx","display","justifyContent","alignItems","height","children","flexDirection","gap","color","variant","div","elevation","p","mb","borderRadius","backgroundColor","position","overflow","zIndex","gutterBottom","align","fontWeight","textShadow","flexGrow","width","aspectRatio","maxHeight","mt","maxWidth","objectFit","transition","img","alt","_objectSpread","animation","onLoad","onError","textAlign"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { animated, useSpring } from 'react-spring';\nimport { supabase } from '../supabaseClient';\n\n// Helper functions\nconst lerp = (a: number, b: number, t: number): number => a * (1 - t) + b * t;\nconst clamp = (num: number, min: number, max: number): number => Math.min(Math.max(num, min), max);\nconst randRange = (min: number, max: number): number => Math.random() * (max - min) + min;\n\ninterface Skill {\n  id: string;\n  name: string;\n  category: string;\n  mastered: boolean;\n  masteryLevel: number; // Assuming 0-100\n}\n\ninterface BonsaiTreeProps {\n  skills: Skill[];\n  totalSkills: number;\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\n// Simplified structure - focusing on trunk and foliage pads\ninterface FoliagePadElement {\n  id: string;\n  cx: number;\n  cy: number;\n  rx: number;\n  ry: number;\n  rotation: number;\n  // Elements for gradient/layering\n  layers: {\n    color: string;\n    opacity: number;\n    scale: number; // To create inner layers\n  }[];\n}\n\n// New Color Palette based on the target image\nconst TRUNK_COLOR = '#604E43'; \nconst FOLIAGE_HIGHLIGHT_COLOR = '#A1D490';\nconst FOLIAGE_SHADE_COLOR = '#7CAC6C'; \nconst POT_COLOR = '#8D7B6F';\n\nconst BonsaiTree: React.FC<BonsaiTreeProps> = ({ skills, totalSkills }) => {\n  const theme = useTheme();\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [imageError, setImageError] = useState(false);\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n\n  // Determine which bonsai image to show (1.png to 11.png)\n  const getBonsaiImageNumber = () => {\n    // Default to image 1 (empty bonsai)\n    if (correctAnswersCount === 0) return 1;\n    \n    // Map the number of correct answers to the appropriate image\n    // 1-10 correct answers maps to images 2-11\n    return Math.min(correctAnswersCount + 1, 11);\n  };\n\n  const bonsaiImageNumber = getBonsaiImageNumber();\n  \n  // Construct the image path using the base URL\n  const bonsaiImagePath = `/bonsaipng/${bonsaiImageNumber}.png`;\n  const altarImagePath = '/altar2.png';\n\n  // Log the image path for debugging\n  console.log('Loading bonsai image:', bonsaiImagePath);\n\n  // Animations - updated to use the recommended API\n  const [containerProps, containerApi] = useSpring(() => ({ \n    opacity: 0,\n    config: { duration: 500 }\n  }));\n\n  useEffect(() => {\n    containerApi.start({ opacity: 1 });\n  }, [containerApi]);\n\n  const [imageProps, imageApi] = useSpring(() => ({\n    transform: 'translateY(20px)',\n    config: { tension: 100, friction: 10 }\n  }));\n\n  useEffect(() => {\n    imageApi.start({ transform: 'translateY(0px)' });\n  }, [imageApi]);\n\n  // Preload both bonsai and altar images\n  useEffect(() => {\n    const preloadImages = async () => {\n      setIsLoading(true);\n      try {\n        await Promise.all([\n          new Promise((resolve, reject) => {\n            const bonsaiImg = new Image();\n            bonsaiImg.src = bonsaiImagePath;\n            bonsaiImg.onload = resolve;\n            bonsaiImg.onerror = reject;\n          }),\n          new Promise((resolve, reject) => {\n            const altarImg = new Image();\n            altarImg.src = altarImagePath;\n            altarImg.onload = resolve;\n            altarImg.onerror = reject;\n          })\n        ]);\n        setIsImageLoaded(true);\n        setImageError(false);\n      } catch (error) {\n        console.error('Failed to load images:', error);\n        setImageError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    preloadImages();\n  }, [bonsaiImagePath, altarImagePath]);\n\n  // Fetch the user's question data to determine how many questions were answered correctly\n  useEffect(() => {\n    const fetchUserProgress = async () => {\n      setIsLoading(true);\n      try {\n        // Get the current user\n        const { data: { user } } = await supabase.auth.getUser();\n        \n        if (!user) {\n          console.error('No user logged in');\n          setIsLoading(false);\n          return;\n        }\n\n        // Get the completed questions for the user\n        const { data, error } = await supabase\n          .from('practice_questions')\n          .select('*')\n          .eq('user_id', user.id)\n          .eq('completed', true);\n\n        if (error) {\n          throw error;\n        }\n\n        // Calculate how many questions were answered correctly\n        const correctAnswers = data ? data.filter(q => q.correct === true).length : 0;\n        console.log('Correct answers:', correctAnswers);\n        setCorrectAnswersCount(correctAnswers);\n      } catch (error) {\n        console.error('Error fetching user progress:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserProgress();\n  }, []);\n\n  const handleImageError = () => {\n    console.error(`Failed to load image: ${bonsaiImagePath}`);\n    setImageError(true);\n  };\n\n  // Add global keyframes for floating animation\n  useEffect(() => {\n    const style = document.createElement('style');\n    style.innerHTML = `@keyframes floatBonsai {\n      0% { transform: translateY(0) scale(0.5); }\n      50% { transform: translateY(-10px) scale(0.5); }\n      100% { transform: translateY(0) scale(0.5); }\n    }`;\n    document.head.appendChild(style);\n    return () => { document.head.removeChild(style); };\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '400px' \n      }}>\n        <Typography>Loading your bonsai...</Typography>\n      </Box>\n    );\n  }\n\n  if (imageError) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '400px',\n        gap: 2\n      }}>\n        <Typography color=\"error\">Unable to load bonsai image</Typography>\n        <Typography variant=\"body2\">Please try refreshing the page</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <animated.div style={containerProps}>\n      <Paper \n        elevation={0} \n        sx={{ \n          p: 3, \n          mb: 4, \n          borderRadius: '20px',\n          backgroundColor: 'none',\n          position: 'relative',\n          height: '100%',\n          overflow: 'hidden',\n        }}\n      >\n        <Box sx={{ position: 'relative', zIndex: 1, display: 'flex', flexDirection: 'column', height: '100%' }}>\n        <Typography \n          variant=\"h5\" \n          gutterBottom \n          align=\"center\" \n          sx={{ \n            fontWeight: 'bold', \n              color: '#2C1810',\n              textShadow: '0 2px 4px rgba(0,0,0,0.1)',\n            mb: 3\n          }}\n          >\n            Your Learning Bonsai\n          </Typography>\n          \n          <Box sx={{\n            flexGrow: 1,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n            position: 'relative',\n            width: '100%',\n            aspectRatio: '16/9',\n            maxHeight: '600px',\n            mt: '-20%', // Move the bonsai 20% higher\n            '& img': {\n              maxWidth: '100%',\n              maxHeight: '100%',\n              objectFit: 'contain',\n              transition: 'transform 0.3s ease-in-out',\n              '&:hover': {\n                transform: 'scale(1.02)'\n              }\n            }\n          }}>\n            <animated.img\n              src={bonsaiImagePath}\n              alt={`Bonsai tree progress - ${correctAnswersCount} questions correct`}\n              style={{\n                ...imageProps,\n                opacity: isImageLoaded ? 1 : 0,\n                animation: 'floatBonsai 3.5s ease-in-out infinite',\n                transform: 'scale(0.5)'\n              }}\n              onLoad={() => setIsImageLoaded(true)}\n              onError={handleImageError}\n            />\n          </Box>\n          \n          <Box sx={{ \n            mt: 3, \n            textAlign: 'center',\n            color: '#2C1810',\n            textShadow: '0 1px 2px rgba(0,0,0,0.1)'\n          }}>\n            <Typography variant=\"h6\">\n              {correctAnswersCount} Questions Mastered\n            </Typography>\n            <Typography variant=\"body2\" sx={{ mt: 1, opacity: 0.8 }}>\n              Keep practicing to grow your bonsai!\n            </Typography>\n          </Box>\n        </Box>\n      </Paper>\n    </animated.div>\n  );\n};\n\nexport default BonsaiTree;\n\n \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}