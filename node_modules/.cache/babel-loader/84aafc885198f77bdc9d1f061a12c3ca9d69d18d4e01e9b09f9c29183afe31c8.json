{"ast":null,"code":"var _jsxFileName = \"/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { useSpring, animated, config } from 'react-spring';\n\n// Helper functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lerp = (a, b, t) => a * (1 - t) + b * t;\nconst clamp = (num, min, max) => Math.min(Math.max(num, min), max);\nconst randRange = (min, max) => Math.random() * (max - min) + min;\n// Color palette matching the image\nconst TRUNK_COLOR = '#6A4A3C'; // A richer, slightly desaturated brown\nconst BRANCH_COLOR = '#7B584A';\nconst LEAF_MASTERED_COLOR = '#2A603B'; // Darker, more saturated green\nconst LEAF_IN_PROGRESS_COLOR = '#4CAF50'; // Brighter, but still natural green\nconst LEAF_LOW_PROGRESS_COLOR = '#7DB080'; // Paler green for low mastery\nconst POT_COLOR_BODY = '#8A7967'; // Muted brownish-gray\nconst POT_COLOR_RIM = '#9C8B7A';\nconst POT_FEET_COLOR = '#796A5B';\nconst BonsaiTree = ({\n  skills,\n  totalSkills\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const theme = useTheme();\n  const masteredSkillsCount = useMemo(() => {\n    return skills.filter(skill => skill.mastered).length;\n  }, [skills]);\n  const overallMasteryRatio = useMemo(() => {\n    return totalSkills > 0 ? masteredSkillsCount / totalSkills : 0;\n  }, [masteredSkillsCount, totalSkills]);\n  const skillsByCategory = useMemo(() => {\n    return skills.reduce((acc, skill) => {\n      if (!acc[skill.category]) acc[skill.category] = [];\n      acc[skill.category].push(skill);\n      return acc;\n    }, {});\n  }, [skills]);\n  const treeElements = useMemo(() => {\n    const categories = Object.keys(skillsByCategory);\n    let numCategories = categories.length;\n    if (numCategories === 0) return {\n      trunkPath: '',\n      branches: [],\n      pot: {\n        body: '',\n        rim: '',\n        feet: []\n      }\n    };\n\n    // Limit to max 3-4 main foliage areas for the target image style\n    const MAX_MAIN_FOLIAGE_AREAS = 3;\n    const visibleCategories = categories.slice(0, MAX_MAIN_FOLIAGE_AREAS);\n    numCategories = visibleCategories.length;\n    const svgWidth = 300;\n    const svgHeight = 400;\n    const potBaseY = svgHeight - 30; // Leave space for feet\n    const potBodyHeight = 40;\n    const potRimHeight = 10;\n    const potWidth = 130;\n    const potFeetHeight = 8;\n    const potFeetWidth = 20;\n    const pot = {\n      body: `M${svgWidth / 2 - potWidth / 2},${potBaseY} L${svgWidth / 2 - potWidth / 2 + 15},${potBaseY - potBodyHeight} L${svgWidth / 2 + potWidth / 2 - 15},${potBaseY - potBodyHeight} L${svgWidth / 2 + potWidth / 2},${potBaseY} Z`,\n      rim: `M${svgWidth / 2 - potWidth / 2 + 10},${potBaseY - potBodyHeight} Q${svgWidth / 2},${potBaseY - potBodyHeight - potRimHeight} ${svgWidth / 2 + potWidth / 2 - 10},${potBaseY - potBodyHeight} H${svgWidth / 2 - potWidth / 2 + 10} Z`,\n      feet: [`M${svgWidth / 2 - potWidth / 2 + 15},${potBaseY} h${potFeetWidth} v${potFeetHeight} h-${potFeetWidth} Z`, `M${svgWidth / 2 + potWidth / 2 - 15 - potFeetWidth},${potBaseY} h${potFeetWidth} v${potFeetHeight} h-${potFeetWidth} Z`]\n    };\n    const trunkStartPoint = {\n      x: svgWidth / 2,\n      y: potBaseY - potBodyHeight - potRimHeight / 2\n    };\n    const trunkBaseActualHeight = clamp(120 + overallMasteryRatio * 60, 100, 180);\n    const trunkTopPoint = {\n      x: trunkStartPoint.x + randRange(-10, 10),\n      y: trunkStartPoint.y - trunkBaseActualHeight\n    }; // Slight lean at top\n    const trunkWidthAtBase = clamp(25 + overallMasteryRatio * 20, 20, 45);\n    const trunkWidthAtTop = clamp(trunkWidthAtBase * 0.5, 10, trunkWidthAtBase * 0.7);\n\n    // S-curve trunk design\n    const controlPoint1X = trunkStartPoint.x + randRange(20, 40) * (Math.random() > 0.5 ? 1 : -1);\n    const controlPoint1Y = trunkStartPoint.y - trunkBaseActualHeight * 0.3;\n    const controlPoint2X = trunkTopPoint.x + randRange(15, 30) * (Math.random() > 0.5 ? 1 : -1);\n    const controlPoint2Y = trunkStartPoint.y - trunkBaseActualHeight * 0.7;\n    const trunkPath = `M ${trunkStartPoint.x - trunkWidthAtBase / 2}, ${trunkStartPoint.y}\n      C ${controlPoint1X - trunkWidthAtBase * 0.4}, ${controlPoint1Y},\n        ${controlPoint2X - trunkWidthAtTop * 0.6}, ${controlPoint2Y},\n        ${trunkTopPoint.x - trunkWidthAtTop / 2}, ${trunkTopPoint.y}\n      L ${trunkTopPoint.x + trunkWidthAtTop / 2}, ${trunkTopPoint.y}\n      C ${controlPoint2X + trunkWidthAtTop * 0.6}, ${controlPoint2Y},\n        ${controlPoint1X + trunkWidthAtBase * 0.4}, ${controlPoint1Y},\n        ${trunkStartPoint.x + trunkWidthAtBase / 2}, ${trunkStartPoint.y} Z`;\n    const generatedBranches = [];\n    const branchAngles = numCategories === 1 ? [-Math.PI / 2] : numCategories === 2 ? [-Math.PI / 2 - 0.8, -Math.PI / 2 + 0.8] : [-Math.PI / 2 - 1.0, -Math.PI / 2, -Math.PI / 2 + 1.0]; // For 3 branches\n\n    visibleCategories.forEach((category, index) => {\n      const categorySkills = skillsByCategory[category];\n      const masteredInCategory = categorySkills.filter(s => s.mastered).length;\n      const categoryMasteryRatio = categorySkills.length > 0 ? masteredInCategory / categorySkills.length : 0;\n      const angle = branchAngles[index] + randRange(-0.15, 0.15);\n      const len = clamp(50 + categorySkills.length * 5 + categoryMasteryRatio * 20, 40, 90);\n      const thick = clamp(trunkWidthAtTop * 0.6 + categoryMasteryRatio * 5, 5, trunkWidthAtTop * 0.9);\n\n      // Branch start slightly up the trunk for visual separation\n      const branchStartRelY = trunkBaseActualHeight * (0.1 + index * 0.15); // Stagger start points\n      const bStart = {\n        x: lerp(trunkStartPoint.x, trunkTopPoint.x, branchStartRelY / trunkBaseActualHeight) + randRange(-5, 5),\n        y: trunkStartPoint.y - branchStartRelY + randRange(-5, 5)\n      };\n      const bEnd = {\n        x: bStart.x + Math.cos(angle) * len,\n        y: bStart.y + Math.sin(angle) * len\n      };\n      const bCp1 = {\n        x: bStart.x + Math.cos(angle + 0.5) * len * 0.4,\n        y: bStart.y + Math.sin(angle + 0.5) * len * 0.4\n      };\n      const bCp2 = {\n        x: bEnd.x - Math.cos(angle - 0.3) * len * 0.3,\n        y: bEnd.y - Math.sin(angle - 0.3) * len * 0.3\n      };\n      const foliagePads = [];\n      const numPadClusters = 1; // One main pad per branch\n      for (let i = 0; i < numPadClusters; i++) {\n        const padBasePoint = bEnd; // Center pad around branch end\n        const basePadRx = clamp(25 + categorySkills.length * 2.5 + categoryMasteryRatio * 15, 20, 45);\n        const basePadRy = clamp(20 + categorySkills.length * 2 + categoryMasteryRatio * 10, 15, 35);\n        const padElements = [];\n        const numEllipsesInPad = 5 + Math.floor(categoryMasteryRatio * 5); // More ellipses for higher mastery = denser\n        for (let j = 0; j < numEllipsesInPad; j++) {\n          const rx = basePadRx * randRange(0.5, 1.0);\n          const ry = basePadRy * randRange(0.5, 1.0);\n          const cx = padBasePoint.x + randRange(-basePadRx * 0.4, basePadRx * 0.4);\n          const cy = padBasePoint.y + randRange(-basePadRy * 0.4, basePadRy * 0.4);\n          let color = LEAF_LOW_PROGRESS_COLOR;\n          if (categoryMasteryRatio > 0.66) color = LEAF_MASTERED_COLOR;else if (categoryMasteryRatio > 0.33) color = LEAF_IN_PROGRESS_COLOR;\n          padElements.push({\n            id: `fe-${category}-${index}-${i}-${j}`,\n            cx,\n            cy,\n            rx,\n            ry,\n            color,\n            opacity: randRange(0.6, 0.95)\n          });\n        }\n        foliagePads.push({\n          id: `pad-${category}-${index}-${i}`,\n          cx: padBasePoint.x,\n          cy: padBasePoint.y,\n          // These are indicative, actual shape from elements\n          rx: basePadRx,\n          ry: basePadRy,\n          // These are indicative\n          rotation: randRange(-10, 10),\n          color: 'transparent',\n          // Pad container is transparent, elements have color\n          elements: padElements\n        });\n      }\n      generatedBranches.push({\n        id: `branch-${category}-${index}`,\n        start: bStart,\n        end: bEnd,\n        control1: bCp1,\n        control2: bCp2,\n        thickness: thick,\n        angle,\n        level: 0,\n        skillsInCategory: categorySkills,\n        masteryRatio: categoryMasteryRatio,\n        subBranches: [],\n        foliagePads\n      });\n    });\n    return {\n      trunkPath,\n      branches: generatedBranches,\n      pot\n    };\n  }, [skillsByCategory, overallMasteryRatio, theme.palette.grey]);\n  const animProps = useSpring({\n    opacity: 1,\n    from: {\n      opacity: 0\n    },\n    config: config.molasses\n  });\n  const elementAnimProps = (delay = 0) => {\n    _s();\n    return useSpring({\n      to: {\n        opacity: 1,\n        transform: 'scale(1)'\n      },\n      from: {\n        opacity: 0,\n        transform: 'scale(0.8)'\n      },\n      config: config.gentle,\n      delay\n    });\n  };\n  _s(elementAnimProps, \"osm+04XShAFeF/DrWOpJZHjaaNg=\", false, function () {\n    return [useSpring];\n  });\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: animProps,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 0,\n      sx: {\n        p: 3,\n        mb: 4,\n        borderRadius: '20px',\n        backgroundColor: '#f7f7f7'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        align: \"center\",\n        sx: {\n          fontWeight: 'bold',\n          color: '#555'\n        },\n        children: \"Your Growth Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          height: 350,\n          position: 'relative',\n          mt: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: \"0 0 300 400\",\n          style: {\n            overflow: 'visible'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n            children: [/*#__PURE__*/_jsxDEV(\"linearGradient\", {\n              id: \"trunkStrokeGradient\",\n              x1: \"0%\",\n              y1: \"0%\",\n              x2: \"100%\",\n              y2: \"0%\",\n              children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"0%\",\n                stopColor: TRUNK_COLOR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"50%\",\n                stopColor: TRUNK_COLOR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"100%\",\n                stopColor: TRUNK_COLOR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"filter\", {\n              id: \"subtleShadow\",\n              x: \"-50%\",\n              y: \"-50%\",\n              width: \"200%\",\n              height: \"200%\",\n              children: /*#__PURE__*/_jsxDEV(\"feDropShadow\", {\n                dx: \"1\",\n                dy: \"2\",\n                stdDeviation: \"1\",\n                floodColor: \"#000\",\n                floodOpacity: \"0.2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 16\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(animated.g, {\n            style: elementAnimProps(200),\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: treeElements.pot.body,\n              fill: POT_COLOR_BODY,\n              filter: \"url(#subtleShadow)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: treeElements.pot.rim,\n              fill: POT_COLOR_RIM\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), treeElements.pot.feet.map((footPath, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n              d: footPath,\n              fill: POT_FEET_COLOR\n            }, `pot-foot-${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(animated.path, {\n            d: treeElements.trunkPath,\n            fill: \"url(#trunkStrokeGradient)\" // Using the solid color gradient for fill\n            ,\n            stroke: TRUNK_COLOR // Stroke for definition\n            ,\n            strokeWidth: \"1.5\",\n            style: elementAnimProps(400),\n            filter: \"url(#subtleShadow)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), treeElements.branches.map((branch, branchIndex) => /*#__PURE__*/_jsxDEV(animated.g, {\n            style: elementAnimProps(600 + branchIndex * 200),\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: `M ${branch.start.x} ${branch.start.y} C ${branch.control1.x} ${branch.control1.y}, ${branch.control2.x} ${branch.control2.y}, ${branch.end.x} ${branch.end.y}`,\n              stroke: BRANCH_COLOR,\n              strokeWidth: branch.thickness,\n              fill: \"none\",\n              strokeLinecap: \"round\",\n              filter: \"url(#subtleShadow)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this), branch.foliagePads.map(pad => /*#__PURE__*/_jsxDEV(\"g\", {\n              transform: `rotate(${pad.rotation} ${pad.cx} ${pad.cy})`,\n              children: pad.elements.map(el => /*#__PURE__*/_jsxDEV(\"ellipse\", {\n                cx: el.cx,\n                cy: el.cy,\n                rx: el.rx,\n                ry: el.ry,\n                fill: el.color,\n                opacity: el.opacity,\n                filter: \"url(#subtleShadow)\"\n              }, el.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 23\n              }, this))\n            }, pad.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 19\n            }, this))]\n          }, branch.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        align: \"center\",\n        sx: {\n          mt: 3,\n          color: '#666'\n        },\n        children: [\"You've mastered \", masteredSkillsCount, \" skills so far! Keep growing!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s2(BonsaiTree, \"m2gpCQz6ZArzRPABTb1/9V/u+lA=\", false, function () {\n  return [useTheme, useSpring];\n});\n_c = BonsaiTree;\nexport default BonsaiTree;\nvar _c;\n$RefreshReg$(_c, \"BonsaiTree\");","map":{"version":3,"names":["React","useMemo","Box","Typography","Paper","useTheme","useSpring","animated","config","jsxDEV","_jsxDEV","lerp","a","b","t","clamp","num","min","max","Math","randRange","random","TRUNK_COLOR","BRANCH_COLOR","LEAF_MASTERED_COLOR","LEAF_IN_PROGRESS_COLOR","LEAF_LOW_PROGRESS_COLOR","POT_COLOR_BODY","POT_COLOR_RIM","POT_FEET_COLOR","BonsaiTree","skills","totalSkills","_s2","_s","$RefreshSig$","theme","masteredSkillsCount","filter","skill","mastered","length","overallMasteryRatio","skillsByCategory","reduce","acc","category","push","treeElements","categories","Object","keys","numCategories","trunkPath","branches","pot","body","rim","feet","MAX_MAIN_FOLIAGE_AREAS","visibleCategories","slice","svgWidth","svgHeight","potBaseY","potBodyHeight","potRimHeight","potWidth","potFeetHeight","potFeetWidth","trunkStartPoint","x","y","trunkBaseActualHeight","trunkTopPoint","trunkWidthAtBase","trunkWidthAtTop","controlPoint1X","controlPoint1Y","controlPoint2X","controlPoint2Y","generatedBranches","branchAngles","PI","forEach","index","categorySkills","masteredInCategory","s","categoryMasteryRatio","angle","len","thick","branchStartRelY","bStart","bEnd","cos","sin","bCp1","bCp2","foliagePads","numPadClusters","i","padBasePoint","basePadRx","basePadRy","padElements","numEllipsesInPad","floor","j","rx","ry","cx","cy","color","id","opacity","rotation","elements","start","end","control1","control2","thickness","level","skillsInCategory","masteryRatio","subBranches","palette","grey","animProps","from","molasses","elementAnimProps","delay","to","transform","gentle","div","style","children","elevation","sx","p","mb","borderRadius","backgroundColor","variant","gutterBottom","align","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","width","height","position","mt","viewBox","overflow","x1","y1","x2","y2","offset","stopColor","dx","dy","stdDeviation","floodColor","floodOpacity","g","d","fill","map","footPath","path","stroke","strokeWidth","branch","branchIndex","strokeLinecap","pad","el","_c","$RefreshReg$"],"sources":["/Users/gerardo/Downloads/Bonsaito/src/components/BonsaiTree.tsx"],"sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { useSpring, animated, config } from 'react-spring';\n\n// Helper functions\nconst lerp = (a: number, b: number, t: number): number => a * (1 - t) + b * t;\nconst clamp = (num: number, min: number, max: number): number => Math.min(Math.max(num, min), max);\nconst randRange = (min: number, max: number): number => Math.random() * (max - min) + min;\n\ninterface Skill {\n  id: string;\n  name: string;\n  category: string;\n  mastered: boolean;\n  masteryLevel: number; // Assuming 0-100\n}\n\ninterface BonsaiTreeProps {\n  skills: Skill[];\n  totalSkills: number;\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\ninterface Branch {\n  id: string;\n  start: Point;\n  end: Point;\n  control1: Point;\n  control2: Point;\n  thickness: number;\n  angle: number;\n  level: number;\n  skillsInCategory: Skill[];\n  masteryRatio: number;\n  subBranches: Branch[]; // Kept for potential future expansion, but not used in this style\n  foliagePads: FoliagePad[];\n}\n\ninterface FoliagePad {\n  id: string;\n  cx: number;\n  cy: number;\n  rx: number;\n  ry: number;\n  rotation: number;\n  color: string;\n  elements: FoliageElement[]; // Multiple ellipses for a fuller look\n}\n\ninterface FoliageElement {\n  id: string;\n  cx: number;\n  cy: number;\n  rx: number;\n  ry: number;\n  color: string;\n  opacity: number;\n}\n\n// Color palette matching the image\nconst TRUNK_COLOR = '#6A4A3C'; // A richer, slightly desaturated brown\nconst BRANCH_COLOR = '#7B584A';\nconst LEAF_MASTERED_COLOR = '#2A603B'; // Darker, more saturated green\nconst LEAF_IN_PROGRESS_COLOR = '#4CAF50'; // Brighter, but still natural green\nconst LEAF_LOW_PROGRESS_COLOR = '#7DB080'; // Paler green for low mastery\nconst POT_COLOR_BODY = '#8A7967'; // Muted brownish-gray\nconst POT_COLOR_RIM = '#9C8B7A';\nconst POT_FEET_COLOR = '#796A5B';\n\nconst BonsaiTree: React.FC<BonsaiTreeProps> = ({ skills, totalSkills }) => {\n  const theme = useTheme();\n\n  const masteredSkillsCount = useMemo(() => {\n    return skills.filter(skill => skill.mastered).length;\n  }, [skills]);\n\n  const overallMasteryRatio = useMemo(() => {\n    return totalSkills > 0 ? masteredSkillsCount / totalSkills : 0;\n  }, [masteredSkillsCount, totalSkills]);\n\n  const skillsByCategory = useMemo(() => {\n    return skills.reduce((acc, skill) => {\n      if (!acc[skill.category]) acc[skill.category] = [];\n      acc[skill.category].push(skill);\n      return acc;\n    }, {} as Record<string, Skill[]>);\n  }, [skills]);\n\n  const treeElements = useMemo(() => {\n    const categories = Object.keys(skillsByCategory);\n    let numCategories = categories.length;\n    if (numCategories === 0) return { trunkPath: '', branches: [], pot: { body: '', rim: '', feet: [] } };\n\n    // Limit to max 3-4 main foliage areas for the target image style\n    const MAX_MAIN_FOLIAGE_AREAS = 3;\n    const visibleCategories = categories.slice(0, MAX_MAIN_FOLIAGE_AREAS);\n    numCategories = visibleCategories.length;\n\n    const svgWidth = 300;\n    const svgHeight = 400;\n    const potBaseY = svgHeight - 30; // Leave space for feet\n    const potBodyHeight = 40;\n    const potRimHeight = 10;\n    const potWidth = 130;\n    const potFeetHeight = 8;\n    const potFeetWidth = 20;\n\n    const pot = {\n      body: `M${svgWidth/2 - potWidth/2},${potBaseY} L${svgWidth/2 - potWidth/2 + 15},${potBaseY - potBodyHeight} L${svgWidth/2 + potWidth/2 - 15},${potBaseY - potBodyHeight} L${svgWidth/2 + potWidth/2},${potBaseY} Z`,\n      rim: `M${svgWidth/2 - potWidth/2 + 10},${potBaseY - potBodyHeight} Q${svgWidth/2},${potBaseY - potBodyHeight - potRimHeight} ${svgWidth/2 + potWidth/2 - 10},${potBaseY - potBodyHeight} H${svgWidth/2 - potWidth/2 + 10} Z`,\n      feet: [\n        `M${svgWidth/2 - potWidth/2 + 15},${potBaseY} h${potFeetWidth} v${potFeetHeight} h-${potFeetWidth} Z`,\n        `M${svgWidth/2 + potWidth/2 - 15 - potFeetWidth},${potBaseY} h${potFeetWidth} v${potFeetHeight} h-${potFeetWidth} Z`,\n      ]\n    };\n\n    const trunkStartPoint: Point = { x: svgWidth / 2, y: potBaseY - potBodyHeight - potRimHeight / 2 };    \n    const trunkBaseActualHeight = clamp(120 + overallMasteryRatio * 60, 100, 180);\n    const trunkTopPoint: Point = { x: trunkStartPoint.x + randRange(-10, 10), y: trunkStartPoint.y - trunkBaseActualHeight }; // Slight lean at top\n    const trunkWidthAtBase = clamp(25 + overallMasteryRatio * 20, 20, 45);\n    const trunkWidthAtTop = clamp(trunkWidthAtBase * 0.5, 10, trunkWidthAtBase * 0.7);\n\n    // S-curve trunk design\n    const controlPoint1X = trunkStartPoint.x + randRange(20, 40) * (Math.random() > 0.5 ? 1 : -1);\n    const controlPoint1Y = trunkStartPoint.y - trunkBaseActualHeight * 0.3;\n    const controlPoint2X = trunkTopPoint.x + randRange(15, 30) * (Math.random() > 0.5 ? 1 : -1);\n    const controlPoint2Y = trunkStartPoint.y - trunkBaseActualHeight * 0.7;\n\n    const trunkPath = `M ${trunkStartPoint.x - trunkWidthAtBase/2}, ${trunkStartPoint.y}\n      C ${controlPoint1X - trunkWidthAtBase*0.4}, ${controlPoint1Y},\n        ${controlPoint2X - trunkWidthAtTop*0.6}, ${controlPoint2Y},\n        ${trunkTopPoint.x - trunkWidthAtTop/2}, ${trunkTopPoint.y}\n      L ${trunkTopPoint.x + trunkWidthAtTop/2}, ${trunkTopPoint.y}\n      C ${controlPoint2X + trunkWidthAtTop*0.6}, ${controlPoint2Y},\n        ${controlPoint1X + trunkWidthAtBase*0.4}, ${controlPoint1Y},\n        ${trunkStartPoint.x + trunkWidthAtBase/2}, ${trunkStartPoint.y} Z`;\n\n    const generatedBranches: Branch[] = [];\n    const branchAngles = numCategories === 1 ? [-Math.PI/2] :\n                         numCategories === 2 ? [-Math.PI/2 - 0.8, -Math.PI/2 + 0.8] :\n                         [-Math.PI/2 - 1.0, -Math.PI/2, -Math.PI/2 + 1.0]; // For 3 branches\n\n    visibleCategories.forEach((category, index) => {\n      const categorySkills = skillsByCategory[category];\n      const masteredInCategory = categorySkills.filter(s => s.mastered).length;\n      const categoryMasteryRatio = categorySkills.length > 0 ? masteredInCategory / categorySkills.length : 0;\n\n      const angle = branchAngles[index] + randRange(-0.15, 0.15);\n      const len = clamp(50 + categorySkills.length * 5 + categoryMasteryRatio * 20, 40, 90);\n      const thick = clamp(trunkWidthAtTop * 0.6 + categoryMasteryRatio * 5, 5, trunkWidthAtTop * 0.9);\n      \n      // Branch start slightly up the trunk for visual separation\n      const branchStartRelY = trunkBaseActualHeight * (0.1 + index * 0.15); // Stagger start points\n      const bStart: Point = {\n          x: lerp(trunkStartPoint.x, trunkTopPoint.x, branchStartRelY / trunkBaseActualHeight) + randRange(-5,5) ,\n          y: trunkStartPoint.y - branchStartRelY + randRange(-5,5) ,\n      };\n      const bEnd: Point = { x: bStart.x + Math.cos(angle) * len, y: bStart.y + Math.sin(angle) * len };\n      const bCp1: Point = { x: bStart.x + Math.cos(angle + 0.5) * len * 0.4, y: bStart.y + Math.sin(angle + 0.5) * len * 0.4 };\n      const bCp2: Point = { x: bEnd.x - Math.cos(angle - 0.3) * len * 0.3, y: bEnd.y - Math.sin(angle - 0.3) * len * 0.3 };\n\n      const foliagePads: FoliagePad[] = [];\n      const numPadClusters = 1; // One main pad per branch\n      for (let i = 0; i < numPadClusters; i++) {\n        const padBasePoint = bEnd; // Center pad around branch end\n        const basePadRx = clamp(25 + categorySkills.length * 2.5 + categoryMasteryRatio * 15, 20, 45);\n        const basePadRy = clamp(20 + categorySkills.length * 2 + categoryMasteryRatio * 10, 15, 35);\n        const padElements: FoliageElement[] = [];\n\n        const numEllipsesInPad = 5 + Math.floor(categoryMasteryRatio * 5); // More ellipses for higher mastery = denser\n        for (let j = 0; j < numEllipsesInPad; j++) {\n          const rx = basePadRx * randRange(0.5, 1.0);\n          const ry = basePadRy * randRange(0.5, 1.0);\n          const cx = padBasePoint.x + randRange(-basePadRx * 0.4, basePadRx * 0.4);\n          const cy = padBasePoint.y + randRange(-basePadRy * 0.4, basePadRy * 0.4);\n          \n          let color = LEAF_LOW_PROGRESS_COLOR;\n          if (categoryMasteryRatio > 0.66) color = LEAF_MASTERED_COLOR;\n          else if (categoryMasteryRatio > 0.33) color = LEAF_IN_PROGRESS_COLOR;\n\n          padElements.push({\n            id: `fe-${category}-${index}-${i}-${j}`,\n            cx, cy, rx, ry,\n            color,\n            opacity: randRange(0.6, 0.95)\n          });\n        }\n        foliagePads.push({\n          id: `pad-${category}-${index}-${i}`,\n          cx: padBasePoint.x, cy: padBasePoint.y, // These are indicative, actual shape from elements\n          rx: basePadRx, ry: basePadRy,          // These are indicative\n          rotation: randRange(-10, 10),\n          color: 'transparent', // Pad container is transparent, elements have color\n          elements: padElements\n        });\n      }\n\n      generatedBranches.push({\n        id: `branch-${category}-${index}`, start: bStart, end: bEnd, control1: bCp1, control2: bCp2,\n        thickness: thick, angle, level: 0, skillsInCategory: categorySkills,\n        masteryRatio: categoryMasteryRatio, subBranches: [], foliagePads\n      });\n    });\n    return { trunkPath, branches: generatedBranches, pot };\n  }, [skillsByCategory, overallMasteryRatio, theme.palette.grey]);\n\n  const animProps = useSpring({ opacity: 1, from: { opacity: 0 }, config: config.molasses });\n  const elementAnimProps = (delay = 0) => useSpring({\n    to: { opacity: 1, transform: 'scale(1)' },\n    from: { opacity: 0, transform: 'scale(0.8)' },\n    config: config.gentle,\n    delay\n  });\n\n  return (\n    <animated.div style={animProps}>\n      <Paper elevation={0} sx={{ p: 3, mb: 4, borderRadius: '20px', backgroundColor: '#f7f7f7' }}>\n        <Typography variant=\"h5\" gutterBottom align=\"center\" sx={{ fontWeight: 'bold', color: '#555' }}>\n          Your Growth Tree\n        </Typography>\n        <Box sx={{ width: '100%', height: 350, position: 'relative', mt: 2 }}>\n          <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 300 400\" style={{ overflow: 'visible' }}>\n            <defs>\n              <linearGradient id=\"trunkStrokeGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" stopColor={TRUNK_COLOR} />\n                <stop offset=\"50%\" stopColor={TRUNK_COLOR} />\n                <stop offset=\"100%\" stopColor={TRUNK_COLOR} />\n              </linearGradient>\n               <filter id=\"subtleShadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                <feDropShadow dx=\"1\" dy=\"2\" stdDeviation=\"1\" floodColor=\"#000\" floodOpacity=\"0.2\"/>\n              </filter>\n            </defs>\n\n            {/* Pot */}\n            <animated.g style={elementAnimProps(200)}>\n              <path d={treeElements.pot.body} fill={POT_COLOR_BODY} filter=\"url(#subtleShadow)\"/>\n              <path d={treeElements.pot.rim} fill={POT_COLOR_RIM} />\n              {treeElements.pot.feet.map((footPath, i) => (\n                <path key={`pot-foot-${i}`} d={footPath} fill={POT_FEET_COLOR} />\n              ))}\n            </animated.g>\n\n            {/* Trunk */}\n            <animated.path\n              d={treeElements.trunkPath}\n              fill=\"url(#trunkStrokeGradient)\" // Using the solid color gradient for fill\n              stroke={TRUNK_COLOR} // Stroke for definition\n              strokeWidth=\"1.5\"\n              style={elementAnimProps(400)}\n              filter=\"url(#subtleShadow)\"\n            />\n            \n            {treeElements.branches.map((branch, branchIndex) => (\n              <animated.g key={branch.id} style={elementAnimProps(600 + branchIndex * 200)}>\n                <path\n                  d={`M ${branch.start.x} ${branch.start.y} C ${branch.control1.x} ${branch.control1.y}, ${branch.control2.x} ${branch.control2.y}, ${branch.end.x} ${branch.end.y}`}\n                  stroke={BRANCH_COLOR}\n                  strokeWidth={branch.thickness}\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  filter=\"url(#subtleShadow)\"\n                />\n                {branch.foliagePads.map(pad => (\n                  <g key={pad.id} transform={`rotate(${pad.rotation} ${pad.cx} ${pad.cy})`}>\n                    {pad.elements.map(el => (\n                      <ellipse\n                        key={el.id}\n                        cx={el.cx}\n                        cy={el.cy}\n                        rx={el.rx}\n                        ry={el.ry}\n                        fill={el.color}\n                        opacity={el.opacity}\n                        filter=\"url(#subtleShadow)\"\n                      />\n                    ))}\n                  </g>\n                ))}\n              </animated.g>\n            ))}\n          </svg>\n        </Box>\n        <Typography variant=\"body1\" align=\"center\" sx={{ mt: 3, color: '#666' }}>\n          You've mastered {masteredSkillsCount} skills so far! Keep growing!\n        </Typography>\n      </Paper>\n    </animated.div>\n  );\n};\n\nexport default BonsaiTree;\n\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}